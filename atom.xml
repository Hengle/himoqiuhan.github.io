<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>楸涵の小窝</title>
  
  <subtitle>祝你天天开心！</subtitle>
  <link href="https://himoqiuhan.github.io/atom.xml" rel="self"/>
  
  <link href="https://himoqiuhan.github.io/"/>
  <updated>2023-07-01T13:09:21.969Z</updated>
  <id>https://himoqiuhan.github.io/</id>
  
  <author>
    <name>楸涵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>技术美术百人计划学习笔记（美术1.3 角色设计精要）</title>
    <link href="https://himoqiuhan.github.io/2023/07/01/Notes-TA100A-3/"/>
    <id>https://himoqiuhan.github.io/2023/07/01/Notes-TA100A-3/</id>
    <published>2023-07-01T13:08:18.000Z</published>
    <updated>2023-07-01T13:09:21.969Z</updated>
    
    <content type="html"><![CDATA[<h1>笔记链接：<a href="https://emerald-sunscreen-d5d.notion.site/1-4-bb6260de73a444a28bbfa27df35e48c3?pvs=4">1.4 场景设计精要</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;笔记链接：&lt;a href=&quot;https://emerald-sunscreen-d5d.notion.site/1-4-bb6260de73a444a28bbfa27df35e48c3?pvs=4&quot;&gt;1.4 场景设计精要&lt;/a&gt;&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="美术理论" scheme="https://himoqiuhan.github.io/tags/%E7%BE%8E%E6%9C%AF%E7%90%86%E8%AE%BA/"/>
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（美术1.3 角色设计精要）</title>
    <link href="https://himoqiuhan.github.io/2023/07/01/Notes-TA100A-2/"/>
    <id>https://himoqiuhan.github.io/2023/07/01/Notes-TA100A-2/</id>
    <published>2023-07-01T09:37:33.185Z</published>
    <updated>2023-07-01T13:09:26.702Z</updated>
    
    <content type="html"><![CDATA[<h1>笔记链接：<a href="https://emerald-sunscreen-d5d.notion.site/1-3-29cc594395f24703b873fd7a0c52c77e?pvs=4">1.1-1.2 美术理论基础</a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;笔记链接：&lt;a href=&quot;https://emerald-sunscreen-d5d.notion.site/1-3-29cc594395f24703b873fd7a0c52c77e?pvs=4&quot;&gt;1.1-1.2 美术理论基础&lt;/a&gt;&lt;/h1&gt;
</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="美术理论" scheme="https://himoqiuhan.github.io/tags/%E7%BE%8E%E6%9C%AF%E7%90%86%E8%AE%BA/"/>
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（美术1.1-1.2 美术理论基础）</title>
    <link href="https://himoqiuhan.github.io/2023/06/25/Notes-TA100A-1/"/>
    <id>https://himoqiuhan.github.io/2023/06/25/Notes-TA100A-1/</id>
    <published>2023-06-25T04:01:11.000Z</published>
    <updated>2023-07-01T09:39:39.924Z</updated>
    
    <content type="html"><![CDATA[<h1>笔记链接：<a href="https://emerald-sunscreen-d5d.notion.site/1-1-1-2-9c00bd961b9249a7bfd4cdbb906abf59?pvs=4">1.1-1.2 美术理论基础</a></h1><h1>常用美术术语</h1><ul><li>脏：画面不通透，颜色关系上的脏指颜色偏暗纯度偏低、素描关系上的脏指体现在调子上的脏</li><li>乱：线条关系不明确，乱麻麻的感觉</li><li>散：独立分布的内容过多</li><li>光影：物体在不同受光面的明暗变化</li><li>黑白灰：指暗面、亮面、灰面</li><li>明暗五调子：高光、明暗交界线、亮面、灰面、暗面</li><li>飘了：光影有问题（阴影或AO）、不通透不立体</li><li>透视：指在平面上表现立体感、空间感的方法</li><li>色调/色相：平常人们理解的颜色，是色彩最显著的特种，为不同波长的色彩被感知的结果</li><li>饱和度/纯度：色彩的纯度，指原色在色彩中所占的百分比</li><li>明暗：色彩的明暗、深浅程度的差别，取决于反射光的强弱</li><li>三原色：色彩中不能再分解的三种基本颜色，光学三原色—红绿蓝，颜料三原色—红黄蓝</li><li>间色：三原色中的任何两种原色作等量混合调出的颜色</li><li>复色：任何两种间色（或者一种间色与一种原色）混合调出的颜色称为复色（也称再间色、第三次色）</li><li>同类色：同一色相中不同倾向的系列颜色被称为同类色</li><li>互补色：色环中相隔180°的颜色</li><li>对比色：24色色环上相距120°~180°的两种颜色</li><li>构图：在平面的物质空间上，根据构思中预想的形象和审美效果，安置和处理审美客体的位置与关系，将个别或局部的形象组成整体的艺术手法</li><li>轮廓：指绘画中界定描绘对象形状、大小、粗细、高低等基本范围的边缘线</li><li>体积感：体积感是指画中所描绘的物体给人的一种占有立体空间的感觉</li><li>空间感：空间感是在绘画中，依照透视法所营造出来的物体之间的稠密、远近、高下等空间关系，是画面中所体现出的立体感和纵深度如何的一个层面，也是绘画中构图、布局成败的一个重要标准</li><li>塑造能力：形和体和结构的准确能力既是塑造能力，形就是物体的剪影，体则是形的体积，结构即是连续相组合的体积</li><li>质感：质感是指绘画等造型艺术中，通过色彩的光亮、冷暖以及线条的粗细等不同的表现手法，在作品中所表现的各种物体所具有的内在特性和秉性</li><li>量感：量感，绘画术语。指画面上借助线条、色彩、明暗等造型因素，所表现出的描绘对象厚重、轻薄、稠密、大小等各种感觉</li><li>调子：光线强度的物理特征，是形体中的面所反映光的数量，也就是面的深浅度。他是表现形体、立体、空间、质量等的要素，是塑造的重要手段</li><li>笔触：绘画中的笔法。又称肌理，常指油画和水粉画中运笔的痕迹不同的笔触感觉有不同的特征，表现为画家的艺术风格和个性</li></ul>]]></content>
    
    
    <summary type="html">光影、透视、色彩、构图、镜头语言、概念设计的相关基础，以及一些常用的美术术语</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="美术理论" scheme="https://himoqiuhan.github.io/tags/%E7%BE%8E%E6%9C%AF%E7%90%86%E8%AE%BA/"/>
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形3.1 深度测试和模板测试）</title>
    <link href="https://himoqiuhan.github.io/2023/06/20/Notes-TA100T-8/"/>
    <id>https://himoqiuhan.github.io/2023/06/20/Notes-TA100T-8/</id>
    <published>2023-06-20T04:01:11.000Z</published>
    <updated>2023-07-01T07:48:16.736Z</updated>
    
    <content type="html"><![CDATA[<h1>笔记链接：<a href="https://emerald-sunscreen-d5d.notion.site/3-1-00295801c7794f6992f409d6e1184b6a?pvs=4">3.1 深度测试和模板测试</a></h1>]]></content>
    
    
    <summary type="html">深度测试与模板测试的基础知识以及一些案例，其中还有关于Early-Z技术的概述</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形2.9 GPU硬件架构及运行机制）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-7/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-7/</id>
    <published>2023-06-14T04:01:11.000Z</published>
    <updated>2023-07-01T01:59:01.028Z</updated>
    
    <content type="html"><![CDATA[<h1>2.9 深入GPU硬件架构及运行机制</h1><h1>前言问题及快速索引：</h1><p>先是我课前的回答，然后再等上课时或者上课后修正</p><ol><li><p>GPU是如何与CPU协调工作的？</p><p><a href="#CPU-GPU%E7%9A%84%E5%BC%82%E6%9E%84%E7%B3%BB%E7%BB%9F">CPU与GPU的异构系统</a></p></li><li><p>GPU也有缓存机制吗？有几层？他们的速度差异多少？</p><p>[GPU内存架构](##7.1 GPU内存架构)</p></li><li><p>GPU的渲染流程有哪些阶段？他们的功能分别是什么？</p><p>[GPU渲染流程](##2.2 完整渲染流程)</p></li><li><p>Early-Z技术是什么？发生在哪个阶段？这个阶段还会发生什么？</p><p>[Early-Z](#3 Early-Z)</p></li><li><p>SIMD和SIMT是什么？他们的好处是什么？co-issue呢？</p><p><a href="##SIMD">SIMD</a>、<a href="##SIMT">SIMT</a>、<a href="##co-issue">co-issue</a></p></li><li><p>GPU是并行处理的吗？若是，硬件层是如何设计和实现的？</p><p><a href="#CPU%E4%B8%8EGPU%E7%9A%84%E5%AF%B9%E6%AF%94">CPU与GPU的对比</a>、<a href="##GPU%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%B1%E6%80%A7">GPU架构的共性</a></p></li><li><p>GPC、TPC、SM是什么？Warp又是什么？它们和Core、Thread之间的关系如何？</p><p><a href="##GPU%E6%9E%B6%E6%9E%84%E7%9A%84%E5%85%B1%E6%80%A7">GPU架构的共性</a></p></li><li><p>顶点着色器（VS）和像素着色器（PS）可以是同一处理单元吗？为什么？</p><p>可以，用的都是Core</p></li><li><p>像素着色器（PS）的最小处理单元是1像素吗？为什么？会带来什么影响？</p><p>[渲染流程14](##2.2 完整渲染流程)</p></li><li><p>Shader中if、for等语句会降低渲染效率吗？为什么？</p><p>[渲染流程14](##2.2 完整渲染流程)</p></li><li><p>如下图，渲染相同面积的图形，三角数量少（左）的还是数量多的（右）的效率更快？为什么？</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="Untitled"></p><ul><li>答案是：同一个像素块如果分属不同的三角形，就会分配到不同的SM进行处理。由此推断，相同面积的区域，如果所属的三角形越多，就会导致分配给SM的次数越多，消耗的渲染性能也越多。</li></ul></li><li><p>GPU Context是什么？有什么作用？</p><p>[GPU Context](#9 GPU Context和延迟)</p></li><li><p>造成渲染瓶颈的问题很可能有哪些？该如何避免或优化他们？</p><p>[总结及渲染优化建议](10 总结及渲染优化建议)</p><ol><li>数据传输的带宽问题：优化模型、压缩贴图</li><li>CPU切换渲染状态过于频繁：合并使用同一材质的模型，减少场景中的材质总数</li><li>GPU性能限制：降低画质</li></ol></li></ol><h1>1 GPU硬件架构</h1><h2 id="1-1-GPU是什么">1.1 GPU是什么</h2><p>GPU全称Graphics Processing Unit，图形处理单元。</p><p>是专门用于绘制图像和处理图元数据的特定芯片</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/471fb59b-e239-45a7-a861-61cffb1d35cb.jpeg" alt="2.9-1 NVIDIA GPU芯片实物图"></p><p>NVIDIA GPU芯片实物图</p><h2 id="1-2-GPU物理架构">1.2 GPU物理架构</h2><ul><li><p>由于纳米工艺的引入，GPU可以将数以亿计的晶体管和电子器件集成在一个小小的芯片内。从宏观物理结构上看，现代大多数桌面级GPU的大小跟数枚硬币等同大小，部分甚至比一枚硬币还小。</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/3705924a-5482-4a7e-8011-1f2eaa9e38df.png" alt="2.9-2"></p></li><li><p>当GPU结合散热风扇、PCI插槽、HDMI接口等部件之后，就组成了显卡</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/21140ab7-1507-48de-9284-b1c19032c9ea.png" alt="2.9-3"></p></li><li><p>显卡不能独立工作，需要装载在主板上，结合CPU、内存、显存等硬件设备组成完整的PC机</p></li></ul><h2 id="1-3-GPU硬件架构">1.3 GPU硬件架构</h2><h3 id="NVIDIA-GPU架构发展关键点">NVIDIA GPU架构发展关键点</h3><ul><li>2008 - Tesla<ul><li>Tesla最初是给计算处理单元使用的，应用于早期的CUDA系列显卡芯片中，并不是真正意义上的普通图形处理芯片。</li></ul></li><li>2010 - Fermi<ul><li>Fermi是第一个完整的GPU计算架构。首款可支持与共享存储结合纯cache层次的GPU架构，支持ECC的GPU架构。</li></ul></li><li>2014 - Maxwell<ul><li>其全新的立体像素全局光照 (VXGI) 技术首次让游戏 GPU 能够提供实时的动态全局光照效果。基于 Maxwell 架构的 GTX 980 和 970 GPU 采用了包括多帧采样抗锯齿 (MFAA)、动态超级分辨率 (DSR)、VR Direct 以及超节能设计在内的一系列新技术。</li></ul></li><li>2018 - Tering<ul><li>Turing 架构配备了名为 RT Core 的专用光线追踪处理器，能够以高达每秒 10 Giga Rays 的速度对光线和声音在 3D 环境中的传播进行加速计算。Turing 架构将实时光线追踪运算加速至上一代 NVIDIA Pascal™ 架构的 25 倍，并能以高出 CPU 30 多倍的速度进行电影效果的最终帧渲染。2060系列、2080系列显卡也是跳过了Volta<strong>直接选择了Turing架构。</strong></li></ul></li></ul><h3 id="NVIDIA-Tesla架构">NVIDIA Tesla架构</h3><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/cd66d1dc-5f85-4259-80de-6d1cd1c8f14b.png" alt="2.9-4"></p><ul><li>拥有7组TPC (Texture Process Cluster, 纹理处理簇)</li><li>每个TPC有两组SM (Stream Multiprocessor — 流多处理器)</li><li>每个SM包含：<ul><li>8个SP (Streaming Processor — 流处理器)</li><li>2个SFU (Special Function Unit — 特殊函数单元)</li><li>L1缓存、MT Issue（多线程指令获取）、C-Cache（常量缓存）、共享内存</li></ul></li><li>除了TPC核心单元，还有与显存、CPU、系统内存交互的各种部件</li></ul><h3 id="NVIDIA-Fermi架构">NVIDIA Fermi架构</h3><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/b9966bc7-2ca2-4fa7-bb96-279eb2f9e35f.png" alt="2.9-5"></p><ul><li>拥有16个SM<ul><li>2个Wrap Schedual（线程束）</li><li>两组共32个Core</li><li>16组加载存储单元（LD/ST）</li><li>4个特殊函数单元（SFU）</li><li>分发函数（Dispatch Unit）</li></ul></li><li>每个Core：<ul><li>1个FPU（浮点数单元）</li><li>1个ALU（逻辑运算单元）</li></ul></li></ul><h3 id="NVIDIA-Maxwell架构">NVIDIA Maxwell架构</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/ce61c7b2-8a10-4509-81b0-7372b4d8b991.png" alt="2.9-6" style="zoom:80%;" /><ul><li>采用Maxwell的GM204拥有4个GPC（Graphics Process Cluster — 图形处理簇）</li><li>每个GPC有4个SM，对比Tesla架构来说，在处理单元上有了很大的提升</li></ul><h3 id="NVIDIA-Turning架构">NVIDIA Turning架构</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/11c0c83b-1c03-459d-b753-1ad1d843fe28.png" alt="2.9-7" style="zoom: 25%;" /><ul><li>6个GPC（图形处理簇）</li><li>36个TPC（纹理处理簇）</li><li>72个SM（流多处理器）</li><li>每个GPC有6个TPC，每个TPC有2个SM</li><li>4608个CUDA核</li><li>72个 RT核</li><li>288个纹理单元</li><li>12x32位GDDR6内存控制器（共384）</li></ul><p>其中每个SM的结构如下：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/024272b6-85bb-4f1b-a3ab-6a03f52bf28e.png" alt="2.9-8" style="zoom: 50%;" /><ul><li>64个CUDA核<ul><li>CUDA是NVIDIA推出的统一计算架构</li></ul></li><li>8个Tensor核<ul><li>Tensor Core是专门为执行张量或矩阵运算而设计的专用执行单元</li></ul></li><li>256KB寄存器文件</li><li>RT Core</li></ul><h3 id="GPU架构的共性">GPU架构的共性</h3><ul><li>GPC：图形处理蹙</li><li>TPC：纹理处理簇</li><li>Thread：线程</li><li>SM、SMX、SMM（Stream Multiprocessor，流多处理器）</li><li>Warp线程束、Warp Scheduler（Wrap编排器）</li><li>SP（Streaming Processor，流处理器）</li><li>Core（执行数学运算的核心）</li><li>ALU（逻辑运算单元）</li><li>FPU（浮点数单元）</li><li>ROP（Render Output Unit，渲染输出单元）</li><li>Load/Store Unit（加载存储单元）</li><li>L1 Cache（L1缓存）</li><li>L2 Cache（L2缓存）</li><li>Shared Memory（共享内存）</li><li>Register File（寄存器）</li></ul><p>GPU为什么会有那么多层级且有那么多雷同的部件？因为GPU的任务是天然并行的，现代GPU的架构皆是以<strong>高度并行能力</strong>而设计的</p><p>核心组件结构：</p><ul><li>包含关系：GPC→TPC→SM→CORE</li><li>SM中包含Poly Morph Engine（多边形引擎）、L1 Cache（L1缓存）、Shared Memory（共享内存）、Core（执行数学运算的核心等）</li><li>CORE中包含ALU、FPU、Execution Context（执行上下文）、Detch、Decode（解码）</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/7dcde62d-8d2c-49d3-8c48-56ffb9219178.png" alt="2.9-9"></p><h1>2 GPU的运行机制</h1><h2 id="2-1-GPU渲染总览">2.1 GPU渲染总览</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/678d15f1-0a7c-4e5f-86b8-dd155f234197.png" alt="2.9-10 Fermi架构运行机制总览" style="zoom: 50%;" /><p>Fermi架构运行机制总览</p><p>从Fermi开始NVIDIA使用类似的原理架构，使用一个Giga Thread Engine来管理所有正在进行的工作，GPU被划分成多个GPCs（Graphics Processing Cluster），每个GPC拥有多个SM（SMX、SMM）和一个光栅化引擎（Raster Engine）。他们其中有很多的连接，最显著的是Crossbar，它可以连接GPCs和其他功能性模块（例如ROP或其他子系统）</p><p>程序员编写的shader是在SM上完成的，每个SM包含许多为线程执行数学运算的Core（核心）。例如，一个线程可以是顶点或像素着色器驱动，Warp Schedule管理一组32个线程作为Warp（线程束），并将要执行的指令移交给Dispatch Units</p><p>GPU中实际有多少这些单元（有多少个GPC，每个GPC有多少个SM……）取决于芯片配置本身</p><h2 id="2-2-完整渲染流程">2.2 完整渲染流程</h2><ol><li>首先，场景中的模型包含了mesh数据，位置信息等，经过camera的粗粒度裁剪获得真正需要显示在屏幕中的模型。程序通过图形API（DX、GL、WEBGL）发出drawcall指令，指令会被推送到程序驱动，驱动会检查指令的合法性，然后会把指令放到GPU可以读取的Pushbuffer中</li><li>经过一段时间或者显式调用flush指令后，驱动程序把Pushbuffer的内容发送给GPU，GPU通过主机接口（Host Interface）接受这些命令，并通过前端（Front End）处理这些命令</li><li>在图元分配器（Primitive Distributor）中开始工作分配，处理indexBbuffer中的顶点产生三角形分成批次（batches），然后发送给多个GPCs。这一步的理解就是提交上来n个三角形，分配给这几个GPC同时处理。</li></ol><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/2be8e11c-e5ab-4cc7-af39-81180307b26a.png" alt="2.9-11"></p><p>这一阶段的理解就是场景中的数据包括vbo，cbuffer等已经提交到GPU，GPU通过指针绑定到对应的数据层面上通过GPC开始同时处理。</p><ol start="4"><li><p>在GPC中，每个SM中的Poly Morph Engine负责通过三角形索引（Triangle Indices）取出三角形的数据（Vertex Data），即下图中的Vertex Fetch模块</p></li><li><p>在获取数据之后，SM会以32个线程（Thread）为一组，组成一个线程束（Wrap），开始处理顶点的数据</p><ul><li><p>Wrap是典型的<strong>单指令，多线程（Single instruction, multiple thread - SIMT）</strong>，32个线程同时执行的指令是一模一样的，只是线程数据不一样，这样的好处就是一个Wrap只需要一套逻辑，对指令进行解码、执行即可，芯片可以做得更小更快，因为GPU处理的任务是天然并行的</p></li><li><p>SIMT与SIMD(单指令多数据)的差别：简而言之就是输入一个vec4进行计算时，SIMT会把vec4拆分为四个float进行计算，执行4次cycle，而SIMD则是进行一次计算，执行1次cycle。在负责计算的情况下，SIMT相比于SIMD，对开发者和编译器的要求更低，更好优化<br>资料：<a href="https://zhuanlan.zhihu.com/p/113360369">https://zhuanlan.zhihu.com/p/113360369</a></p><ol><li><p>2、从一个线程角度看。从我的研究看，SIMD一般是这样实现的，一个线程处理一条指令，这条指令是向量化处理的。例如一个32bit位宽的4维向量vec4，一条指令最快就在一个cycle执行完。那SIMT，最快要用4个cycles来完成。在SIMT的架构上，会把vec4分解开，然后一个cycle处理完一个数据。所以最快需要4个cycle。好了这里我们讲的是一个线程的情况看，但从这个角度，大家可能都觉得SIMD效率更高。</p></li><li><p>2、单个线程的SIMD核SIMT逻辑单元对比。从上述中看，基本可以认为单个线程看，SIMD相对SIMT需要4倍的逻辑单元。这里的逻辑单元可以认为是最基本的逻辑计算单元。当然也可以理解为单个线程的面积SIMD基本接近SIMT的4倍面积。</p></li><li><p>4、单核同时多线程SIMD和SIMT同等算力对比。很显然SIMD的线程个数是SIMT线程的n分之一就可能实现同等算力。为了达到这种情况，算法的实现必须严格的按照n维的整数倍来实现。</p></li><li><p>5、SIMD在线程越来越多的时候不在有优势。很显然，随着线程越来越多，SIMD如果单纯把向量维度增加的话，会出现vec16。对于这么长维度的话，浪费可能越来越多。因此有些架构可能会对16个线程分成4组的SIMD。然后线程打包成4组一个包。</p></li><li><p>6、SIMT在多线程的不足。因为SIMT始终是同一条指令的，从寄存器角度看就是PC指针始终是一样的。如果线程太多的时候，有些线程需要分支跳转（if-else），那么效率就会降低，所以很多GPU对分支计算一般耗时是多个分支的总和。</p></li></ol></li></ul></li></ol><p>![2.9-12](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 1.png)</p><ol start="6"><li><p>SM的warp调度器会按照顺序分发指令给整个warp，单个warp中的线程会锁步（lock-step）执行各自的指令（同一时间执行相同的指令） ，如果线程碰到不被执行的情况也会被遮掩（be masked out）</p><ul><li><p>被遮掩的原因有很多，比如当前的指令是if-true的分支，但是当前线程的数据条件是false；或者循环的次数不一样，比如说for的循环次数N不是一个常量，他是一个动态被计算出来的量，或是被break提前终止但是别的线程还在走。因此，shader中分支会显著增加时间消耗，在一个warp，32个线程中，除非都走到true或false力，否则相当于所有的分支都走一遍。线程不能独立执行指令，而是以一个warp中32个线程为单位，只有每个warp间才是独立的。</p></li><li><p>可以这样理解：在shader执行过程中，如果这一片32个线程，同时存在true或是false的情况，由于这32个线程是锁步的，那么true和false这两个指令他都会依次执行，只不过它的计算结果会被他的条件所遮蔽。更进一步，此为动态分支；那么静态分支呢？就是同一个warp中32个线程所有都走到同一个分支，即如果我们确保这32个分支里面所有都是true或是所有都是false的情况的话，那么他只会走单个分支。在这个分支执行完毕后，继续执行下一个指令。</p></li><li><p>变体的执行状况其实和if的判断情况比较相似，比如说我们要执行变体一中的方法，相当于就是一个if true，这时候我们其实可以把它改造成使用if shader中的一个属性或者公共变量来做判断，这样可以减少变体的数量。比如说shader的属性中设置一个变量它的范围是0~1，对应我们的一个变体， 然后我么写一个判断：if (x &lt; 1)，当我们把他设置成0的时候，我们就可以保证所有执行这个shader的线程中都是true，那么我们能够使得线程全部只执行true中的指令，从而获得使用变体相同的效果，这样就可以减少变体数量。</p></li></ul></li><li><p>而现在使用的URP管线中，他能否使用SRP Batch，关键就是相同的shader中它使用的变体是否一致</p></li></ol><p>![2.9-13](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 2.png)</p><ol start="8"><li><p>warp中的指令可以被一次完成，也可能经过多次调度。</p></li><li><p>由于某些指令比其他指令需要更长的时间才能完成，特别是内存加载，warp调度器可能会简单地切换到另一个没有内存等待的warp，这是GPU如何克服内存读取延迟的一个关键——只是简单地切换活动线程组</p><ul><li><p>为了加快这种切换，调度器管理的所有warp在寄存器文件中都有自己的寄存器。此处就会产生一个矛盾：如果说当我们的shader中寄存器需要的越多，就会给warp留越少的空间，导致产生越少的warp，这个时候碰到内存延迟，就只能等待，而没有可以运行的warp去切换</p></li><li><p>猜测这有些游戏GPU没吃多少但帧率就是低是因为shader里寄存器用太多了？</p></li></ul></li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/88904ac5-40a1-4534-bdb5-0bf8bdd55e8a.png" alt="2.9-14" style="zoom:80%;" /><ol start="10"><li>一旦warp完成了vertex-shader的所有指令，运算结果会被Viewport Transform模块处理，三角形会被裁减然后准备栅格化，GPU会使用L1和L2缓存来进行vertex-shader和pixel-shader的数据通信<ul><li>Viewport Transform模块的处理就是将数据从NDC变换到屏幕空间，并在此过程中进行裁剪</li></ul></li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/a6f08863-e0a6-45fc-93c1-defd1859cae0.png" alt="2.9-15" style="zoom:80%;" /><ol start="11"><li>接下来这些三角形会被分割，再分配给多个GPC，三角形的范围决定它将被分配到那个光栅引擎（Raster Engines），每个Raster Engines覆盖了多个屏幕上的tile，这等于把三角形的渲染分配到了多个tile上面。也就是像素阶段就把三角形进行了按显示的像素的划分，即把显示的数据由按三角形划分变为按显示的像素划分</li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/3270af08-6537-4145-9ab4-2c06bda94b8d.png" alt="2.9-16" style="zoom:80%;" /><ol start="12"><li><p>SM上的Attribute Setup保证了从vertex shader来的数据经过插值后是pixel shader可读的</p></li><li><p>GPC上的光栅引擎（Raster Engines）在他接收到的三角形上来工作，来负责这些三角形的像素信息生成（同时会处理背面剔除和Early-Z剔除）</p></li><li><p>32个像素线程被分成一组<strong>8个2x2的像素块</strong>（这是像素着色器上的最小工作单元，即4个像素），在这个像素线程内，如果没有被三角形覆盖就会被遮掩，SM中的warp调度器会管理像素着色器的任务。</p><ul><li><p><strong>像素着色器最小工作单元是</strong>4个像素的原因是，2x2的像素块我们可以轻易地获取2个像素之间的ddx和ddy，用于计算读取哪个层级的mipmap，从而减少我们从贴图中读取贴图数据的大小，进而降低带宽</p></li><li><p>说起mipmap，开启之后不只是增加内存，让远处部分不会有像素闪烁，因为每个层级的mipmap都是上一层及经过双线性插值或者三线性插值后的结果，其表现是连续的 。但其实他更重要的作用是减少带宽的消耗，因为在读取贴图的时候，在正常UV0-1的连续读取中，GPU会尽量将这个shader中读取这张贴图的指令拼接在一起，GPU会将贴图中第一个读取指令的uv值位置周围一片像素读进L2、L1缓存中，这就是贴图读取的预测策略。这样做的好处是由于uv的连续，会有高命中率直接获取所需uv值的颜色值；而不连续的uv值将需要获取图片中2个距离很大的区域，比如如果当前像素线程中uv值是(0,0)，那么读取贴图的时候，GPU会将索引为(0,0)周围区域的像素一并读取进L2、L1缓存中；但如果我们右边第二个像素值却是(0.5,0.5)（这在距离摄像机远的物件中，是非常常见的顶点UV插值后的结果），这样的话，我们在读取贴图的时候当前内存中不存在这个贴图的uv位置的数据，那么我们只能清空当前已经进入缓存的数据，再重新读取贴图对应uv(0.5,0.5)周围一片的像素的值，再次放入L2、L1缓存中，这就是我们经常说的缓存命中率低造成的带宽上升的问题。<br>我的理解：开启mipmap后，显卡会先计算当前像素的mipmap level，根据mipmap level去读取对应等级的贴图，让两个相邻像素的所读取的贴图位置相邻，提高Cache Hit</p></li></ul></li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled 3.png" alt="2.9-17" style="zoom: 80%;" /><ol start="15"><li><p>而接下来的操作就和vertex shader中的逻辑步骤完全一样了，但是变成了在像素着色器线程中执行。由于不耗费任何性能就可以获取一个像素内的值，导致锁步执行非常便利，所有的线程内可以保证其指令在同一点</p></li><li><p>最后一步，现在的像素着色器已经完成了颜色的计算和深度值的计算，在这个点上，我们必须考虑三角形的原始API顺序，然后才将数据移交给ROP（Render Output Unit，渲染输出单元），一个ROP内部有很多ROP单元，在ROP单元中处理深度测试和frambuffer的混合，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误</p></li></ol><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/cd7ce2fb-d2a6-4682-9904-ecf4d818a49c.png" alt="2.9-18"></p><h1>3 Early-Z</h1><p>早期的GPU的渲染管线测深度测试是在像素着色器之后才执行的，这样会造成很多根本不可见的像素执行了耗性能的像素着色器计算。后来，为了减少像素着色器的额外消耗，将深度测试提前制像素着色器之前（如下图所示），这就是Early-Z技术的由来。Early-Z技术可以将很多无效的像素提前剔除，避免他们进入耗时严重的像素着色器。Early-Z剔除的最小单位不是1像素，而是像素块（2*2）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/c6f913dd-8850-430e-ac9d-65e1f7722680.png" alt="2.9-19" style="zoom: 67%;" /><p>但是，以下情况会导致Early-Z失效：</p><ol><li>开启Alpha Test：由于Alpha Test需要在像素着色器后的Alpha Test阶段比较（DX的discard，OpenGL的Clip），所以无法在像素着色器之前就决定该像素是否被剔除</li><li>开启Alpha Blend：启用了Alpha混合的像素很多需要与frame buffer做混合，无法执行深度测试，也就无法利用Early-Z技术。</li><li>关闭深度测试：Early-Z是建立在深度测试开启的条件下，如果关闭了深度测试，也就无法启用Early-Z技术</li><li>开启Muti-Sampling：多采样会影响周边像素，而Early-Z阶段无法得知周边像素是否被裁剪，故无法提前剔除</li><li>以及其他任何导致需要混合后面颜色的操作</li></ol><h1>4 SIMD与SIMT</h1><h2 id="SIMD">SIMD</h2><p>SIMD，Simgle Instruction Mutiple Data，是单指令多数据，在GPU的ALU单元内，一条指令可以处理多维向量（一般是4D）的数据。比如，有以下shder指令：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float4 c = a + b; <span class="comment">//a, b都是float4类型的数据</span></span><br></pre></td></tr></table></figure><p>对于没有SIMD的处理单元，需要4条指令将4个float数值相加，汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD c.x, a.x, b.x</span><br><span class="line">ADD c.y, a.y, b.y</span><br><span class="line">ADD c.z, a.z, b.z</span><br><span class="line">ADD c.w, a.w, b.w</span><br></pre></td></tr></table></figure><p>但有了SIMD技术后，只需要一条指令就可以完成，汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SIMD_ADD c,a,b</span><br><span class="line">//这就相当于for(i=0;i&lt;n;++i) a[i]=b[i]+c[i];</span><br></pre></td></tr></table></figure><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/df086102-efb2-4621-aeb2-32ea37d65ca9.png" alt="2.9-20" style="zoom:80%;" /><h2 id="SIMT">SIMT</h2><p>SIMT，Single Instruction Multiple Thread，是单指令多线程，是SIMD的升级版，可对GPU中单个SM中的多个Cire同时处理同一指令，并且每个Core存取的数据可以是不同的。</p><p>其汇编代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SIMT_ADD c,a,b</span><br></pre></td></tr></table></figure><p>上述指令会被同时送入在单个SM中被编组的所有Core中，同时执行运算，但a、b、c的值都可以不一样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__global__void add(float *a, float *b, float *c)&#123;</span><br><span class="line">int i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">a[i] = b[i] + c[i]; //no loop!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/5cfc2c48-c718-4b3e-ab63-53a60068f59f.png" alt="2.9-21" style="zoom:80%;" /><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/9aed3ff5-db7b-42e8-b4a3-59bd9609a13d.png" alt="9aed3ff5-db7b-42e8-b4a3-59bd9609a13d.png"></p><h2 id="co-issue">co-issue</h2><p>co-issue是为了解决SIMD运算单元无法充分利用的问题。例如下图，由于float数量的不同，ALU利用率从100%依次下降为75%、50%、25%</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/b6e2d7ce-fc20-4eb6-8b83-0c83f64a9c4b.png" alt="2.9-22" style="zoom: 67%;" /><p>为了解决着色器在低维向量的利用率低的问题，可以通过合并1D与3D，或合并2D与2D的指令。例如下图，DP3指令用了3D数据，ADD指令只有1D数据，co-issue会自动将他们合并，在同一个ALU中只需要一个指令周期即可执行完</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/d2ca8f1f-b223-42b4-9cec-f206f184b126.png" alt="2.9-23" style="zoom: 80%;" /><p>但是对于向量运算单元（Vetor ALU），如果其中一个变量既是操作数又是存储数的情况，无法启用co-issue技术</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/619a2a5c-4707-4fbd-bd09-bb54953a3a07.png" alt="2.9-24" style="zoom:80%;" /><h1>5 CPU与GPU的对比</h1><p>CPU是一个具有多种功能的优秀领导者，他的优点在于调度、管理、协调能力强，但计算能力一般</p><p>GPU相当于一个接受CPU调度的”拥有大量计算能力“的员工</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4302207a-2747-48d0-b58c-93b0703bcfc9.png" alt="4302207a-2747-48d0-b58c-93b0703bcfc9.png"></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/94f04abd-2836-431a-be10-921920d9ad5a.png" alt="2.9-25" style="zoom:80%;" /><h1>6 CPU-GPU的异构系统</h1><p>根据CPU和GPU是否共享内存，可分为两种类型得CPU-GPU架构：Discrete分离式架构，和Coupled耦合式架构</p><ul><li><p>分离式架构中，CPU和GPU各自有独立的缓存和内存，他们通过PCI-e等总线通讯。这种结构的缺点在于PCI-e相对于两者具有低带宽和高延迟，数据的传输成了其中的性能瓶颈。目前使用非常广泛，如PC等</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/0006348d-8fd8-48fd-a5b9-2b6174882a0c.png" alt="2.9-26"></p></li><li><p>耦合式架构中，CPU和GPU共享内存和缓存。AMD的APU采用的就是这种结构，目前主要用在游戏主机中，如PS4，智能手机</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/190f0a37-8c4d-4328-b466-41da202c6fa9.png" alt="2.9-27"></p></li></ul><p>在内存管理方面，分离式结构中CPU和GPU各自拥有独立的内存，两者共享一套虚拟地址空间，必要时会进行内存拷贝。对于耦合式结构，GPU没有独立的内存，与CPU共享内存，由MMU(Memory Management unit)进行存储管理</p><h1>7 GPU资源机制</h1><h2 id="7-1-GPU内存架构">7.1 GPU内存架构</h2><p>GPU与CPU类似，也有多级缓存结构：寄存器、L1缓存、L2缓存、GPU显存、系统内存</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/237a8163-2067-4f70-bfbc-67c3acda6135.png" alt="2.9-28" style="zoom:80%;" /><p>他们的存取速度从寄存器到系统内存依次变慢。由下图可见，GPU读取寄存器时，消耗一个访问周期，而共享内存L1缓存是1~32个，L2缓存是32~64个，而纹理、常量缓存和全局内存达到了惊人的400~600</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4683eb74-02b1-40f7-b9b8-eb14eb72eb5e.png" alt="4683eb74-02b1-40f7-b9b8-eb14eb72eb5e.png"></p><p>由此可见，shader直接访问寄存器、L1、L2缓存还是比较快的，但是访问纹理、常量缓存和全局内存会非常慢，会造成很高的延迟。这也是为什么我们要增加纹理的缓存命中率，尽量避免cache-missing</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4aec7a55-008f-4586-b327-dffb24fff640.png" alt="2.9-29" style="zoom: 33%;" /><h2 id="7-2-GPU中的各个内存">7.2 GPU中的各个内存</h2><p>GPU内存分布在RAM存储芯片或者GPU芯片上，他们物理上所在的位置决定了他们的速度、大小以及访问规则</p><ul><li>全局内存（Global Memory）：位于片外存储体中，容量大，但访问延迟高、传输速度较慢，使用L2 Cache做缓存</li><li>本地内存（Local Memory）：一般位于片内存存储体中，变量、数组、结构体等都存放在此处，但是有大数组、大结构体以至于寄存器区放不下他们，编译器在编译阶段就会将他们放到片外的DDR芯片中（最好的情况也会被扔到L2 Cache中），且将他们标记为”Local“型</li><li>共享内存（Shared Memory）：位于每个流处理器组（SM）中，其访问速度仅次于寄存器</li><li>寄存器内存（Register Memory）：位于每个流处理器组（SM）中，访问速度最快的存储体，用于存储线程执行时所需的变量</li><li>常量内存（Constant Memory）：位于每个流处理器组（SM）中和片外的RAM存储器中</li><li>纹理内存（Texture Memory）：位于每个流处理器组（SM）中和片外的RAM存储器中</li></ul><h2 id="7-3-GPU资源管理模型（分离式架构）">7.3 GPU资源管理模型（分离式架构）</h2><p>首先从图右下角可知，CPU与GPU之间的交流通过MMIO进行，我们的驱动程序通过MMIO获取寄存器的状态，也通过MMIO进行数据的传输。</p><p>图中间的GPU Context，他位于驱动程序所管理的虚拟内存当中，GPU可以并存多个活跃状态下的context，也就是多个GPU上下文。</p><p>所有的contex通过page table隔离，提交命令到硬件单元，也就是GPU Channel，每个GPU Channel会关联一个context，而一个GPU Context可以提交给多个GPU Channel。</p><p>我们的指令通过channel发送到core中的执行上下文模块存储，等待调度执行。在执行完毕后，将计算结果写回虚拟内存中，然后虚拟内存通过DMA（Direct Memory Access，一种高速的数据传输操作）传输回我们的主存。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/fce9fcca-b3d3-4e99-92fc-e85578ef761d.png" alt="2.9-30" style="zoom:80%;" /><p>简单来说，CPU到GPU的数据流如下所示</p><ol><li>将主存的数据复制到显存中</li><li>CPU通过指令驱动GPU</li><li>GPU中的每个运算单元并行处理（此步会在显存上存取数据）</li><li>GPU将现存结果传回主存</li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/71b7b653-1778-488f-ad66-61a4baf9aece.png" alt="2.9-31" style="zoom:67%;" /><h1>8 硬件层面下Shader的运行机制</h1><p>执行阶段，CPU端会将已经在离线阶段编译好的shader汇编代码经由PCI-e推送到GPU端，GPU在执行代码时，会用Context将指令分成若干Channel推送到各个Core的存储空间中</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/004112f1-93e2-4c86-b2d4-0df5d799d374.png" alt="2.9-32" style="zoom: 80%;" /><p>下面就是一个假象的Core的示意图，一个GPU Core包含8个ALU，4组执行环境（Execution Context），每组执行环境有8个GPU Context。这样，一个Core可以并发(Concurrent but interleaved)执行4条指令流(Instruction Streams)，32个并发程序片元（Fragment）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4519013b-2907-42a8-b4cc-65b33e27c2ce.png" alt="2.9-33" style="zoom:80%;" /><p>以如下漫反射为例：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">sampler mySamp;</span><br><span class="line">Texture2D&lt;float3&gt; myTex;</span><br><span class="line">float3 lightDir;</span><br><span class="line"></span><br><span class="line">float4 diffuseShader(float3 norm, float2 uv)</span><br><span class="line">&#123;</span><br><span class="line">float3 kd;</span><br><span class="line">kd = myTex.Sample(mySamp, uv);</span><br><span class="line">kd *= <span class="built_in">clamp</span>(<span class="built_in">dot</span>(lightDir, norm), <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">return</span> float4*kd, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行阶段，汇编代码会被GPU推送到执行上下文（Execution Context），然后ALU会逐条获取）Detch）、解码（Decode）汇编指令为二进制指令，并执行他们。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4ffd9380-f5e7-40ca-bdf4-0d8622e48ef8.png" alt="2.9-34" style="zoom: 67%;" /><p>对于SIMT架构的GPU，汇编指令有所不同，变成了SIMT特定指令代码</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/0551789e-85e9-4c68-a8b6-685eef70c801.png" alt="2.9-35" style="zoom:67%;" /><p>并且Context以Core为单位组成共享的结构，同一个Core的多个ALU共享一组Context；如果有多个Core，就会有更多的ALU同时参与shader计算，每个Core执行的数据是不一样的，可能是顶点、图元、像素等任何数据。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/296dbb35-9069-43cb-80c8-9031da0f7d8e.png" alt="2.9-36" style="zoom: 50%;" /><h1>9 GPU Context和延迟</h1><p>由于SIMT技术的引入，导致很多同一个SM内的很多Core并不是独立的，当它们当中有部分Core需要访问到纹理、常量缓存和全局内存时，就会导致非常大的卡顿（Stall）</p><p>例如下图中，有4组上下文（Context），它们共用同一组运算单元ALU。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/9b7c05c2-3a92-4352-b20d-9b523a131e14.png" alt="2.9-37" style="zoom: 50%;" /><p>假设第一组Context需要访问缓存或内存，会导致2~3个周期的延迟，此时调度器会激活第二组Context以利用ALU。当第二组Context访问缓存或内存又卡住，会依次激活第三、第四组Context，直到第一组Context恢复运行或所有都被激活</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4aa3972f-2f7c-41ee-9eba-00f6d6b6fa98.png" alt="2.9-38" style="zoom:50%;" /><p>延迟的后果是每组Context的总体执行时间被拉长了</p><p>越多Context可用就越可以提升运算单元的吞吐量，比如下图的18组Context的架构可以最大化地提升吞吐量：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/2e086ab5-1e2a-4bc3-918c-6b4b59256720.png" alt="2.9-39" style="zoom: 50%;" /><p>我们可以理解为，我们需要在shader中读取两张贴图，并且进行大量的计算。此时上下文会进行切割，尽量将不相关的计算分为不同的上下文，以便于分开执行。我们在第一组warp的32个线程指令走到读取第一个图后，它会将指针指向读取贴图的结果，然后开始切换到第二组warp中32个线程执行其余上下文。直到第二组warp又开始读取图片，这样又会激活第三组、第四组等。这样可以充分的利用我们读取图片内存卡住的一个时间</p><h1>10 总结及渲染优化建议</h1><ul><li>顶点着色器和像素着色器都是在同一个单元中执行的（在原本的架构中中vs和ps的确实分开的，后来NVIDIA把这个统一了），vs是按照三角形来并行处理的，ps是按照像素来并行处理的</li><li>vs和ps中的数据是通过L1和L2缓存传递的</li><li>warp和thread都是逻辑上的概念，sm和sp都是物理上的概念。线程束≠流处理器数</li></ul><p>优化建议：</p><ol><li>尽量使用自己扩展的几何实例化替代unity提供的静态合批、动态合批，静态合批将合并mesh增加vbo内存占用，动态合批则会增加CPU端的耗时开销</li><li>尽量减少顶点数与三角形面数，前者减少顶点着色器的运算和显存中frameData的内存存储，后者减少片元着色器的消耗</li><li>避免每帧提交buffer的数据，比如unityCPU版本的粒子系统，可使用GPU版本的粒子系统替代，将修改数据移动到GPU端；另外特别提醒的就是避免大片的透明粒子特效，这将造成严重的overdraw</li><li>减少渲染状的设置和获取，例如在Updare中获取设置shader的属性或者公共变量，因为前面提到CPU是通过MMIO获取寄存器数据，这将浪费更多的时间周期</li><li>3D物件硬使用LOD减少处理的顶点与面数的消耗，开启mipmap减少贴图缓存命中的丢失</li><li>避免AlphaTest的使用，这会导致Early-Z的失效</li><li>避免三角面过小，这会加剧overdraw的情况，也就是前面提到的一个三角形只占据3个像素点，却使用了12个线程去计算像素值，然后遮蔽其余9个的计算结果</li><li>在寄存器数量与变体数量中寻找平衡，使用if变量达成静态分支，取代变体，一方面可以减少变体数量，另一方面也可以使得URP中的SRP Batch更高效地合批</li><li>尽量避免判读分支，也就是shader中if true和false都会走的情况</li><li>减少复杂函数的调用，因为从硬件架构上可以看出特殊函数处理单元是远远少于正常计算单元的</li></ol>]]></content>
    
    
    <summary type="html">深入GPU硬件架构及运行机制</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形2.8 Flow Map流动效果实现）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-6/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-6/</id>
    <published>2023-06-14T03:52:27.000Z</published>
    <updated>2023-07-01T01:58:46.672Z</updated>
    
    <content type="html"><![CDATA[<h1>作业</h1><p>根据今天的内容，实现流动效果（与Demo不同，达到更好看的效果）</p><p>Flow Map贴图直接手绘，课程中的借助软件如Houdini的做法，更适用于开放世界那样的大场景，作业做Demo可以简单处理</p><h1>1 Flow Map是什么</h1><h2 id="1-1-基本概念">1.1 基本概念</h2><p>Flowmap实际上是一张记录了2D向量信息的纹理，flow map上的颜色（通常为RG通道）记录该处向量场的方向，让模型上某一点表现定量的特征。</p><p>通过在shader中偏移uv再对纹理进行采样，来模拟流动效果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="2.8-1" style="zoom:45%;" /><p>![2.8-2](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 1.png)</p><p>使用flow map干扰uv坐标</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled 2.png" alt="2.8-3" style="zoom: 45%;" /><h2 id="1-2-为什么要使用flowmap">1.2 为什么要使用flowmap</h2><p>flowmap类似于UV动画，而非顶点动画。换而言之，无需对模型进行操作，易实现，运算开销小</p><p>不仅仅是水面，任何和流动相关的效果都可以采用flowmap</p><p>![2.8-4](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 3.png)</p><p>所以flowmap是一种简单高效的用于实现流动效果的方法</p><p>flowmap还可以被用于天空球上</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled 4.png" alt="2.8-5" style="zoom: 45%;" /><h1>2 flowmap shader</h1><ul><li><p>采样Flow map获得向量场信息</p><ul><li>得到的是将来用于乘time的方向信息</li><li>flowmap不能直接使用，要将色值从[0,1]的范围映射到方向向量的范围[-1,1]</li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从flowmap中获取流向</span></span><br><span class="line">float3 flowDir = tex2D(_FlowMap, i.uv) * <span class="number">2.0</span> - <span class="number">1.0</span>;</span><br></pre></td></tr></table></figure></li><li><p>用向量场信息，使采样贴图的UV随时间变化</p><ul><li>UV - time</li><li>为什么是用减法（加上一个为负数的时间）：用减法从视觉上来看，采样得到的图象是在向右移动，与直观的运算法则相同</li></ul></li><li><p>对同一张贴图以半个周期的相位差采集两次，并线性插值，使贴图流动连续</p><ul><li><p>随着时间的进行，变形越来越夸张，为了将偏移控制在一定范围内，使用frac函数进行牵制</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> phase = frac(_Time);</span><br></pre></td></tr></table></figure><p>![2.8-6](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 5.png)</p></li><li><p>这样得到的效果会“跳变”，所以就构造周期相同，相位相差半个周期的波形函数</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> phase0 = frac(_Time * <span class="number">0.1</span> * _TimeSpeed);</span><br><span class="line"><span class="type">float</span> phase1 = frac(_Time * <span class="number">0.1</span> * _TimeSpeed + <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>![2.8-7](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 6.png)</p></li><li><p>用相位差半个周期的两层采样进行加权混合，使纹一个周期重新开始时的不自然情况被另一层采样重新覆盖</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//平铺贴图用的uv</span></span><br><span class="line">float2 tiling_uv = i.uv * _MainTex_ST.xy + _MainTex_ST.zw;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用波形函数周期化向量场方向，用偏移后的uv对材质进行偏移采样</span></span><br><span class="line">half3 tex0 = tex2D(_MainTex, tiling_uv - flowDir.xy * phase0);</span><br><span class="line">half3 tex1 = tex2D(_MainTex, tiling_uv - flowDir.xy * phase1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数计算波形函数变化的权值，使得MainTex采样在接近最大偏移时有权值为0，并因此消隐，构造较平滑的循环</span></span><br><span class="line">ffloat flowLerp = <span class="built_in">abs</span>((<span class="number">0.5</span> - phase0) / <span class="number">0.5</span>);</span><br><span class="line">ffloat3 finalColor = lerp(tex0, tex1, flowLerp); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>![2.8-8 其实只用看红线就行，蓝线表示tex1的权重值，红线则是1-蓝线](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 7.png)</p><p>![2.8-9](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 8.png)</p><p>有效缓解突变</p><p>我的理解：因为tex1比tex0慢半个周期，所以当tex0的偏移采样接近1时，为了降低由0→1的突变，在[0.5,1]的区间上，逐渐降低tex0的权重；与此同时，tex1不会在1时发生突变，tex1的权重则在慢慢增加。这样就很好地规避了偏移达到最大的时候跳变的问题。</p><p>同理，flowmap可以用于调整法线贴图的采样</p></li></ul></li></ul><h1>3 flowmap的制作</h1><h2 id="3-1-flowmap的烘培和相关设置">3.1 flowmap的烘培和相关设置</h2><ul><li>注意gamma矫正选项、UV匹配</li><li>flowmap贴图设置：<ul><li>无压缩或高质量</li><li>确认色彩空间</li></ul></li></ul><h2 id="3-2-Flowmap-Painter">3.2 Flowmap Painter</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled 9.png" alt="2.8-10" style="zoom: 50%;" /><ul><li>使用Flowmap Painter绘制得到的Flowmap为线性空间下的颜色（gamma1.0），不需要gamma矫正，取消勾选sRGB</li><li>否则会出现“没画的地方在流动”，“画的地方流动方向错误”等问题</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled 10.png" alt="2.8-11" style="zoom: 80%;" /><h2 id="3-3-Houdini-Labs">3.3 Houdini Labs</h2><p>Houdini Labs是内置在Houdini中的一组游戏开发相关的节点</p><p>//等到之后要用在项目里的时候再来学吧，不然现在直接学很快也就忘了</p><p>提前记录几个关键节点：</p><ul><li>flowmap：生成一张flowmap</li><li>修改flowmap的向量场：<ul><li>flowmap_brush：手动绘制flowmap</li><li>flowmap_guide：使用绘制的曲线来控制flowmap（需要输入一条曲线）</li><li>flowmap_obstacle：让流向与物体进行碰撞检测（需要输入一个网格）</li></ul></li><li>flowmap_to_color：将flowmap向量场信息转化为颜色信息</li><li>flowmap_visual：可视化flowmap</li><li>maps_baker：烘焙（一个用于高模烘低模的节点）</li></ul>]]></content>
    
    
    <summary type="html">Flow Map流动效果实现</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形2.7 Bump图）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-5/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-5/</id>
    <published>2023-06-14T03:42:29.000Z</published>
    <updated>2023-07-01T01:58:31.019Z</updated>
    
    <content type="html"><![CDATA[<h1>作业</h1><p>结合先行版基础渲染光照介绍(一)将本次课程中所讲的案例结合进先前的光照效果中（如何将视差后的结果与IBL进行结合，尤其是暗部的表现）</p><p>还有瞳孔的实现也用到了视差映射（见下节课的OP）</p><h1>1 Bump Mapping 凹凸映射</h1><h2 id="1-1-表达物体细节的三个尺度">1.1 表达物体细节的三个尺度</h2><ul><li>宏观尺度<ul><li>覆盖很多个像素</li><li>由顶点或三角形或其他的图元来表示的，建模通常就是在宏观尺度上进行处理</li></ul></li><li>中观尺度<ul><li>覆盖几个像素</li><li>描述了宏观尺度和微观尺度之间的特征，细节比较复杂，没有办法使用单个三角形来进行渲染，但这些细节又足够大，能够让观察者看出其中的细节，比如：皮肤的褶皱，肌肉组织的细节，砖块之间的缝隙等等。</li></ul></li><li>微观尺度<ul><li>小于一个像素</li><li>表现在着色模型中，而着色模型通常在像素着色器中实现。使用纹理贴图作为参数，模拟物体表面围观几何形状的相互作用，比如高光部分在微观尺度下是光滑的，漫反射部分在微观尺度下是粗糙的</li></ul></li></ul><h2 id="1-2-凹凸映射">1.2 凹凸映射</h2><ul><li>凹凸映射就是模拟中观尺度的常用方法之一，它能让观察者感知到比几何模型的尺度更小的细节。</li><li>基本思想是将尺度细节相关的信息编码进纹理中，在着色过程中，我们用稍微受到干扰的表面去模拟真实的表面，从而模拟出表面的小尺度的细节。</li><li>从原理上讲，凹凸贴图映射技术是对物体表面贴图进行变化，然后再进行光照计算的一种技术。例如给法线分量增加噪音，或者在一个保持扰动值的纹理图中进行查找（视差映射贴图，或者浮雕贴图）</li><li>这是一种提升物体真实感的有效方法，但却不需要额外的提升物体的几何复杂度（不需要添加额外的顶点）。这种方式在提升物体的表面细节或者表面的不规则性方面有显著效果。</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="2.7-1 左侧没有使用法线贴图，右侧使用法线贴图"></p><h2 id="1-3-凹凸映射的分类">1.3 凹凸映射的分类</h2><ul><li>Bump Mapping的种类主要有：法线映射、视差映射、浮雕映射</li><li>用处广泛，可以用来增加模型细节效果，或者做一些特殊的画面表现效果</li><li>最常用的是法线映射，一般的增加法线贴图后，会对局部的物体表面进行法线扰动，进而改变明暗关系，从而达到增加表面细节的效果。</li><li>上述的三种映射都会用到法线贴图</li></ul><p>![2.7-2](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 1.png)</p><h1>2 Normal Mapping 法线映射</h1><h2 id="2-1-法线贴图">2.1 法线贴图</h2><ul><li>Normal Map 是一张存有物体局部表面法线信息的一张贴图。在计算光照的时候，程序会去读取法线图，并获取到当前像素点的法线信息，结合光线信息进行光照计算。</li><li>使用法线贴图计算光照，可以让物体表现出更加丰富的细节（小范围的明暗变化），并随着光照方向的变换实时变化。</li><li>法线贴图一般由高模映射到对应的底模上来生成。但像金属，木头等这些细节丰富的物体，可借助程序化的软件如：Photo Shop，Substance Designer等生成</li></ul><p>![2.7-3](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 2.png)</p><h2 id="2-2-切线空间">2.2 切线空间</h2><ul><li><p>法线的存储，一般会放到模型的切线空间中。</p></li><li><p>切线空间是以物体表面的<strong>切线，副切线</strong>和<strong>法线</strong>组成的几何空间</p><ul><li><p>切线空间中，坐标原点为顶点位置，顶点法线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>作为z轴，切线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8981em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8981em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">t</span></span><span style="top:-3.1841em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>和纹理坐标系一致，副切线<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>则由顶点法线和切线叉乘得到</p><p>![2.7-4](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 3.png)</p></li></ul></li><li><p>计算光照时，需要把光照运算的向量放到统一坐标系下。读取切线空间法线，需要<strong>世界坐标转切线空间</strong>的转换矩阵 或 <strong>切线空间转世界空间</strong>的转换矩阵，将向量统一到同一坐标系后再进行光照操作。</p></li></ul><h2 id="2-3-世界空间和切线空间的转换-——-TBN矩阵">2.3 世界空间和切线空间的转换 —— TBN矩阵</h2><p>将<strong>世界坐标系</strong>下的顶点法线（Normal）和切线（Tangent）以及副切线（Bitangent）作为切线空间坐标系的正交基。并用这三个向量的标准正交基来构建转换矩阵。对应关系为法线作为Z轴，切线作为X轴，副切线作为Y轴。</p><p>构建一个3*3的矩阵来做空间向量的坐标系转换。一般的叫该矩阵为TBN矩阵。</p><h3 id="切线空间→法线空间">切线空间→法线空间</h3><p>在Unity中，将读取到的切线空间的法线信息右乘TBN矩阵，即可将法线从切线空间转换到世界空间</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3x3 TBN = float3x3(i.tangentDir, i.biTangentDir, i.normalDir)</span><br><span class="line">float3 worldNormal = <span class="built_in">normalize</span>(mul(localNormal, TBN));</span><br></pre></td></tr></table></figure><h3 id="世界空间→切线空间">世界空间→切线空间</h3><p>因为TBN矩阵实际上是一个旋转矩阵，而旋转矩阵是一个正交矩阵，所以TBN矩阵的逆矩阵就是TBN的转置矩阵</p><p>从世界空间转换到法线空间进行相关处理，只需要顶点右乘TBN矩阵的转置矩阵即可</p><p>![2.7-5](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 4.png)</p><p>转换完成后，就可以在相应空间中进行相关着色模型的计算处理</p><h2 id="2-4-引入切线空间的好处">2.4 引入切线空间的好处</h2><p>实际上法线存在哪个空间下都是可以的，但是实际上我们不仅仅要存储法线信息，更重要的是后续的光照计算。选择哪个坐标系意味着我们需要把光照计算用到的不同信息全部转换到对应的坐标系中。但是，使用切线空间存储法线带来的收益高过空间转换的成本。</p><p>优势：</p><ul><li><p>自由度高</p><ul><li><p>同一张法线可以作用于不同的模型</p></li><li><p>如果把法线信息存在模型空间下，得到的则是一个绝对的法线信息，这个法线信息就只是属于一个模型的法线，比如说存到下面球的模型空间下，法线就无法用于右侧的圆环中</p><p>![2.7-6](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 5.png)</p></li></ul></li><li><p>很方便实现UV动画</p><ul><li>法线在切线空间中，只是对现有现有法线的扰动。对贴图采样进行偏移时，就可以改动顶点UV实现不同的凹凸效果，进而实现uv动画。（试想一下，如果是在模型空间下，</li></ul></li><li><p>基于同样的原理，可以重用法线贴图</p><ul><li>一个立方体一面的法线贴图可以同时用在其他五个面上</li></ul></li><li><p>便于压缩</p><ul><li>在切线空间中，法线始终是垂直于表面向外。在归一化的法线向量中，他的值始终是处于0-1之间的，这样的话我们就只用存储副切线和切线，再用sqrt算出法线即可</li><li>而在模型空间中，法线可以为负，在-1到1之间，这样就不能通过只存储两个值来推导出法线的值，必须要储存三个值（否则无法指明法线的方向，因为作为贴图的颜色通道，只能存0-1的值），这样就无法压缩了。</li></ul></li></ul><h2 id="2-5-Unity中的法线贴图的压缩格式">2.5 Unity中的法线贴图的压缩格式</h2><ul><li>在unity中，非移动平台上，Unity会把法线贴图转换成DXRT5nm格式。这种格式只有两个有效通道GA通道，这样可以节省空间<ul><li>GA存储对应法线的y、x分量，z分量需要通过一个简单的运算求得。</li></ul></li><li>而移动平台Unity使用传统的RGB通道</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/c6595f3d-9e9e-4934-98b7-218523669d0f.png" alt="2.7-7 DXR5nm格式"></p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/4c6ff8af-96b4-4a4a-bc41-45df04cb94eb.png" alt="2.7-8 普通存储到RGB通道中"></p><h1>3 Parallax Mapping 视差映射</h1><h2 id="3-1-视差映射的概述">3.1 视差映射的概述</h2><ul><li>视差贴图主要用于赋予物体表面细节遮挡关系，和法线一起使用，能让效果更加逼真</li><li>视差贴图引入一张新的贴图：高度图<ul><li>高度图一般是作为顶点位移时使用的，但是模型需要包含大量的三角形才能获得比较不错的效果，否则看起来会成块状。所以如何在有限的三角面上表示令人信服的效果？这就时视差映射技术</li><li>视差映射技术核心是改变纹理坐标，但如何改变？怎么改变？这时需要一张存储模型信息的高度图，利用模型表面高度信息来对纹理进行偏移</li></ul></li><li>视角越斜，效果越明显</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/e0862766-782c-48e4-9830-409d495fb6af.png" alt="2.7-9 对比右侧三张贴图可以明显看出，右边使用了视差贴图的砖墙看上去比左边单纯使用法线贴图的砖墙看上去多了遮挡的感觉，且视差贴图作用强度越高，遮挡效果越明显"></p><h2 id="3-2-视差映射的原理">3.2 视差映射的原理</h2><ul><li>视差映射主要是要让平面看起来更立体，和法线贴图一样，是欺骗眼睛的做法</li></ul><p>![2.7-10](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 6.png)</p><p>图中蓝色的线0.0为模型表面，正常情况下，我们看到的点A对应的点是黄色的线Ha对应下去的点，当但是如果我们要实现图中灰色部分那样的效果的话，我们实际看到的是B点（红色的线Hb）对应下去的点。</p><p>现在的问题是，已知A点的UV，要怎样让他（近似）采样到B点（获得B点或近似B点的UV值）？</p><ul><li><p>首先明确一点，是在改一个顶点的UV坐标值，所以说是可以知道视角和模型表面（和法线）之间的夹角的。明白这一点之后就方便理解了。</p></li><li><p>我们可以通过模型表面法线和视线方向的夹角的sin乘上这个点的高度值，这样就能获得uv坐标偏移的算术平方和，进而获得uv偏移值。</p><p>![2.7-11](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 7.png)</p></li><li><p>然后用新的uv值去采样A点即可</p></li></ul><p>视差贴图只是一种近似的模拟方法</p><ul><li>由上图可以看出，实际A偏移后获得的uv坐标与B点还是有比较大的差距的</li><li>视差贴图的思想理念在于：深度高的地方更容易被遮挡，偏移的值更大；而对于深度小的点来说，更不容易被遮住，所以偏移的值更小；没有深度的点则不做偏移。</li><li>ps：深度图越浅的地方值越小（看上去越黑），越深的地方值越大（看上去越白）</li></ul><h2 id="3-3-Steep-Parallax-Mapping-陡峭视差映射">3.3 Steep Parallax Mapping 陡峭视差映射</h2><p>陡峭视差映射也是一个近似的解，但相比于普通的视差映射要精确很多，效果上也更好，并且会对uv坐标进行合理性检查。</p><p>陡峭视差映射的基本思想是将深度分为等距的若干层，然后从最顶层进行采样，并且每次沿着视角方向偏移一定值，若当前层的深度大于采样出的深度，则停止检查并返回最后的结果。</p><p>![2.7-12](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 8.png)</p><p>陡峭视差映射解释：</p><p>如上图所示，获得A点视线和法线的夹角，用于计算步进长度。一开始时，采样深度是0.25，视线深度是0.0，则向前步进；直到0.5-0.75区间时，发现当前视线深度对应的点D的采样深度为0.5，是第一个采样深度&lt;视线深度的点，那么就认为当前采样的点就是偏移后的点</p><p>陡峭视差映射缺点：</p><p>问题在于他的分层机制，如果分的层数过多，步进次数会变多，那么性能开销就会比较大；如果分的层数太少，那么就会有明显的锯齿</p><p>优化：可以根据视线v和法线n的角度来做对采样层数的最大值和最小值的阈值的限定</p><h1>4 Relief Mapping 浮雕映射</h1><h2 id="4-1-浮雕映射的概述">4.1 浮雕映射的概述</h2><p>浮雕映射是陡峭视差映射的一个改良版本</p><p>浮雕映射相比于视差映射，能够更精确地计算uv偏移量，更容易提供更多的深度，还可以做自阴影以及闭塞效果</p><p>![2.7-13 下面两张图使用了浮雕映射](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 9.png)</p><h2 id="4-2-浮雕映射的原理">4.2 浮雕映射的原理</h2><p>浮雕映射一般先使用射线步进，再使用二分查找的方法来决定UV偏移量</p><p>为什么不直接使用二分查找呢：</p><p>![2.7-14 虽然步进的步长太长也会带来同样的问题，但相较于直接使用二分查找，能一定程度上减少误差](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 10.png)</p><h2 id="4-3-陡峭视差映射另外的改良版本-——-视差闭塞贴图POM">4.3 陡峭视差映射另外的改良版本 —— 视差闭塞贴图POM</h2><p>——主要为了解决浮雕贴图映射最后二分查找的性能问题（可能需要迭代多次）</p><p>POM相对于浮雕映射贴图，他将二分查找替换成了插值计算，在得到目标区间后，他会对目标区间的两个端点进行采样，通过得到的两个高度值去算数alpha，最终插值得到uv偏移值</p><p>（因为用了插值，所以要求凹凸部分要相对平滑）</p><img src="C:\Users\Qui Han\AppData\Roaming\Typora\typora-user-images\image-20230614114858045.png" alt="2.7-15" style="zoom:80%;" />]]></content>
    
    
    <summary type="html">Bump图改进</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（先行版-基础渲染光照介绍）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-4/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-4/</id>
    <published>2023-06-14T03:18:25.000Z</published>
    <updated>2023-07-01T01:58:15.982Z</updated>
    
    <content type="html"><![CDATA[<h1>[先行版]基础渲染光照介绍</h1><h1>Lambert</h1><p>漫反射：lambert数值为法线和光照的点乘</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 worldLight = <span class="built_in">normalize</span>(_WorldSpaceLightPos0.xyz)</span><br><span class="line">float3 worldNormal = <span class="built_in">normalize</span>(i.worldNormal)</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">float</span> NdotL = <span class="built_in">max</span>(<span class="number">0.0</span>, <span class="built_in">dot</span>(finiNormal, worldLight))</span><br></pre></td></tr></table></figure><h1>Phong</h1><p>环境光+漫反射+高光</p><p>高光：光照颜色<em>高光反射颜色</em>视线方向与反射方向的点乘的gloss次幂</p><p>Gloss用于控制高光反射范围</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 reflectDir = <span class="built_in">normalize</span>(<span class="built_in">reflect</span>(-worldLight, finiNormal));<span class="comment">//计算反射方向</span></span><br><span class="line">float3 viewDir = normalzie(_WorldSpaceCameraPos.xyz - i.worldPOs.xyz);<span class="comment">//计算视角方向（该像素的位置）</span></span><br><span class="line"><span class="type">float</span> VdotR = <span class="built_in">max</span>(<span class="number">0.0</span>, dor(reflectDir, viewDir);</span><br><span class="line">float3 specular = _LightColor0.rgb * _Specular.rgb * <span class="built_in">pow</span>(VdotR, _Gloss);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">float3 color = diffuse + ambient + specular;</span><br></pre></td></tr></table></figure><h1>Blinn-Phong</h1><p>与Phong模型的区别在于计算specular时，使用的是半角向量而非反射向量</p><p>比起Phong模型，计算效率提升至少三分之一以上</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 halfDir = <span class="built_in">normalize</span>(worldLight + viewDir);</span><br><span class="line">float3 NdotH = saturate(<span class="built_in">dot</span>(halfDir, viewDir);</span><br><span class="line"><span class="type">float</span> specular = _LightColor0.rgb * _Specular.rgb * <span class="built_in">pow</span>(NdotH, _Gloss);</span><br></pre></td></tr></table></figure><h1>法线贴图</h1><p>UnpackNormal：空间转换（【0-1】空间→【-1-1】空间）</p><p>Unity内置的法线转换：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">inline fixed3 UnpackNormalDXT5nm(fixed4 packednormal)</span><br><span class="line">&#123;</span><br><span class="line">fixed3 normal;</span><br><span class="line">normal.xy = packednormal.xy * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">normal.z = <span class="built_in">sqrt</span>(<span class="number">1</span> - saturate(<span class="built_in">dot</span>(normal.xy, normal.xy)));</span><br><span class="line"><span class="keyword">return</span> normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline fixd3 UnpackNormal(fixed4 packednormal)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#ifdef UNITY_NO_DXT5nm</span></span><br><span class="line"><span class="keyword">return</span> packednormal.xyz * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line"><span class="meta">#els</span></span><br><span class="line"><span class="keyword">return</span> UnpackNormalDXT5nm(packednormal);</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在世界空间计算光照：计算切线空间→世界空间的变换矩阵，在frag中读取法线贴图然后将切线空间的法线信息转换到世界空间</p><p>法线的空间变换（法线空间→世界空间）：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">struct a2v</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line">float4 tangent : TANGENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct v2f</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">float3 worldNormalDir : TEXCOORD1;</span><br><span class="line">float4 worldTangentDir : TEXCOORD2;</span><br><span class="line">float3 worldbiTangentDir : TEXCOORD3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2f vert(a2v v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//得出世界空间下的法线、切线，并计算出副切线</span></span><br><span class="line">o.worldNormalDir = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">o.worldTangentDir = <span class="built_in">normalize</span>(mul(unity_ObjectToWorld, float4( v.tangent.xyz, <span class="number">0.0</span>)).xyz);</span><br><span class="line">o.worldbiTangentDir = <span class="built_in">normalize</span>(<span class="built_in">cross</span>(o.worldNormalDir, o.worldTangentDir) * v.tangent.w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixed4 frag(v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//得到变换矩阵（世界空间下的切线、副切线、法线）</span></span><br><span class="line">float3x3 tangentTransform = float3x3(i.worldTangentDir, i.worldbiTangentDir, i.worldNormalDir);</span><br><span class="line"><span class="comment">//读取法线贴图并将其转换到世界空间下</span></span><br><span class="line">float3 normalLocal = UnpackNormal(tex2D(_NormalMap, TRANSFORM_TEX(i.uv0, _NormalMap)));</span><br><span class="line">float3 normalWorld = <span class="built_in">normalize</span>(mul(normalLocal.rgb, tangentTransform));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>CUBE Map</h1><p>做反射效果、环境光效果时会用到CUBE Map</p><p>用反射向量来读取CUBE Map</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取反射向量</span></span><br><span class="line">float3 worldRefl = <span class="built_in">normalize</span>(<span class="built_in">reflect</span>(-viewDir, finiNormal));</span><br><span class="line"><span class="comment">//基于反射向量去读取反射效果的CUBE Map</span></span><br><span class="line">float4 refCol = texCUBElod(_Cubemap, float4(worldRefl.rgb, (<span class="number">255</span>-_Gloss)*<span class="number">8</span>/(<span class="number">255</span>)))*_EnvScale;</span><br><span class="line"><span class="comment">//参数解释：</span></span><br><span class="line"><span class="comment">//_Cubemap:存储反射信息的CubeMap</span></span><br><span class="line"><span class="comment">//_Gloss:光泽度</span></span><br><span class="line"><span class="comment">//_EnvScale:环境影响程度，即反射程度</span></span><br><span class="line"><span class="comment">//函数解释：</span></span><br><span class="line"><span class="comment">//texCUBElod如果传入float4，则最后一位是用来表示lod等级的（mipmap level）</span></span><br><span class="line"><span class="comment">//此处mipmap level是通过_Gloss光泽度来计算的，在Unity中如果勾选了贴图的generate1 mipmap，Unity会自动为这张帖图生成8个等级的mipmap</span></span><br><span class="line"><span class="comment">//用_Gloss计算mipmap level：如果一个物体_Gloss越高，说明物体表面越光滑，越能反射环境，mipmap level等级越低</span></span><br></pre></td></tr></table></figure><h1>IBL</h1><p>IBL：image based lighting，基于图像的光照，把一张图当成光源来加入物体的光照计算中</p><p>通常会用到texCUBElod来模拟PBR中粗糙度的表现（同上方CUBE Map中对_Gloss的解释，只不过换成了对光的反射率/显示出的亮度）</p><h1>处理漫反射暗面死黑的trick</h1><p>通过插值计算漫反射（暗部以环境光作为光源，亮部以真是光源作为光源）</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 diffuse = lerp(ambient.rgb*_Diffuse.rgb*MainTex.rgb, _LightColor.rgb*_Diffuse.rgb*MainTex.rgb, NdotL);</span><br></pre></td></tr></table></figure><h1>有金属质感，同时兼具非金属质感的trick</h1><h2 id="高光计算的trick">高光计算的trick</h2><p>模拟PBR效果：通过gloss的值对specular和diffuse进行插值，当Gloss很高（金属质感）时高光颜色与漫反射无关，当Gloss很低时（非金属质感）高光颜色会被漫反射影响</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">float3 specular = _LightColor0.rgb * _SpecularColor.rgb * <span class="built_in">pow</span>(NdotH, _Gloss);</span><br><span class="line">specular = lerp(diffuse * specular, specular, _Gloss/<span class="number">255</span>);</span><br></pre></td></tr></table></figure><h2 id="环境映射的trick">环境映射的trick</h2><p>和高光计算同理</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">reflColor = lerp(diffuse * reflColor, reflColor, _Gloss/<span class="number">255</span>);</span><br></pre></td></tr></table></figure><h3 id="很不标准，不建议用，只是一种强行对PBR的仿制">很不标准，不建议用，只是一种强行对PBR的仿制</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;[先行版]基础渲染光照介绍&lt;/h1&gt;
&lt;h1&gt;Lambert&lt;/h1&gt;
&lt;p&gt;漫反射：lambert数值为法线和光照的点乘&lt;/p&gt;
&lt;figure class=&quot;highlight glsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形2.6-2.7）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-3/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-3/</id>
    <published>2023-06-14T00:48:57.000Z</published>
    <updated>2023-07-01T01:58:03.405Z</updated>
    
    <content type="html"><![CDATA[<h1>Gamma矫正</h1><h2 id="颜色空间">颜色空间</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-78.png" alt="TA100-78" style="zoom:80%;" /><p>sRGB和Rec-709能表达的颜色空间范围是差不多的，他的三原色位置是差不多的。它们之间的区别就在于传递函数不同</p><h2 id="传递函数">传递函数</h2><p>把颜色显示到一个电子设备上时，需要把颜色转换成一个视频信号，这时候就需要一个传递函数</p><p>一个传递函数分为两部分：</p><ul><li>OETF：光转电传递函数，负责把场景线性光转到非线性视频信号值</li><li>EOTF：电转光传递函数，负责把非线性视频信号值转换成显示光亮度</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-79.png" alt="TA100-79" style="zoom:80%;" /><h2 id="Gamma矫正">Gamma矫正</h2><p>Gamma矫正简单来说就是指<strong>对线性三色值和非线性视频信号之间进行编码和解码的过程</strong>，就比如说当相机拍摄到自然中的线性的光信号，传递到电脑中进行存储时，就需要进行一个Gamma的编码操作，获得非线性的视频信号；最后通过显示器显示时，又需要将非线性的视频信号还原回一个线性的光信号，这时就需要进行一个Gamma的解码操作，最后得到我们所见到的样子（线性的光信号）</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-80.png" alt="TA100-80"></p><p>Gamma矫正的实例：简单理解为就是<strong>线性显示、非线性存储</strong>。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-82.png" alt="TA100-82" style="zoom:80%;" /><h2 id="进行Gamma矫正的原因">进行Gamma矫正的原因</h2><p>这其实和人眼的特性有关，<strong>人眼对暗部的变化要更加敏感一点</strong>。如果要存储更多的有效信息，就需要更多的位置去存储暗部值，即在存储暗部时用更高精度的值去存储，而对于亮部则可以用相对精度较低的值去存储。</p><p>所以，非线性转换的目的主要是为了<strong>优化存储空间和带宽</strong>，传递函数能够更好地帮我们利用编码空间。</p><h2 id="韦伯定律">韦伯定律</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-83.png" alt="TA100-83" style="zoom: 67%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-84.png" alt="TA100-84" style="zoom: 80%;" /><p>韦伯定律:即感觉的差别闽限随原来刺激量的变化而变化，而且表现为一定的规律性，用公式来表示，就是ΔΦ/Φ=c，其中Φ为原刺激量，ΔΦ为此时的差别闽限，c为常数，又称为韦柏率。</p><p>简单来说就是，当这次通过一定的刺激爽到了，下次要获得同样的爽度就需要更多的刺激。</p><h2 id="什么是中灰值？（环境对亮度的影响）">什么是中灰值？（环境对亮度的影响）</h2><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-85.png" alt="TA100-85 纯灰色的条看上去左右部分明暗不同"></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-86.png" alt="TA100-86" style="zoom:67%;" /><p>所以说<strong>中灰值并非一个明确的值，而是取决于实际的视觉感受</strong></p><h2 id="小结">小结</h2><ol><li>人眼对暗部变化比亮部更加敏感</li><li>我们目前所使用的真彩格式RGBA32，每个颜色通道只有8位用于记录信息，为了合理使用带宽和存储空间，需要进行非线性转换</li><li>目前我们所普遍使用的sRGB颜色空间标准，他的传递函数gamma值为2.2</li></ol><h1>线性工作流</h1><ul><li>线性工作流就是在生产的各个环节中，正确使用gamma编码和gamma解码，使得最终得到的颜色数据与最初输入的物理数据保持一致</li><li>如果使用Gamma空间的贴图，在传给着色器前需要从Gamma空间转到线性空间，以确保获得正确的计算结果</li></ul><p>如果不在线性空间下进行渲染工作：</p><p>Gamma空间中进行亮度计算时，会容易过曝：因为光线信息在经过Gamma编码后，他的值比实际上的要大</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-87.png" alt="TA100-87 Gamma空间中进行亮度计算容易过曝"></p><p>进行颜色混合时，也会让亮度过高，出现”黑边“</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-88.png" alt="TA100-88 颜色重叠区域出现“黑边”"></p><p>进行光照渲染时，如果把中灰色以0.5作为实际的物理光强进行计算的话，就会出现如下左图的情况；但是实际上中灰色的物理光强度应该是0.18</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-89.png" alt="TA100-89" style="zoom:80%;" /><h1>Unity中的颜色空间</h1><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-90.png" alt="TA100-90" style="zoom:80%;" /><ul><li>当选择Gamma Space时，Unity不会做任何处理</li><li>当选择Linear Space时，引擎的渲染流程在线性空间中计算。理想情况下项目使用线性空间的贴图颜色，不需要勾选sRGB选项；如果勾选了sRGB选项，unity则会通过硬件特性采样时进行线性转换。</li></ul><h2 id="硬件支持">硬件支持</h2><p>线性空间需要图形API的硬件支持，目前支持的平台有：</p><ol><li>Windows，Mac OS x和Linux</li><li>Xbox One</li><li>PS4（新的PS5肯定支持）</li><li>Android</li><li>IOS</li><li>WebGL（新的WebGPU肯定支持）</li></ol><h2 id="硬件特性支持">硬件特性支持</h2><p>主要由两个硬件特性来支持：</p><ul><li>sRGB Frame Buffer<ul><li>将shader的计算结果输出到显示器前进行Gamma矫正</li><li>作为纹理被读取时自动会把存储的颜色从sRGB空间转换到线性空间</li><li>调用ReadPixels()、ReadBackImage()时，会直接返回sRGB空间下的颜色</li><li>sRGB Frame Buffer只支持每通道为8bit的格式，不支持浮点格式</li><li>HDR开启后会先把渲染结果绘制到浮点格式的Frame Buffer中，最后绘制到sRGB Frame Buffer上输出</li></ul></li><li>sRGB Sampler<ul><li>将sRGB的贴图进行线性采样的转换</li></ul></li></ul><p>使用硬件特性完成sRGB贴图的线性采样和shader计算结果的gamma矫正，比起在shader里对贴图采样和计算结果的矫正要快</p><h1>资源导出问题</h1><h2 id="SP贴图导出">SP贴图导出</h2><p>SP贴图导出时，线性的颜色值经过了gamma变换，颜色被提亮了，所以在unity中需要勾选sRGB选项，让他在采样时能还原回线性值</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-91.png" alt="TA100-91"></p><h2 id="PS中相关设置">PS中相关设置</h2><p>如果使用线性空间，一般来说PS可以什么都不改，导出的贴图只要勾上sRGB即可</p><p>如果调整PS的gamma值为1，导出的贴图在unity中也不需要勾选sRGB了</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-92.png" alt="TA100-92"></p><ul><li>PS对颜色管理特别精准，Unity中看到的颜色要经过显示器的gamma变换，而PS不会，PS会读取显示器的Color Profile，反向补偿回去。所以PS里使用的是一个真实的颜色值</li><li>PS有第二个Color Profile（Document Color Profile）。通常它的默认值就是sRGB Color Profile，和显示器的Color Profile一致，颜色是被这个Color Profile压暗了，所以PS中看到的结果才和Unity的一样（通过一个灰度值来控制颜色的显示，并且这个灰度值和显示器的gamma值一致，让我们看着和unity一样）</li></ul><p>Unity在进行半透明混合时，会先将它们转换到一个线性空间下，然后再进行混合。但是PS中，图层和图层之间做混合的时候，每个上层的图层都会读取他们的Color Profile，经过一个Gamma变换，再做混合，得到的结果就会偏暗一些。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-93.png" alt="TA100-93" style="zoom:80%;" /><h1>Unity中的颜色空间转换函数</h1><p>Unity CG.cginc文件中封装的函数</p><p>其中，带有Exact后缀的的函数计算精确，但消耗高；不带有Exact后缀的函数是一种近似解法</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">inline <span class="type">float</span> GammaToLinearSpaceExact (<span class="type">float</span> value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt;= <span class="number">0.04045</span>F)</span><br><span class="line">        <span class="keyword">return</span> value / <span class="number">12.92</span>F;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="number">1.0</span>F)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>((value + <span class="number">0.055</span>F)/<span class="number">1.055</span>F, <span class="number">2.4</span>F);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(value, <span class="number">2.2</span>F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline half3 GammaToLinearSpace (half3 sRGB)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Approximate version from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1</span></span><br><span class="line">    <span class="keyword">return</span> sRGB * (sRGB * (sRGB * <span class="number">0.305306011</span>h + <span class="number">0.682171111</span>h) + <span class="number">0.012522878</span>h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Precise version, useful for debugging.</span></span><br><span class="line">    <span class="comment">//return half3(GammaToLinearSpaceExact(sRGB.r), GammaToLinearSpaceExact(sRGB.g), GammaToLinearSpaceExact(sRGB.b));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline <span class="type">float</span> LinearToGammaSpaceExact (<span class="type">float</span> value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt;= <span class="number">0.0</span>F)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>F;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &lt;= <span class="number">0.0031308</span>F)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">12.92</span>F * value;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="number">1.0</span>F)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.055</span>F * <span class="built_in">pow</span>(value, <span class="number">0.4166667</span>F) - <span class="number">0.055</span>F;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pow</span>(value, <span class="number">0.45454545</span>F);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline half3 LinearToGammaSpace (half3 linRGB)</span><br><span class="line">&#123;</span><br><span class="line">    linRGB = <span class="built_in">max</span>(linRGB, half3(<span class="number">0.</span>h, <span class="number">0.</span>h, <span class="number">0.</span>h));</span><br><span class="line">    <span class="comment">// An almost-perfect approximation from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">1.055</span>h * <span class="built_in">pow</span>(linRGB, <span class="number">0.416666667</span>h) - <span class="number">0.055</span>h, <span class="number">0.</span>h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Exact version, useful for debugging.</span></span><br><span class="line">    <span class="comment">//return half3(LinearToGammaSpaceExact(linRGB.r), LinearToGammaSpaceExact(linRGB.g), LinearToGammaSpaceExact(linRGB.b));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>1 基本概念</h1><ul><li>HDR：High Dynamic Range</li><li>LDR：Low Dynamic Range</li><li>动态范围 = 最高亮度 / 最低亮度</li></ul><p>将场景中高动态范围的光线信息，转换到显示设备上可显示出来的低动态范围的视频信息，这一过程被称为Tone Mapping</p><p>Tips：电脑显示器的最高亮度是由之前经验积累下来的一个，让人眼舒适的，相对统一的亮度。</p><h2 id="1-1-LDR">1.1 LDR</h2><ul><li><p>通常LDR的精度范围是8位（2的8次方）</p></li><li><p>0-1的单通道</p></li><li><p>常用的存储格式为jpg、png、tga</p></li><li><p>拾色器、一般的图片，电脑屏幕都是LDR</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt="TA100-94"></p></li></ul><h2 id="1-2-HDR">1.2 HDR</h2><ul><li>远高于8位的精度</li><li>单通道的最大值可超过1</li><li>常用HDR图片存储格式有hdr、tif、exr、raw</li><li>HDRI、真实世界的光都是HRD</li></ul><h2 id="1-3-相机记录信息的过程">1.3 相机记录信息的过程</h2><ul><li>首先，将曝光值进行计算，将曝光值重新映射回相机能够感应的范围内（受到光圈、快门时间，以及传感器灵敏度等的影响）</li><li>再把值进行输出（线性），存储进数码相机的格式内</li><li>之后会经过一个线性变换（白平衡、色彩矫正、色调验色以及伽马矫正等这一系列过程），最终会得到一张LUT图</li><li>不同相机厂商LUT图的格式是不同的</li></ul><h1>2 为什么需要HDR</h1><p>LDR是对现实颜色进行压缩并且呈现出来，具有一定局限性，在进行后期效果调整和后续加工会因为颜色精度不够而难以进行</p><p>HDR有着更好的色彩，更高的动态范围和更丰富的细节，并且能够有效地防止画面过曝，亮度值超过1的颜色也能很好的表现出来。使得像素光亮度变得正常，视觉传达更加真实。</p><p>![TA100-95](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 1.png)</p><p>只有HDR才有超过1的数值，才会有Bloom的效果——高质量的Bloom才能更好体现画面的渲染品质</p><p>![TA100-96](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 2.png)</p><h1>3 在Unity中设置HDR</h1><h2 id="3-1-Camera的HDR">3.1 Camera的HDR</h2><p>![TA100-97](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 3.png)</p><p>Unity Camera基本参数中有HDR，如果开启的话，Unity会将场景渲染到HDR图像缓冲区，下一步进行后处理，在Tone mapping过程中会把HDR转换成LDR，再将LDR图像（R8G8B8）发送给显示器</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.jpeg" alt="TA100-98"></p><h2 id="3-2-Lightmap的HDR">3.2 Lightmap的HDR</h2><p>![TA100-99](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 4.png)</p><p>将Lightmap编码质量设置为High Quality，将会为Lightmap开启HDR光照贴图的支持</p><h2 id="3-3-拾色器的HDR">3.3 拾色器的HDR</h2><ul><li>使用Intensity滑动条可以调整颜色的强度</li><li>滑动条每增加1，提供的光亮增加一倍</li></ul><p>![TA100-100](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 5.png)</p><h2 id="3-4-优缺点">3.4 优缺点</h2><p>优点：</p><ul><li>画面中亮度超过1的部分不会被截为1，增加亮部的细节并减少曝光</li><li>减少画面较暗部分的色阶感（用更大的精度去存储暗部）</li><li>更好的支持Bloom效果</li></ul><p>缺点：</p><ul><li>渲染流程中多了Tone mapping这一步，渲染速度慢</li><li>占据更多显存</li><li>不支持硬件抗锯齿</li><li>低端手机不支持HDR</li></ul><h1>4 Bloom</h1><p>渲染出原图后，提取原图中较亮的部分，对提取出来的图片进行高斯模糊，然后再叠加到原图上</p><p>![TA100-101](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 6.png)</p><p>Unity中的Bloom流程：</p><p>![TA100-102](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 7.png)</p><h1>5 HDR与Tone Mapping</h1><h2 id="5-1-ToneMapping的概念">5.1 ToneMapping的概念</h2><ul><li><p>色调映射</p></li><li><p>将HDR转化为LDR</p></li><li><p>如果是线性映射的话效果极差</p><p>![TA100-103](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 8.png)</p></li><li><p>所以一般使用曲线，把亮度区域和阴影区域向中等亮度方向压缩→S曲线</p></li></ul><h2 id="5-2-ToneMapping映射曲线">5.2 ToneMapping映射曲线</h2><p>![TA100-104 左图HDR，右图LDR（有点过曝的感觉）](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 9.png)</p><p>HDR的Tone Mapping映射曲线会<strong>把暗部压得更低一些，亮部也往回缩一点，让整体效果看起来更加真实</strong></p><h3 id="ACES映射曲线">ACES映射曲线</h3><ul><li>Academy Color Encoding System学院颜色编码系统</li><li>最流行、最被广泛使用的Tonemapping映射曲线</li><li>效果：对比度提高，很好地保留暗处和亮处的细节</li></ul><p>![TA100-105](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 10.png)</p><h3 id="其他类型的映射曲线">其他类型的映射曲线</h3><p>![TA100-106](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 11.png)</p><h1>6 LUT</h1><p>Look-Up Table，简单来说就是滤镜</p><p>与Tonemapping不同的是，LUT是对LDR图进行处理，而Tonemapping则是处理HDR图</p><p>可以调整RGB三个通达的LUT被称为3D LUT，格式有下图所示的那几种</p><p>![TA100-107](<a href="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled">http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled</a> 12.png)</p><p>Tips：可以在PS中调整LUT，导出的LUT作为滤镜去调整画面（相当于整个画面的滤镜）</p><p>LUT的效果比较：</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-108.png" alt="TA100-108 出处： UE4 画质增强Lut使用方法_ue4 lut_Deveuper的博客-CSDN博客"></p>]]></content>
    
    
    <summary type="html">gamma矫正、LDR与HDR</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形2.1-2.4）</title>
    <link href="https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-2/"/>
    <id>https://himoqiuhan.github.io/2023/06/14/Notes-TA100T-2/</id>
    <published>2023-06-14T00:48:56.000Z</published>
    <updated>2023-07-01T06:58:54.171Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为前两章基础概念较多，所以放在一起整理了</p></blockquote><h1>颜色空间</h1><h2 id="色彩发送器">色彩发送器</h2><p>色彩认知：光源是出生点，光源发射出光线，光线通过直射反射折射等路径最终进入人眼。但人眼接收到光线后，人眼的细胞产生了一系列化学反应。由此把产生的信号传入大脑，最终大脑对颜色产生了认知感知。</p><h3 id="光的要素">光的要素</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-28.png" alt="TA100-28" style="zoom: 80%;" /><h3 id="光源">光源</h3><p>光源就是产生的物体</p><h3 id="波长">波长</h3><p>光理论上讲是无限大的，只是我们人眼可见光是有局限的。</p><p>如果没有光，我们就无法在黑暗中看到色彩，光的本质就是一种<strong>物理现象</strong>，光在没有进入我们的眼睛前，我们对它的认知是一种<strong>波长与能量分布</strong>。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-29.png" alt="TA100-29"  /><h3 id="能量分布">能量分布</h3><p>我们讲光线是一种波，那么既然是真实存在的就会有能量，能量单位就是功率，我们认知的光就会有不同的功率。比如一个光是由多个波长组合起来的波形</p><p>那么也就是说我们阐述色彩就用这个波长就可以了，但是这么做实在是太反人类了，我们无法保证能简单描述色彩。于是人们发明了一个叫做<strong>分光光度计</strong>的东西。</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-30.png" alt="TA100-30"></p><h3 id="分光光度计">分光光度计</h3><p>分光光度计就是用于描述光线的具体能量强度，记得小时候用棱镜分光吗。我们通过分光之后对区间波长进行了感应与测量，最后得知了光谱的分布最终得知光线额能量集中在了550nm附近（图中绿色地方）</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-31.png" alt="TA100-31"></p><h3 id="光的传播">光的传播</h3><ul><li><p>直射光：光源直射眼睛</p></li><li><p>折射光： 光源穿过物体进入眼睛</p></li><li><p>反射光：光源经过物体表面反射进入眼睛</p></li><li><p>光线追踪：光线弹来弹去，然后我们根据权重确定光线最后进入眼睛中的颜色</p></li></ul><p>下图就是光通过反射之后，在能量上发生的变化，可以明显看到，少了一部分的能量，这是因为一部分的能量被物体吸收了，也就是说每次光经过反射或投射都会或多或少对光的能量分布产生一些影响</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-32.png" alt="TA100-32"></p><h2 id="光源的接收者">光源的接收者</h2><h3 id="相对亮度感知">相对亮度感知</h3><p>在某些阴暗的环境下，点亮一盏灯，这时人眼就会觉得非常亮。如果同时点亮1000盏灯，反而觉得只是10倍的亮度，对亮度的认知相当于从0~1再从1~10.</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-33.png" alt="TA100-33"></p><h3 id="人眼HDR">人眼HDR</h3><p>人眼既可以分辨出高亮度的云彩的不同层次区别，还可以分辨出阴影中物不同物体的异同。</p><p>但是人眼的能力并<strong>不能保证这两个功能同时生效</strong>。</p><p>这样一说，反而就能发现人眼真是个变化莫测的存在，它可能会随着不同的环境，感知到不同的色彩，体验到不同的明暗效果，甚至可能会随着盯着某一个点时间流逝而变化颜色。</p><h3 id="人眼感光细胞分布">人眼感光细胞分布</h3><ul><li>杆状细胞：感知亮度</li><li>锥状细胞：感知色彩</li></ul><p>感光细胞（杆状细胞）对亮度特别的敏感，只要有5~14个光子打到杆状细胞就会产生神经信号，这也可以解释为什么闪光弹能让人致盲，一部分原因就是因为光实在太亮，直接干涉了人眼最敏感的感光细胞</p><h3 id="锥状细胞">锥状细胞</h3><p>这种细胞专门用于感知颜色，但是他们还被区分为了L细胞，M细胞，S细胞。</p><p>这三种细胞负责感知的波长不一，如下图所示，L感知红色区间，M感知绿色区间，S感知蓝色区间</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-34.png" alt="TA100-34" style="zoom:80%;" /><h3 id="人眼的本质">人眼的本质</h3><p>人眼的本质是光源的接收者。他的作用就是接收外部光线输入，输出神经电信号进入大脑。</p><h3 id="完整积分公式">完整积分公式</h3><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-35.png" alt="TA100-35"></p><h2 id="色彩空间历史">色彩空间历史</h2><h3 id="19世纪的猜想">19世纪的猜想</h3><ol><li>人们有100多种感受颜色的细胞</li><li>人们有三种，分别是RGB三种感色细胞</li><li>人们有三种，分别是黑白，红绿，黄蓝感色细胞（是不是很眼熟）</li></ol><p>现在这么多年过去了，其中的2和3这两种猜想都成为了我们当下的色彩视觉模型，也称之色彩模型</p><h3 id="1905Munsell色彩系统">1905Munsell色彩系统</h3><p>美国艺术家 Albert Henry Munsell利用自己的艺术特长，最早提出了一个色彩系统，后来在1930年被优化改良。</p><p>Munsell通过很多色卡来描述色彩，下面旋转角度的是色相，Munsell垂直的是亮度，从圆心到外部是Munsell饱和度。 人们凭借自我主观意识认知与区分色彩就是HSL(色相、饱和亮度)，这套系统没有过多的物理科学在其中，更多的是一种艺术家的理解与归纳总结规范…</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-36.png" alt="TA100-36" style="zoom:80%;" /><h3 id="1931-CIE-1931-RGB-Color-Specification-System">1931 CIE 1931 RGB Color Specification System</h3><p>科学家们觉得上述的色彩系统还可以，但是不够科学，于是为了以一种科学的方式阐述色彩，于是一个叫CIE的机构在1931年建立了一套色彩系统， 希望完全客观完全物理的量化色彩。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-37.png" alt="TA100-37" style="zoom:80%;" /><p>CIE把所有可视波长的光线作为测试光挨个测试了一个遍，最终的到了三条曲线我们发现435.8~546.1 nm这段波长中的红色基色强度是负数。这虽然物理正确，但是一点也没有科学的美感，于是我们进行了归一化，保证色彩在-1~1之间。最终通过计算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>g</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">rgb</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">b</span></span></span></span>的基色的强度在当前混色强度的所占比例这样计算后，$ r’g’b’$都是在-1~1之间</p><p>那么如果我们发现<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>r</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>g</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>b</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">r&#x27;+g&#x27;+b&#x27;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，就可以通过其中两个已知数计算出另一个的强度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-38.png" alt="TA100-38" style="zoom:80%;" /><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-39.png" alt="TA100-39"></p><h3 id="XYZ-Color-Specification-System">XYZ Color Specification System</h3><p>上文的CIE1931RGB色彩系统已经不错了，但是存在负数，这在计算上非常的麻烦，比如写个乘法，得先计算是正数还是负数。</p><p>于是人们就用数学的方式做了一个新的色彩空间。所以XYZ色彩空间就是一个<strong>中转站</strong>，主要目的就是<strong>简化计算</strong>。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-40.png" alt="TA100-40"  /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-41.png" alt="TA100-41" style="zoom:80%;" /><ul><li>如何转换：</li></ul><p>因为是空间转换所以我们用**矩阵(进行空间变换)**的方式进行</p><p>注：这里的RGB是CIE 1931RGB 不是sRGB中的RGB数值。</p><p>这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">xyz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.04398em;">yz</span></span></span></span>矩阵也不太美，于是人们为了计算方便有把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow><annotation encoding="application/x-tex">xyz</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.04398em;">yz</span></span></span></span>矩阵进行了<strong>归一化</strong></p><ul><li>最终效果：色域马蹄图</li></ul><p>也就是人眼可见范围表示， 但是我们发现图像上面好像没有亮度于是我们就在归一化的基础上，把XYZ中的Y单独拿出来与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>一起组成了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Y_{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>色彩空间 其中的Y表示亮度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>表示色度。</p><p>注：这里提一下 这里是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Y_{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>色彩空间 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mrow><mi>x</mi><mi>y</mi></mrow></msub></mrow><annotation encoding="application/x-tex">Y_{xy}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>是由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mi>Y</mi><mi>Z</mi></mrow><annotation encoding="application/x-tex">XYZ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span>色彩空间衍生出来的</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-42.png" alt="TA100-42" style="zoom:80%;" /><ul><li><p>不足与补充</p><p>上述的XYZ色彩空间也不错，但是也有问题，就是<strong>色彩的分布不均匀</strong>，他们的分布色彩一些地方紧一些地方又很松，举个例子这个图的偏向绿色部分就非常平滑，然后左下角部分坐标变化小，但是色彩变化就很快。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-44.png" alt="TA100-44" style="zoom:80%;" /></li></ul><h2 id="色彩空间的定义">色彩空间的定义</h2><p>至少需要满足三项重要指标：</p><ol><li>色域（三个基色的坐标，由此形成三角形）</li><li>Gamma（如何对三角形内进行切分）</li><li>白点（色域三角形中心）</li></ol><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614092133606.png" alt="TA100-45"></p><h3 id="Gamma">Gamma</h3><p>Gamma并不是色彩空间，它只是如何对色彩进行<strong>采样的一种方式</strong></p><p>每次对比顶点切割，就会发现切割的方式不同会导致每次对应的色彩不一样，大家通常理解的gamma=1的情况就是指代<strong>均匀的切分</strong>（下左图），这样的好处就是方便计算。而非均匀切割的方式就是gamma≠1</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614092220077.png" alt="TA100-46"  /><p>比如我们有个常用的空间 sRGB，那么<strong>sRGB的构成</strong>：</p><p>1.色域： sRGB首先设定了RGB三个基色的坐标</p><p>2.白点： sRGB也规定了<strong>白点位置</strong></p><p>3.gamma： sRGB的gamma设定为≈2.2（上右图）也就是说从外而向内切，<strong>先切的很细，然后逐渐变粗</strong></p><p>大家知道线性的好处(也就是gamma=1的时候)，方便计算，计算机效率高，方便理解，但是计算机储存（不需要花费很多空间去存储亮的区域）与显示器硬件因为早期的性能问题，采用的基本大部分都是gamma≈2.2的情况，但是我们目前大部分的机器都已经不是远古版本了，所以PC上的大部分游戏都会推荐使用<strong>线性空间</strong></p><p>我们可以自定义色彩空间，换一个色域，换一个白点位置，换一个gamma值其实就是一个新的色彩空间了，所以也可以存在sRGB D65 linear这类空间，所以任何色彩空间都可以是linear线性的（改gamma值就可以去确定），但linear本身并不是一个色彩空间，它只是一个gamma值</p><h2 id="常用色彩模型与色彩空间">常用色彩模型与色彩空间</h2><p>色彩模型：使用一定规则描述（排列）颜色的方法</p><p>色彩空间：需要至少满足三个指标：色域、白点、gamma</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-47.png" alt="TA100-47"></p><h2 id="补充">补充</h2><h3 id="色彩空间下的各种色域">色彩空间下的各种色域</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-48.png" alt="TA100-48" style="zoom:80%;" /><h3 id="P3色域相较于sRGB的提升">P3色域相较于sRGB的提升</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-49.png" alt="sRGB视频的色彩被映射到了更低的部分，而P3完整显示了色彩" style="zoom:80%;" /><p>系统能正确映射sRGB色彩的原因在于系统有正确的色彩配置文件，选用不同的色彩配置文件会造成显示的色彩差异<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>美术师需要用校色仪来获取正确的色彩配置文件</p><h3 id="为什么需要Gamma矫正">为什么需要Gamma矫正</h3><p>常见Gamma值为2.2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span>测试得到的<strong>符合大部分人的灰阶感知的Gamma值</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614092920518.png" alt="TA100-50" style="zoom:80%;" /><h3 id="HDR">HDR</h3><p>高动态范围</p><p>HDR显示器的峰值亮度通常在1000nit以上，同时保持非常高的对比度，远高于SDR显示器的亮度和对比度</p><p>HDR内容：观看HDR视频内容需要HDR显示器</p><h3 id="色彩空间转换">色彩空间转换</h3><p>一个广色域HDR的视频（Display P3）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614093015670.png" alt="TA100-51"  /><h3 id="作业">作业</h3><ol><li><p>色彩空间的定义：</p><p>满足色域、白点、Gamma三个指标的对色彩的组织方式</p></li><li><p>人眼可见光范围是什么：</p><p>波长在400纳米~700纳米之间的电磁波</p></li></ol><h1>模型与材质</h1><h2 id="渲染管线与模型基础">渲染管线与模型基础</h2><h3 id="图形渲染管线">图形渲染管线</h3><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-52.png" alt="TA100-52"></p><h3 id="模型的实现原理">模型的实现原理</h3><p>点连成线→线围成面→组成多边形→一个模型空间下的模型形成</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614093439928.png" alt="TA100-53" style="zoom:80%;" /><h3 id="UV">UV</h3><p>UV平铺在一个二维坐标系中，模型的每个顶点在三维空间和二维空间中都能一一对应，在二维坐标系中的顶点对应的位置就是顶点的纹理坐标，因此每个顶点都能利用纹理坐标获取到贴图所存储的信息</p><p>在建模软件中进行UV展开，UV会放在一个横轴为U，纵轴为V，范围为（0~1）的二维坐标系中</p><h3 id="一个模型包含的信息（以obj文件为例）">一个模型包含的信息（以obj文件为例）</h3><ul><li>V：顶点坐标数据（模型空间中单个顶点的XYZ坐标）</li><li>VT：贴图坐标（水平方向是U，垂直方向是V，范围在0~1之间）</li><li>VN：顶点法线→会决定面的朝向</li><li>顶点色：单个顶点的RGBA通道颜色信息</li></ul><p><strong>obj格式与fbx格式的区别</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-53.png" alt="TA100-53" style="zoom: 80%;" /><h3 id="材质">材质</h3><p>在现实世界里，每个物体会对光产生不同的反应：有些物体反射光的时候不会有太多的散射(Scatter)，因而产生一个较小的高光点而有些物体则会散射很多，产生一个有着更大半径的高光点</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-54.png" alt="TA100-54" style="zoom: 50%;" /><h3 id="漫反射">漫反射</h3><p>漫反射是最容易模拟的模型。</p><p>最简单的<strong>Lambertian</strong>很简单粗暴的认为光线<strong>均匀地反射出去</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mi>i</mi><mi>f</mi><mi>f</mi><mi>u</mi><mi>s</mi><mi>e</mi><mo>=</mo><mi>B</mi><mi>a</mi><mi>s</mi><mi>e</mi><mi>C</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mo>∗</mo><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>C</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mo>∗</mo><mi>d</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo separator="true">,</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Diffuse = BaseColor * LightColor * dot(LightDir, NormalDir)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">ff</span><span class="mord mathnormal">u</span><span class="mord mathnormal">se</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord mathnormal">a</span><span class="mord mathnormal">se</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.07153em;">tC</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">L</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">ma</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-55.png" alt="TA100-55" style="zoom: 50%;" /><h3 id="镜面反射">镜面反射</h3><p>镜面反射就是将入射光线根据表面法线进行反射，并且<strong>只有在反射方向有能量，其他方向能量均为0</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>p</mi><mi>e</mi><mi>c</mi><mi>u</mi><mi>l</mi><mi>a</mi><mi>r</mi><mo>=</mo><mi>L</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mi>C</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mo>∗</mo><mi>p</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>d</mi><mi>o</mi><mi>t</mi><mo stretchy="false">(</mo><mi>R</mi><mi>e</mi><mi>f</mi><mi>l</mi><mi>e</mi><mi>c</mi><mi>t</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo separator="true">,</mo><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Specular = LightColor * pow(dot(ReflectDir, ViewDir), x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal" style="margin-right:0.07153em;">tC</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">Vi</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-56.png" alt="TA100-56" style="zoom:50%;" /><h3 id="折射">折射</h3><p>对于玻璃这种电介质，除了反射之外还有根据物体的折射率折射一部分光线进入物体之中反射和折射能量的多少是根据菲尼尔定律决定</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>e</mi><mi>f</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo>=</mo><mi>r</mi><mi>e</mi><mi>f</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>V</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo separator="true">,</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo separator="true">,</mo><mi>r</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ReflDir = refract(ViewDir, NormalDir, ration)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">Vi</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">ma</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">i</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mi>e</mi><mi>f</mi><mi>l</mi><mi>C</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>r</mi><mo>=</mo><mi>t</mi><mi>e</mi><mi>x</mi><mi>C</mi><mi>U</mi><mi>B</mi><mi>E</mi><mo stretchy="false">(</mo><mi>s</mi><mi>k</mi><mi>y</mi><mi>b</mi><mi>o</mi><mi>x</mi><mo separator="true">,</mo><mi>R</mi><mi>e</mi><mi>f</mi><mi>l</mi><mi>D</mi><mi>i</mi><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ReflColor =  texCUBE(skybox, ReflDir)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.07153em;">lC</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord mathnormal" style="margin-right:0.05764em;">BE</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-57.png" alt="TA100-57" style="zoom:50%;" /><h3 id="粗糙镜面反射">粗糙镜面反射</h3><p>法线偏移较小。反射依然集中在一个区域。形成有磨砂质感的金属表面。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-58.png" alt="TA100-58" style="zoom:50%;" /><h3 id="粗糙镜面折射">粗糙镜面折射</h3><p>毛玻璃效果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-59.png" alt="TA100-59" style="zoom:50%;" /><h3 id="多层材质">多层材质</h3><p>涂了油漆的地板</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-60.png" alt="TA100-60" style="zoom: 45%;" /><h3 id="SSS次表面散射">SSS次表面散射</h3><p>多发生在半透明的物体上，如玉石、牛奶、皮肤、蜡烛</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-61.png" alt="TA100-61 光进入皮肤后照亮了毛细血管，因此在明暗交界处更容易看到反射出的红光" style="zoom:45%;" /><h3 id="多层皮肤模型">多层皮肤模型</h3><p>我们把皮肤看成三层：油脂层（微量、很薄），表皮层，真皮层</p><ul><li>正是因为有油脂层，油脂层直接把光反射出去，所以皮肤上才会有高光产生</li><li>没有被反射的光通过折射进入子表面层，光进入这些层之后被部分吸收（获得颜色）和散射</li><li>再从皮肤中入射点附近的出射点射出</li><li>这个过程就产生了次表面散射的效果</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-62.png" alt="TA100-62"></p><h3 id="改变材质表面">改变材质表面</h3><p>现实世界中不存在完美平滑的表面，因此需要对模型表面的法线进行扰动。</p><p>其中一个方法是使用法线贴图。</p><p>漫反射，高光，折射，都与法线有关，因此改变法线，就能改变其光照计算结果</p><h2 id="模型数据解析">模型数据解析</h2><h3 id="模型数据在渲染中的作用">模型数据在渲染中的作用</h3><ol><li><p>顶点动画：在顶点着色器中，修改模型的顶点位置，进而达到模型运动的效果</p><ul><li><p>顶点动画就是在顶点着色器中对纹理的顶点进行进行操作进而产生动画效果</p></li><li><p>顶点动画改变的是一个顶点的位置，需要一定数量的顶点才能得到比较好的效果</p></li><li><p>一个顶点传入一个顶点着色器，顶点着色器控制顶点时，每个顶点都会执行同样的算法</p></li></ul></li><li><p>纹理动画：在片段着色器中，修改模型的UV信息，使得采样贴图时，发生位移而产生运动效果</p></li><li><p>顶点色</p><ul><li>通过重心坐标插值计算三角形内部的颜色</li></ul></li></ol><h3 id="顶点法线与面法线">顶点法线与面法线</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230614095731628.png" alt="TA100-63" style="zoom: 80%;" /><p>差异的原理：</p><ul><li><p>（面法线）未使用平滑时，三角形三个顶点<strong>共用</strong>一个法线。 那么插值时，因为三个顶点的法线相同，所以插值的结果<strong>相同</strong>。</p></li><li><p>（顶点法线）使用平滑后，<strong>一个顶点一个法线</strong>。三角形三个顶点的法线也就<strong>不相同</strong>。插值结果，也就会不同。</p></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-64.png" alt="TA100-64" style="zoom: 67%;" /><p>在NPR渲染中。通常在顶点着色器中，将顶点往法线方向偏移。然后再片段着色器中直接输出一个颜色，达到描边的效果。<strong>BackFacing描边</strong>时，线条之间断开就是因为没有使用顶点法线（没有进行平滑着色）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-65.png" alt="TA100-65" style="zoom:50%;" /><h1>HLSL常用函数</h1><p>官方文档：</p><p><a href="https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions">https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions</a></p><p>一个实用的函数可视化网站：</p><p><a href="https://graphtoy.com/">https://graphtoy.com/</a></p><h2 id="基本数学运算">基本数学运算</h2><ul><li><p>max(x,y)</p><ul><li>返回x和y两者中较大的那个数</li></ul></li><li><p>min(x,y)</p><ul><li>返回x和y两者中较小的那个数</li></ul></li><li><p>mul(x,y)</p><ul><li>两变量相乘，常用于矩阵运算<ul><li>如果x是向量，则被视为行向量；如果y是向量，则被视为列向量</li></ul></li></ul></li><li><p>abs(x)</p><ul><li>取绝对值</li></ul></li><li><p>round(x)</p><ul><li><p>返回与x最近的整数</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-66.png" alt="TA100-66"></p></li></ul></li><li><p>sqrt(x)</p><ul><li>返回x的平方根</li></ul></li><li><p>rsqrt(x)</p><ul><li>返回x的平方根的倒数</li></ul></li><li><p>degrees(x)</p><ul><li>将弧度转换成角度</li></ul></li><li><p>radians(x)</p><ul><li>将角度转换成弧度</li></ul></li><li><p>noise(x)</p><ul><li>根据传入的浮点型向量，返回基于一个Perlin-noise算法的范围在-1~1之间的噪波值</li></ul></li></ul><h2 id="幂指对函数">幂指对函数</h2><ul><li>pow(x,y)<ul><li>返回x的y次幂（x和y均可为常量或变量）</li></ul></li><li>exp(x)<ul><li>返回以e为底，x为指数的幂，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">e^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></li></ul></li><li>exp2(value x)<ul><li>返回以2为底，x为指数的幂，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>x</mi></msup></mrow><annotation encoding="application/x-tex">2^x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></li></ul></li><li>ldexp(x,exp)<ul><li>返回x与2的exp次方的乘积，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>∗</mo><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow></msup></mrow><annotation encoding="application/x-tex">x*2^{exp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span></span></span></span></li></ul></li><li>log(x)<ul><li>返回指定值的以e为底的对数，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">lnx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">n</span><span class="mord mathnormal">x</span></span></span></span>lo</li></ul></li><li>log10(x)<ul><li>求以10为底的对数，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>10</mn></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">log_{10}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span></span></span></span></li></ul></li><li>log2(x)<ul><li>求以2为底的对数，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>x</mi></mrow><annotation encoding="application/x-tex">log_{2}x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span></span></span></span></li></ul></li><li>frexp(x,out exp)<ul><li>把浮点数x分解成尾数和指数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>r</mi><mi>e</mi><mi>t</mi><mo>∗</mo><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi></mrow></msup></mrow><annotation encoding="application/x-tex">x=ret*2^{exp}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span></span></span></span></li><li>函数返回值为尾数，exp为指数（原始浮点数的二进制指数）</li><li>如果x参数为0，则此函数的尾数和指数均返回0</li></ul></li></ul><h2 id="三角函数与双曲函数">三角函数与双曲函数</h2><ul><li>asin(x)<ul><li>返回输入值的反正弦值</li></ul></li><li>acos(x)<ul><li>返回输入值的反余弦值</li></ul></li><li>atan(x)<ul><li>返回输入值的反正切值</li></ul></li><li><strong><em>*</em>*******atan2(y,x)*********</strong>*<ul><li>返回y/x的反正切值</li></ul></li><li><strong>sin(x)、cos(x)、tan(x)、tan(y/x)</strong></li><li>sincos(x,out s,out c)<ul><li>返回x的正弦值和余弦值</li></ul></li><li>sinh(x)<ul><li>返回x的双曲正弦值，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(e^x-e^{-x})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></li></ul></li><li>cosh(x)<ul><li>返回x的双曲余弦值，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(e^x+e^{-x})/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">/2</span></span></span></span></li></ul></li><li>tanh(x)<ul><li>返回x的双曲正切值，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mi mathvariant="normal">/</mi><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(e^x-e^{-x}/e^x+e^{-x})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0213em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li></ul></li></ul><h2 id="数据范围类">数据范围类</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-67.png" alt="TA100-67" style="zoom: 80%;" /><h2 id="类型判断类">类型判断类</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-68.png" alt="TA100-68"  /><h2 id="向量与矩阵类">向量与矩阵类</h2><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-69.png" alt="TA100-69"></p><h2 id="光线运算类">光线运算类</h2><ul><li>reflect(i ,n)<ul><li>以i为入射向量，n为法线方向的反射光</li></ul></li><li>refract(i, n, ri)<ul><li>以i为入射向量，n为法线方向，ri为折射率的折射光</li></ul></li><li>lit(<em>n_dot_l</em>, <em>n_dot_h</em>, <em>m</em>)<ul><li>返回光照系数向量**(ambient, diffuse, specular, 1)，其中：**<ul><li>ambient = 1</li><li>diffuse = n · l &lt; 0 ? 0 : n · l</li><li>specular = n · h &lt; 0 ? 0 : pow( n · l, m)</li></ul></li></ul></li><li>faceforward(<em>n</em>, <em>i</em>, <em>ng</em>)<ul><li>在特定条件下翻转表面法线，表面面向i所指方向，返回面向i所指方向的面的法线方向（得到面向视图的曲面法向量）</li><li>return -n*sign(dot(i, ng))</li></ul></li></ul><h2 id="纹理查找">纹理查找</h2><h3 id="1D纹理查找（几乎不用）">1D纹理查找（几乎不用）</h3><ul><li>GPU在PS阶段是在屏幕空间XY坐标系中对每一个像素去对应的纹理中查找对应的纹素来确定像素的颜色</li><li>tex1D(s, t) 普通一维纹理查找 返回纹理采样器s在标量t位置的color4</li><li>tex1D(s,t,ddx,ddy) 使用微分查询一维纹理 t和ddxy均为vectortex1Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4</li><li>tex1Dbias(s, t) 将t.w决定的某个MIP层偏置后的一维纹理查找</li><li>tex1Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的一维纹理查找</li><li>tex1Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="2D纹理查找">2D纹理查找</h3><ul><li>tex2D(s, t) 普通二维纹理查找 返回纹理采样器s在vector t位置的颜色</li><li>tex2D(s,t,ddx,ddy) 使用微分查询二维纹理 t和ddxy均为vector（只有小于ddxy的值才会采样）</li><li>tex2Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4tex2Dbias(s, t) 将t.w决定的某个MIP层偏置后的二维纹理查找</li><li>tex2Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的二维纹理查找</li><li>tex2Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="3D纹理查找">3D纹理查找</h3><ul><li>tex3D(s, t) 普通三维纹理查找 返回纹理采样器s在vector t位置的颜色</li><li>tex3D(s,t,ddx,ddy) 使用微分查询三维纹理 t和ddxy均为vector</li><li>tex3Dlod(s, t) 使用LOD查找纹理s在t.w位置的color4</li><li>tex3Dbias(s, t) 将t.w决定的某个MIP层偏置后的三维纹理查找tex3Dgrad(s,t,ddx,ddy) 使用微分并指定MIP层的三维纹理查找</li><li>tex3Dproj(s, t) 把纹理当做一张幻灯片投影到场景中，先使用投影纹理技术需要计算出投影纹理坐标t(坐标t.w除以透视值)，然后使用投影纹理坐标进行查询</li></ul><h3 id="立体纹理查找">立体纹理查找</h3><ul><li>texCUBE(s,t) 返回纹理采样器s在vector t位置的颜色</li><li>texCUBE(s,t,ddx,ddy)使用微分查询立方体维纹理 t和ddxy均为vector</li><li>texCUBEDload(s,t) 使用LOD查找纹理s在t.w位置的color4</li><li>texCUBEbias(s,t) 将t.w决定的某个MIP层偏置后的立方体纹理查找</li><li>texCUBEgrad(s,t,ddx,ddy) 使用微分并指定MIP层的立方体纹理查找</li><li>texCUBEproj(s,t) 使用投影方式的立方体纹理查找</li></ul><h1>传统经验光照模型</h1><h2 id="光照模型">光照模型</h2><h3 id="是什么">是什么</h3><p>illumination model，是一种模拟自然界光照的物理过程的一种计算机模型，即光线与空间中物体表面的交互模型，大致分为两类：</p><ol><li>基于物理的模型</li><li>经验模型</li></ol><h3 id="为什么">为什么</h3><p>现实世界光照复杂，使用简化的光照模型对现实世界的光照情况进行模拟</p><h3 id="光照模型发展历程">光照模型发展历程</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-70.png" alt="TA100-70" style="zoom:80%;" /><h2 id="局部光照模型">局部光照模型</h2><h3 id="定义">定义</h3><p>只考虑直接光照，不考虑物体间反射的间接光</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-71.png" alt="TA100-71" style="zoom:80%;" /><h3 id="漫反射-2">漫反射</h3><p>光线均匀被反射到各个方向</p><p>漫反射过程中，光线发生了吸收和散射，因此改变颜色和方向</p><p>使用Lambert余弦定理计算：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-72.png" alt="TA100-72" style="zoom: 67%;" /><ul><li><strong>漫反射只与光源和表面法线有关</strong></li></ul><h3 id="高光反射">高光反射</h3><p>描述了光线与物体表面发生的反射（光强不变，方向改变）</p><p>反射率根据菲涅尔效应决定</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-73.png" alt="TA100-73" style="zoom: 67%;" /><ul><li><p><strong>Gloss影响了高光反射的范围，但高光的亮度是不变的</strong></p></li><li><p><strong>高光反射与观察方向有关</strong></p></li></ul><h3 id="环境光">环境光</h3><p>引入环境光弥补间接光照</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-74.png" alt="TA100-74" style="zoom:67%;" /><h3 id="自发光">自发光</h3><p>物体自身发出的光</p><h2 id="经典光照模型">经典光照模型</h2><h3 id="Lambert光照模型">Lambert光照模型</h3><p>只计算漫反射，没有高光效果</p><h3 id="Phong模型">Phong模型</h3><p>Phong = Ambient + Diffuse + Specular</p><p>使用环境光来模拟间接光照</p><p>加上了高光反射（使用反射光线方向和视线方向进行计算）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-75.png" alt="TA100-75" style="zoom: 50%;" /><h3 id="Blinn-Phong模型">Blinn-Phong模型</h3><p>在计算高光反射时，用的是半角向量和法线向量</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-76.png" alt="TA100-76" style="zoom: 80%;" /><h3 id="Phong和Blinn-Phone模型的区别">Phong和Blinn-Phone模型的区别</h3><p>Blinn-Phong模型使用半角向量：</p><ol><li><p>计算更简洁（计算半角向量比计算反射向量更简洁）</p></li><li><p>半角向量与法线的角度永远不会大于90度（但是反射光线与视线方向的角度会大于90度，导致点乘计算的值钳制在0，出现明显的边缘效果）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-77.png" alt="TA100-77" style="zoom:80%;" /></li></ol><h3 id="Flat模型">Flat模型</h3><p>使用面法线，每个面都是同一个颜色</p>]]></content>
    
    
    <summary type="html">颜色空间、模型与材质、HLSL常用函数、传统经验光照模型</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>技术美术百人计划学习笔记（图形1.1-1.4）</title>
    <link href="https://himoqiuhan.github.io/2023/06/13/Notes-TA100T-1/"/>
    <id>https://himoqiuhan.github.io/2023/06/13/Notes-TA100T-1/</id>
    <published>2023-06-12T16:00:00.000Z</published>
    <updated>2023-07-01T07:22:54.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因为前两章基础概念较多，所以放在一起整理了</p></blockquote><h1>渲染流水线</h1><p>如图：</p><p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Render%20pipeline.png" alt="Render pipeline"></p><h1>数学基础</h1><h2 id="向量运算">向量运算</h2><h3 id="认识向量">认识向量</h3><h4 id="向量的定义">向量的定义</h4><ul><li>向量是有大小和方向的有向线段，没有位置只有大小和方向</li><li>向量的箭头是向量的结束，尾是向量的开始</li><li>向量描述的位移能够被认为是与轴平行的位移序列</li></ul><h4 id="向量与标量">向量与标量</h4><ul><li>向量：有大小、有方向</li><li>标量：有大小，没方向</li></ul><h4 id="向量与点">向量与点</h4><ul><li>向量与点数学形式上相同，但几何意义完全不同</li><li>点：有位置，没有实际的大小和方向</li><li>向量：无位置，有实际的大小和方向</li><li>联系：任何一个点可以看作是从原点出发的向量</li></ul><h4 id="零向量">零向量</h4><ul><li>零向量是唯一大小为零的向量</li><li>零向量是唯一一个没有方向的向量</li><li>零向量不是一个点</li><li>零向量表示的是没有位移，如同零标量表示没有数量一样</li></ul><h3 id="向量的计算">向量的计算</h3><h4 id="向量与标量-2">向量与标量</h4><ul><li>没有加法与减法</li><li>乘法：将每个分量都与标量相乘</li><li>除法：等同于乘以标量的倒数</li><li>乘除的几何意义：以标量的大小缩放向量的长度，负值则方向相反（将向量缩放至k个标量单位）</li></ul><h4 id="向量的模长">向量的模长</h4><p>表示向量的长度，为向量x和y的算术平方根</p><h4 id="标准化向量">标准化向量</h4><p>用于只需要知道方向，不关心大小的向量。例如：法线</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>V</mi><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi></mrow></msub><mo>=</mo><mfrac><mi>V</mi><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">V_{norm} = \frac{V}{||V||}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2963em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h4 id="向量与向量的加减法">向量与向量的加减法</h4><p>三角形法则、四边形法则</p><h4 id="计算两点间距离">计算两点间距离</h4><p>向量相减计算得到位移向量，位移向量的模长即为两点之间的距离</p><h4 id="向量的点积运算">向量的点积运算</h4><ul><li>向量点乘就是分量乘积的和，结果是一个标量并满足交换律</li></ul><h5 id="点积的几何意义">点积的几何意义</h5><p>点乘的结果描述了两个向量的相似程度，点乘值越大，夹角角度越小，两个向量越接近</p><h5 id="向量投影">向量投影</h5><p>向量a在向量b上的投影为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mo>∗</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow><annotation encoding="application/x-tex">a * sin{\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></span></p><h5 id="点积的应用：Lambert光照模型">点积的应用：Lambert光照模型</h5><p>最简单通用的模拟漫反射的光照模型</p><h4 id="向量的叉积">向量的叉积</h4><p>几何意义：判断一个点是否在三角形内</p><h3 id="作业">作业</h3><p>向量各方面的几何意义：</p><ol><li>向量(a,b)：表示从坐标系原点指向点(a,b)的向量</li><li>向量(a,b)乘标量：表示向量的放大缩小，标量为负则向量方向取反</li><li>向量点乘：①用于计算投影；②单位向量点乘用于表示两条向量之间夹角的大小；③向量点乘自己后取平方根获得向量模长</li><li>向量叉乘：①用于判断点是否在三角形内部；②根据两条不平行的向量，叉乘计算出与两条向量共同所在平面垂直的向量，例如Billboarding效果</li></ol><h2 id="矩阵运算">矩阵运算</h2><h3 id="矩阵变换的几何意义：得到点在新的坐标系下的位置">矩阵变换的几何意义：得到点在新的坐标系下的位置</h3><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-1.png" alt=""></p><h3 id="特殊的矩阵">特殊的矩阵</h3><ul><li>方阵</li><li>单位矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></li><li>零矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></li></ul><h3 id="矩阵的计算">矩阵的计算</h3><h4 id="矩阵的加减法">矩阵的加减法</h4><p><strong>几何意义</strong>：对单位向量的变换，新得到的单位向量就是将两个矩阵相加分别得到的列向量</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-2.png" alt="TA100-2"></p><h4 id="矩阵的数乘">矩阵的数乘</h4><p><strong>几何意义</strong>：对空间的缩放</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-3.png" alt="TA100-3"></p><h4 id="矩阵相乘">矩阵相乘</h4><p><strong>几何意义</strong>：可以用点积来方便记忆</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-4.png" alt="TA100-4"></p><p><strong>几何意义</strong>：</p><ol><li><p>矩阵乘矩阵，计算得到矩阵</p><p>进行矩阵变换，更改单位向量（转换到新的坐标系）</p></li><li><p>矩阵乘列向量，计算得到向量或坐标</p></li></ol><p><strong>注意</strong>：矩阵相乘不满足交换律，按照变换顺序，矩阵<strong>从右往左</strong>进行计算。但是满足结合律，进行复合变换可以先将所有矩阵相乘，再去乘向量</p><h3 id="矩阵的仿射变换">矩阵的仿射变换</h3><p>在Unity、Houdini的矩阵存储不同于图形学案例，他们采用的是列优先存储，所以矩阵的平移变换可能在最后一行，而非最后一列，（需要转置）</p><p>详细的各个放射变化见Games101的笔记</p><h2 id="MVP矩阵">MVP矩阵</h2><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-5.png" alt="TA100-5"></p><h3 id="Model矩阵">Model矩阵</h3><p><strong>模型空间→世界空间</strong></p><ul><li>模型空间：以自身为中心的空间坐标系</li><li>世界空间：以世界为中心的空间坐标系</li></ul><p>缩放→旋转→平移依次进行矩阵变换</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-6.png" alt="TA100-6"></p><h3 id="View矩阵">View矩阵</h3><p><strong>世界空间→视觉空间</strong></p><ul><li>视觉空间：以摄像机为原点的空间坐标系</li></ul><p>先求V矩阵的逆矩阵（视觉空间→世界空间），再对他进行逆变换得到V矩阵</p><h3 id="Perspective矩阵">Perspective矩阵</h3><ol><li>不是真正的投影，只是为投影做准备</li><li>目的：判断顶点是否在可见范围内</li><li>P矩阵：对x,y,z分量进行缩放，用w分量做范围值。如果x,y,z都在w范围内，那该点在裁剪空间内。</li></ol><h3 id="作业-2">作业</h3><p>模型空间世界空间视野空间的区别在于空间坐标系的原点不同，模型空间的空间坐标系原点是物体在创建时所确定的中心，世界空间的空间坐标系原点是世界中心，视野空间的空间坐标系原点是摄像机。</p><p>P矩阵推导见Games101笔记</p><h1>纹理基础</h1><h2 id="纹理是什么">纹理是什么</h2><p>一张图片 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟶</mo></mrow><annotation encoding="application/x-tex">\longrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟶</span></span></span></span> 一种可供着色器读写的结构化存储形式</p><p>一张<strong>纹理对象</strong>除了保存一些<strong>图片信息</strong>外，还会储存一些<strong>纹理采样的设置</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-7.png" alt="TA100-7" style="zoom: 50%;" /><h2 id="纹理管线">纹理管线</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-8.png" alt="TA100-8" style="zoom:50%;" /><ul><li>投影函数：获取我们要渲染的位置，将它从模型空间投影到纹理空间中，转化为UV坐标（投影指的是纹理投影，不同于摄像机投影，常规情况下投影函数通常会在“展UV”的阶段中使用，将投影的结果存储在顶点数据中。所以通常我们是直接使用存储在模型顶点数据中的投影的结果）</li><li>通讯函数：将UV坐标进行一个灵活的扩展，实现平移缩放旋转或者是控制图像的应用方式等等，得到一个新的纹理坐标，用这个纹理坐标就可以去获取纹理的值了（纹理采样）</li><li>着色器中的纹理通常会以Sampler Variable（采样器变量）的形式存在，即我们经常看见的sampler，这是一种Uniform类型的变量，在处理不同片元时这个变量是不变的。</li><li>依赖纹理读取：当我们使用tex2D或类似方式去访问纹理时，只要fragment shader不是直接用vertex shader传过来的数据，而是需要计算的数据，那么他就会产生一个叫做依赖纹理读取的东西，哪怕这个处理只是简单的交换UV的两个坐标。<strong>只要不是顶点着色器传过来的纹理采样数据，在片元着色器需要计算纹理偏移，哪怕是只进行了一些计算，也会影响性能的表现。</strong></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-9.png" alt="TA100-9" style="zoom: 60%;" /><ul><li><p>后续获取一个具体纹素的颜色值就要看<strong>纹理采样的设置</strong>来决定了（采样设置包含在一个纹理对象中）</p><ul><li><p>纹理采样设置之Wrap Mode</p><p>决定UV值在[0,1]之外的表现</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-10.png" alt="TA100-10" style="zoom: 50%;" /></li><li><p>纹理采样设置之Filter Mode</p><ul><li>纹理放大：</li></ul><p>描述不同形状大小角度缩放比的情况下我们应该如何应用纹理让他的采样更加合理（纹理过滤可在硬件中完成，也可在软件中完成，也可在软件和硬件中共同完成）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-11.png" alt="TA100-11" style="zoom: 50%;" /><p><strong>Nearest Neighbor</strong>：获取最邻近点（采样一次），获得像素化的表现，消耗很省</p><p><strong>Bilinear Interpolation</strong>：双线性插值（采样四次）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-13.png" alt="TA100-13" style="zoom:45%;" /><p><strong>Cubic Convolution</strong>：立方卷积插值（采样16次）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-14.png" alt="TA100-14" style="zoom:45%;" /><p><strong>光滑曲线插值</strong>：在2x2纹理组之间进行插值（采样四次）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-15.png" alt="TA100-15" style="zoom:45%;" /><p>与双线性插值很相似，区别在于在将UV坐标带入读取纹理前多加了一步对UV坐标的处理</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-16.png" style="zoom: 50%;" /><p><strong>效果对比</strong>：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-17.png" alt="TA100-17" style="zoom:45%;" /><ul><li>纹理缩小</li></ul><p>常见方法是最邻近与双线性插值：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-18.png" alt="TA100-18" style="zoom:50%;" /><p><strong>Mipmap</strong>：预处理纹理并创建数据结构，有助于实时工作时快速计算一组纹素对一个像素的近似值，且内存比原本多了1/3</p><p>如何正确<strong>选择Mipmap level</strong>：使用四个像素单元格所形成的一个四边形的最长边来近似这个像素覆盖的范围（显卡执行pixel是将其都分成2x2的一组，然后分块并行执行的→用于计算ddx和ddy，四个一组的pixel块是共享偏导值的）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-19.png" style="zoom: 45%;" /><p><strong>Bilinear Interpolation</strong>：三线性插值，在两个Mipmap之间再进行一次插值</p><p>但是Mipmap催在overblur的问题，只能用于各向同性贴图</p><p><strong>Ripmap</strong>：各向异性过滤Anisotropic Filtering的一种方法，但是还是存在overblur；还有<strong>EWA过滤</strong>，用椭圆的方式存储纹素，效果好但是开销大</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-20.png" style="zoom:45%;" /></li></ul></li></ul><h2 id="纹理优化">纹理优化</h2><h3 id="CPU渲染优化常见方式——纹理图集-数组">CPU渲染优化常见方式——纹理图集/数组</h3><p>减少Draw Call，避免渲染时频繁改变纹理带来的消耗</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-21.png" style="zoom:50%;" /><h3 id="GPU渲染常见方式——纹理压缩">GPU渲染常见方式——纹理压缩</h3><p>从<strong>带宽</strong>入手，显存带宽指GPU独显的专用内存的速度，如果游戏速度受限于显存带宽的话，往往是我们所使用的纹理实在太大，GPU它没有办法快速处理</p><ul><li><p>减少了资源在CPU中进行解压缩的过程</p></li><li><p>减小了包体大小，减少了数据量级，减轻了带宽计算的压力</p></li><li><p>内存的使用效率更高</p></li></ul><h3 id=""></h3><h2 id="纹理应用">纹理应用</h2><h3 id="立方体贴图CubeMap">立方体贴图CubeMap</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-22.png" style="zoom:50%;" /><h3 id="凹凸贴图Bump-Mapping">凹凸贴图Bump Mapping</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-23.png" alt="TA100-23" style="zoom:50%;" /><h3 id="位移贴图Displacement-Mapping">位移贴图Displacement Mapping</h3><p>凹凸贴图是模拟，而位移贴图是真的把<strong>顶点做了位置的移动</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-24.png" alt="TA100-24" style="zoom: 80%;" /><h2 id="作业-3">作业</h2><p>Filter Mode有几种？</p><ol><li>Nearest Neighbor最邻近（采样一次）</li><li>Bilinea Interpola双线性插值（采样4次）</li><li>Cubic Convolution立方卷积插值（采样16次）</li><li>Lanczos Interpolation兰索斯插值（采样64次）</li><li>Qu´ılez光滑曲线插值（采样4次）</li></ol><p>纹理贴图的优化方式及原理？</p><ol><li>使用Texture atlas纹理图集或纹理数组，减少Draw Call次数，减少切换渲染状态的次数来进行CPU方向的优化</li><li>对纹理进行压缩，减轻显存带宽计算的压力</li></ol><h1>主流平台API介绍</h1><h2 id="API的定义">API的定义</h2><p>是一个图形库，用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API），针对GPU</p><h2 id="基础概念">基础概念</h2><p>应用端：我们自己的程序端，相对于OpenGL ES，我们属于应用端</p><p>图元：要渲染的几何物体，或者形状</p><p>纹理：通俗点可以理解为一张图片</p><p>纹素：纹理的基础单元，不同于像素（不是一个维度的东西）</p><p>顶点数组：顶点指的是组成图元的各个顶点的属性，这些属性可以一起存到一个内存数组中</p><p>顶点缓冲区：在显存中专门分配一块显存来存储这个顶点数组，这个显存就被称为顶点缓冲区</p><p>顶点着色器、片元着色器：跑在GPU上的程序片段</p><h2 id="主流图形API">主流图形API</h2><p>手机：ios和Android都支持OpenGL ES</p><p>电脑：Windows支持DX和OpenGL，Linux/Mac(Unix)支持OpenGL</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-25.png" alt=""></p><h2 id="OpenGL-ES">OpenGL ES</h2><p><strong>相同点：</strong></p><p>相比于 OpenGL ES 1.x 系列的固定功能管线，OpenGL ES 2.0 和 OpenGL ES 3.0 都是可编程图形管线。开发者可以自己编写图形管线中的 顶点着色器 和 片段着色器 两个阶段的代码。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-26.png" style="zoom: 45%;" /><p><strong>不同点：</strong></p><ol><li><p>兼容性：向后兼容</p></li><li><p>新特性：3.0引入采用阴影贴图、体渲染、基于GPU的粒子动画、几何形状实例化、纹理压缩和伽马矫正等新技术</p></li><li><p>渲染管线：3.0移除了Alpha Test和逻辑操作LogicOp两部分</p></li><li><p>着色器脚本编写</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/TA100-27.png" style="zoom: 45%;" /></li></ol><h2 id="5-OpenGL-ES3-0新功能">5 OpenGL ES3.0新功能</h2><p>详细见<a href="https://docs.qq.com/slide/DUHl3U2pOZ3lKTmNK?u=a2c3b90d79354f16b6413e563a612ffc">百人计划1400图形api</a></p>]]></content>
    
    
    <summary type="html">渲染流水线、数学基础、纹理基础、主流平台API介绍</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="百人计划" scheme="https://himoqiuhan.github.io/tags/%E7%99%BE%E4%BA%BA%E8%AE%A1%E5%88%92/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://himoqiuhan.github.io/2023/05/30/hello-world/"/>
    <id>https://himoqiuhan.github.io/2023/05/30/hello-world/</id>
    <published>2023-05-29T16:00:00.000Z</published>
    <updated>2023-06-09T07:50:50.952Z</updated>
    
    <content type="html"><![CDATA[<h1>Hello Butterfly</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="comment">#标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="comment">#创建日期</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#标签</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">tag1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">tag2</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#种类</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&#x27;#关键词&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#封面处的描述</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="comment">#文章顶部图片</span></span><br><span class="line"><span class="attr">cover:</span> <span class="comment">#封面图片</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="number">1</span> <span class="comment">#置顶轮播图顺序，非负整数，数字越大越靠前 （目前暂时还没有开）</span></span><br><span class="line"><span class="attr">katex:</span> <span class="literal">true</span> <span class="comment">#此页是否使用katex渲染数学公式</span></span><br></pre></td></tr></table></figure><h1>主页双行显示</h1><p>博客的config文件（不是主题的）中的buterfly_article_double_row</p><h1>代码自动换行</h1><p>主题配置文件中的code_word_wrap</p><h1>副标题打字效果</h1><p>主题配置文件中的subtitle</p><h1>折叠框使用</h1><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab active"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
    <summary type="html">Front Matter范式及一些备注</summary>
    
    
    
    
    <category term="Butterfly" scheme="https://himoqiuhan.github.io/tags/Butterfly/"/>
    
  </entry>
  
  <entry>
    <title>CPP软光栅渲染器</title>
    <link href="https://himoqiuhan.github.io/2023/04/29/Projects-CPPSoftRasterizerRenderer/"/>
    <id>https://himoqiuhan.github.io/2023/04/29/Projects-CPPSoftRasterizerRenderer/</id>
    <published>2023-04-29T00:54:04.000Z</published>
    <updated>2023-06-03T05:10:49.306Z</updated>
    
    <content type="html"><![CDATA[<h1>介绍</h1><p>学习完<a href="https://games-cn.org/intro-graphics/">Games101</a>一段时间后，发现自己对一些基础知识掌握得不够牢固，就从零手搓了一个软光栅渲染器。</p><p>目标是过一遍光栅化渲染管线，所以不考虑算法优化，以及例如图片解码读取这些细分内容。</p><p>用glfw实现窗口创建和像素点绘制，基础的数学库和TGA图片读取类改写自<a href="https://github.com/ssloy/tinyrenderer">TinyRenderer</a>教程提供的数学库，其余实现流程全是自己手搓的。</p><blockquote><p>项目地址：<a href="https://github.com/himoqiuhan/QiuHRenderer">https://github.com/himoqiuhan/QiuHRenderer</a></p></blockquote><p>部分效果图：</p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/SoftRenderer_TextureMapping.png" style="zoom:33%;" /><figcaption>贴图读取与映射</figcaption><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/SoftRenderer_bat.png" style="zoom:50%;" /><figcaption>“伪后处理”描边效果</figcaption><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/SoftRenderer_Normal.png" style="zoom: 33%;" /><figcaption>平滑法线</figcaption><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/SoftRenderer_Depth.png" style="zoom: 50%;" /><figcaption>深度图渲染</figcaption><h1>渲染器整体架构</h1><ul><li>传入模型、读取光照信息</li><li>-–for(每个面)<ul><li>定义v2f结构体数组vertexout[3]</li><li>–for(3个顶点)<ul><li>GetVertexData获取当前顶点appdate_base顶点信息(顶点位置、顶点UV、顶点法线)</li><li>VertexShader给v2f赋值(裁剪空间坐标、世界空间坐标、世界空间法线、顶点UV)</li></ul></li><li>透视除法-&gt;齐次裁剪空间：简单粗暴的放弃这个面片 continue!(因为写渲染器的目标在于捋清楚渲染流水线，所以不做深挖)</li><li>屏幕映射-&gt;屏幕空间：三角形设置(基于三角形GetAABB获取BoudingBox)</li><li>–for(BoundingBox)三角形遍历<ul><li>IsInTriangle叉乘判断片元是否在三角形内</li><li>-if(在三角形内部)<ul><li>GetBarycentric获取屏幕上的重心坐标</li><li>插值计算出该片元在candidate cube 中的z值-&gt;获取candidate cube 中的坐标</li><li>齐次裁剪空间的坐标转换到相机空间中</li><li>利用透视除法系数，反推出裁剪空间中的深度值fragDepth</li><li>判断fragDepth与zbuffer内的深度值<ul><li>if(fragDepth.abs &lt; zbuffer[])<ul><li>写入当前深度值</li><li>FragmentShader输出片元颜色color4</li><li>DrawPixel</li></ul></li><li>else<ul><li>不进行任何处理</li></ul></li></ul></li></ul></li><li>-else<ul><li>continue</li></ul></li></ul></li></ul></li></ul><h1>细节分析</h1><h2 id="类、结构体的设计">类、结构体的设计</h2><h3 id="Rasterizer类">Rasterizer类</h3><p>实际的每一帧的渲染是在Rasterizer类中实现的，其中包含渲染前对模型变换、摄像机的设置，以及对渲染流程的执行</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rasterizer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Transform transform;</span><br><span class="line">Camera camera;</span><br><span class="line">Screen screen;</span><br><span class="line"></span><br><span class="line">Matrix Matrix_M;</span><br><span class="line">Matrix Matrix_V;</span><br><span class="line">Matrix Matrix_P;</span><br><span class="line">Matrix Matrix_MVP;</span><br><span class="line"></span><br><span class="line">Vec3f worldLightDir;</span><br><span class="line"></span><br><span class="line">TGAImage* diffuseTex;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">float</span>&gt; ZBuffer;</span><br><span class="line">std::vector&lt;color4&gt; FrameBuffer;</span><br><span class="line">std::vector&lt;<span class="type">float</span>&gt; LuminanceBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DEBUG</span></span><br><span class="line"><span class="type">int</span> fragCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Rasterizer</span>(<span class="type">const</span> Screen&amp; screen);<span class="comment">//构造对象，指定摄像机</span></span><br><span class="line">~<span class="built_in">Rasterizer</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetTransform</span><span class="params">(Vec3f transition, Vec3f rotation, Vec3f scale)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetPerspective</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetOrthogonal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetCamera</span><span class="params">(Vec3f _position, Vec3f _lookAt, Vec3f _lookUp, <span class="type">float</span> _FOV, <span class="type">float</span> _aspect, <span class="type">float</span> _near, <span class="type">float</span> _far)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetCamera</span><span class="params">(Vec3f _position, Vec3f _lookAt, Vec3f _lookUp)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetCamera</span><span class="params">(Vec3f _position)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExeRenderPipeline</span><span class="params">(Model* model, TGAImage* diffuse, Vec3f light_dir)</span></span>;<span class="comment">//执行渲染管线，其中包含模型的读取、顶点着色器、图片的读取和片元着色器，并且最终渲染到RenderTarget上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Used In RenderPipeline</span></span><br><span class="line"><span class="function">appdata_base <span class="title">GetVertexData</span><span class="params">(Model* model, Vec3i faceIndex)</span></span>;</span><br><span class="line"><span class="function">v2f <span class="title">VertexShader</span><span class="params">(appdata_base v)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canClip</span><span class="params">(Vec3f* homogeneousPos)</span></span>;</span><br><span class="line"><span class="function">Vec3f <span class="title">ScreenMapping</span><span class="params">(Vec3f screen_coord)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsInTriangle</span><span class="params">(Vec2i frag, Vec3f* triangleVertex)</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetFragHomogeneousDepth</span><span class="params">(<span class="type">float</span>* triangleVertexDepths, Vec3f barycoord)</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">GetFragW</span><span class="params">(<span class="type">float</span>* triangleVertexW, Vec3f barycoord)</span></span>;</span><br><span class="line"><span class="function">color4 <span class="title">FragmentShader</span><span class="params">(v2f* i, <span class="type">float</span> fragW, Vec3f barycoord)</span></span>;</span><br><span class="line"><span class="comment">//Used In Vertex Shader</span></span><br><span class="line"><span class="function">Vec3f <span class="title">ObjectToWorldNormal</span><span class="params">(Vec3f normal)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Vec3f <span class="title">GetFragNormalByVertNormal</span><span class="params">(Vec3f* triangleVertexNormals, Vec3f barycoord)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DrawFrag</span><span class="params">(Vec2f pos, color4 color)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="基础信息结构体">基础信息结构体</h3><h4 id="屏幕-窗口信息">屏幕/窗口信息</h4><p>用于存储所创建窗口的长、宽信息</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Screen</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> width = <span class="number">640</span>;</span><br><span class="line"><span class="type">int</span> height = <span class="number">480</span>;</span><br><span class="line"><span class="built_in">Screen</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">Screen</span>(<span class="type">int</span> w, <span class="type">int</span> h) :<span class="built_in">width</span>(w), <span class="built_in">height</span>(h) &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="变换信息">变换信息</h4><p>用于存放物体在世界空间下的变换（平移、旋转和缩放），其中由于后续在矩阵设置过程中进行了角度值到弧度值的转换，所以这里的旋转所用的是角度值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Transform</span></span><br><span class="line">&#123;</span><br><span class="line">Vec3f transition = <span class="built_in">Vec3f</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Vec3f rotate = <span class="built_in">Vec3f</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Vec3f scale = <span class="built_in">Vec3f</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetTransform</span><span class="params">(Vec3f _transition, Vec3f _rotation, Vec3f _scale)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">transition = _transition;</span><br><span class="line">rotate = _rotation;</span><br><span class="line">scale = _scale;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="相机信息">相机信息</h4><p>有关信息见如下注释</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Camera</span></span><br><span class="line">&#123;</span><br><span class="line">Vec3f position = <span class="built_in">Vec3f</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//世界空间位置</span></span><br><span class="line">Vec3f g = <span class="built_in">Vec3f</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>); <span class="comment">//摄像机看向方向</span></span><br><span class="line">Vec3f t = <span class="built_in">Vec3f</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//摄像机向上方向</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> FOV = <span class="number">60</span>; <span class="comment">//Field of view</span></span><br><span class="line"><span class="type">float</span> aspect = <span class="number">16</span> / (<span class="type">float</span>)<span class="number">9</span>; <span class="comment">//宽高比</span></span><br><span class="line"><span class="type">float</span> near = <span class="number">0.1f</span>; <span class="comment">//近裁剪面距离</span></span><br><span class="line"><span class="type">float</span> far = <span class="number">100.f</span>;<span class="comment">//远裁剪面距离</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="颜色信息">颜色信息</h4><p>用于对颜色的RGBA值进行存储，加入一些简单的相加、相乘和增加对比度的功能</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">color4</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> r;</span><br><span class="line"><span class="type">float</span> g;</span><br><span class="line"><span class="type">float</span> b;</span><br><span class="line"><span class="type">float</span> a;</span><br><span class="line"><span class="built_in">color4</span>() : <span class="built_in">r</span>(<span class="number">1</span>), <span class="built_in">g</span>(<span class="number">1</span>), <span class="built_in">b</span>(<span class="number">1</span>), <span class="built_in">a</span>(<span class="number">1</span>) &#123;&#125;;</span><br><span class="line"><span class="built_in">color4</span>(<span class="type">float</span> R, <span class="type">float</span> G, <span class="type">float</span> B, <span class="type">float</span> A) : <span class="built_in">r</span>(R), <span class="built_in">g</span>(G), <span class="built_in">b</span>(B), <span class="built_in">a</span>(A) &#123;&#125;</span><br><span class="line">color4 <span class="keyword">operator</span>*(<span class="type">float</span> num) &#123; <span class="keyword">return</span> <span class="built_in">color4</span>(r * num, g * num, b * num, a * num); &#125;</span><br><span class="line">color4 <span class="keyword">operator</span>*(color4 other) &#123; <span class="keyword">return</span> <span class="built_in">color4</span>(r * other.r, g * other.g, b * other.b, a * other.a); &#125;</span><br><span class="line">color4 <span class="keyword">operator</span>+(color4 other) &#123; <span class="keyword">return</span> <span class="built_in">color4</span>(r + other.r, g + other.g, b + other.b, a + other.a); &#125;</span><br><span class="line"><span class="function">color4 <span class="title">AddContrast</span><span class="params">(<span class="type">float</span> power)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">color4</span>(std::<span class="built_in">pow</span>(r, power), std::<span class="built_in">pow</span>(g, power), std::<span class="built_in">pow</span>(b, power), <span class="number">1.f</span>); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="信息传递结构体">信息传递结构体</h3><h4 id="appdate-base">appdate_base</h4><p>用于将模型信息传输给顶点着色器</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">appdata_base</span></span><br><span class="line">&#123;</span><br><span class="line">Vec3f vertex;<span class="comment">//顶点数据</span></span><br><span class="line">Vec3f normal;<span class="comment">//顶点法线</span></span><br><span class="line">Vec2f texcoord;<span class="comment">//顶点UV坐标</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="v2f">v2f</h4><p>用于将顶点着色器传出的数据发送给片元着色器</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">v2f</span></span><br><span class="line">&#123;</span><br><span class="line">Vec4f clipPos;<span class="comment">//裁剪空间坐标</span></span><br><span class="line">Vec3f worldPos;<span class="comment">//世界空间坐标</span></span><br><span class="line">Vec3f worldNromal;<span class="comment">//世界空间顶点法线</span></span><br><span class="line">Vec2f uv;<span class="comment">//顶点UV坐标</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="矩阵变换">矩阵变换</h2><p>矩阵相关的内容在/scr/Support/Math中的Matrx.cpp中，只做了更常用的透视投影，没有做正交投影的矩阵变换</p><h3 id="Model-Matrix">Model Matrix</h3><p>将顶点数据从Model Space变换到World Space，处理顶点数据的平移、旋转和缩放</p><p>此处使用的变换顺序是旋转-缩放-平移，其中旋转传入的是角度值的数值，在内部进行了角度值到弧度制的转换</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">GetModelMatrix</span><span class="params">(<span class="type">const</span> Transform&amp; transform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Vec3f <span class="title">rotateRadian</span><span class="params">(transform.rotate.x * <span class="number">3.14f</span> / <span class="number">180</span>, transform.rotate.y * <span class="number">3.14f</span> / <span class="number">180</span>, transform.rotate.z * <span class="number">3.14f</span> / <span class="number">180</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">GetTransition</span>(transform.transition) * <span class="built_in">GetScale</span>(transform.scale) * <span class="built_in">GetRotation</span>(rotateRadian);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="View-Matrix">View Matrix</h3><p>将顶点数据从World Space变换到View Space中，处理摄像机的变换，获得顶点数据在View Space下的坐标信息，确定View Space时使用的是右手系</p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/e53ee5c1448108e2d5992e9c6e38126.jpg" style="zoom: 50%;" /><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">GetViewMatrix</span><span class="params">(<span class="type">const</span> Camera&amp; camera)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Matrix t = mat&lt;<span class="number">4</span>, <span class="number">4</span>, <span class="type">float</span>&gt;::<span class="built_in">identity</span>();</span><br><span class="line">t[<span class="number">0</span>][<span class="number">3</span>] = -camera.position.x;</span><br><span class="line">t[<span class="number">1</span>][<span class="number">3</span>] = -camera.position.y;</span><br><span class="line">t[<span class="number">2</span>][<span class="number">3</span>] = -camera.position.z;</span><br><span class="line"></span><br><span class="line">Vec3f gxt = <span class="built_in">cross</span>(camera.g, camera.t);</span><br><span class="line"></span><br><span class="line">Matrix r;</span><br><span class="line">r[<span class="number">0</span>][<span class="number">0</span>] = gxt.x;       r[<span class="number">0</span>][<span class="number">1</span>] = gxt.y;       r[<span class="number">0</span>][<span class="number">2</span>] = gxt.z;</span><br><span class="line">r[<span class="number">1</span>][<span class="number">0</span>] = camera.t.x;  r[<span class="number">1</span>][<span class="number">1</span>] = camera.t.y;  r[<span class="number">1</span>][<span class="number">2</span>] = camera.t.z;</span><br><span class="line">r[<span class="number">2</span>][<span class="number">0</span>] = -camera.g.x; r[<span class="number">2</span>][<span class="number">1</span>] = -camera.g.y; r[<span class="number">2</span>][<span class="number">2</span>] = -camera.g.z;</span><br><span class="line">r[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r * t;<span class="comment">//先平移再旋转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Perspective-Matrix">Perspective Matrix</h3><p>将顶点数据从View Space变换到Clip Space裁剪空间中，待后续进行透视除法变换到齐次裁剪空间进行裁剪和屏幕映射</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Matrix <span class="title">GetPerspectiveMatrix</span><span class="params">(<span class="type">const</span> Camera&amp; camera)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> cot = <span class="number">1.0f</span> / std::<span class="built_in">tan</span>((camera.FOV / <span class="number">2.0f</span>) * <span class="number">3.14f</span> / <span class="number">180</span>);</span><br><span class="line">Matrix ret;</span><br><span class="line">ret[<span class="number">0</span>][<span class="number">0</span>] = cot / camera.aspect;</span><br><span class="line">ret[<span class="number">1</span>][<span class="number">1</span>] = cot;</span><br><span class="line">ret[<span class="number">2</span>][<span class="number">2</span>] = -(camera.far + camera.near) / (camera.far - camera.near);</span><br><span class="line">ret[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">-2</span> * camera.far * camera.near / (camera.far - camera.near);</span><br><span class="line">ret[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渲染流程">渲染流程</h2><p>Rasterizer类中的成员函数ExeRenderPipeline，流程和<a href="#%E6%B8%B2%E6%9F%93%E5%99%A8%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84">渲染器架构</a>部分的内容基本相同，只是项目源文件中放了很多用于deBug的宏定义，所以在此留一个纯净版</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rasterizer::ExeRenderPipeline</span><span class="params">(Model* model, TGAImage* diffuse, Vec3f light_dir)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">worldLightDir = light_dir * <span class="number">-1.f</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;diffuseTex = diffuse;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;|||||||||||||||||||ExeRenderPipeline 单帧开始|||||||||||||||||||&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;||||||||||||||||摄像机基本信息： &quot;</span> &lt;&lt; <span class="string">&quot;position: &quot;</span> &lt;&lt; camera.position &lt;&lt; <span class="string">&quot; LookAt: &quot;</span> &lt;&lt; camera.g &lt;&lt; <span class="string">&quot; LookUp: &quot;</span> &lt;&lt; camera.t &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;||||||||||||||||光照方向：&quot;</span> &lt;&lt; worldLightDir &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; model-&gt;<span class="built_in">nfaces</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">v2f vertexout[<span class="number">3</span>];</span><br><span class="line">std::vector&lt;Vec3i&gt; face = model-&gt;<span class="built_in">face</span>(i);<span class="comment">//指定当前遍历到的面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//遍历边上的每一个顶点，进行处理</span></span><br><span class="line">appdata_base VertexData = <span class="built_in">GetVertexData</span>(model, face[j]);</span><br><span class="line">vertexout[j] = <span class="built_in">VertexShader</span>(VertexData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//透视除法</span></span><br><span class="line"><span class="type">float</span> w[<span class="number">3</span>];<span class="comment">//存储透视除法系数</span></span><br><span class="line">Vec3f homogeneousClipPos[<span class="number">3</span>];<span class="comment">//齐次裁剪空间</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">w[j] = vertexout[j].clipPos.w;</span><br><span class="line">homogeneousClipPos[j] = (vertexout[j].clipPos / w[j]).<span class="built_in">xyz</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础齐次裁剪</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">canClip</span>(homogeneousClipPos)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕映射</span></span><br><span class="line">Vec3f screen_coords[<span class="number">3</span>] = &#123;</span><br><span class="line"><span class="built_in">ScreenMapping</span>(homogeneousClipPos[<span class="number">0</span>]),</span><br><span class="line"><span class="built_in">ScreenMapping</span>(homogeneousClipPos[<span class="number">1</span>]),</span><br><span class="line"><span class="built_in">ScreenMapping</span>(homogeneousClipPos[<span class="number">2</span>])</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形设置--&gt;基于三角形获取AABB</span></span><br><span class="line">std::tuple&lt;Vec2i,Vec2i&gt; bbox = <span class="built_in">GetBoudingBox</span>(screen_coords);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//------------------逐顶点的操作结束------------------//</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//--------------至此，开始逐片元进行操作--------------//</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//逐片元执行FragmentShader</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> y = std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(bbox).y; y &lt;= std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(bbox).y; y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = std::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(bbox).x; x &lt;= std::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(bbox).x; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断是否在三角形内部，如果不在三角形内部，继续遍历下一个frag</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsInTriangle</span>(<span class="built_in">Vec2i</span>(x, y), screen_coords)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取片元中心的重心坐标</span></span><br><span class="line">Vec3f BarycentricCoordinate = <span class="built_in">GetBarycentricCoordinate</span>(screen_coords, <span class="built_in">Vec2f</span>(x+<span class="number">.5</span>, y+<span class="number">.5</span>));<span class="comment">//重心坐标分别对应vertexout[0],vertexout[1],vertexout[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插值计算当前frag在candidate cube 中的z值</span></span><br><span class="line"><span class="type">float</span> vertexDepth[<span class="number">3</span>] = &#123; screen_coords[<span class="number">0</span>].z,screen_coords[<span class="number">1</span>].z,screen_coords[<span class="number">2</span>].z &#125;;</span><br><span class="line"><span class="type">float</span> homogeneousDepth = <span class="built_in">GetFragHomogeneousDepth</span>(vertexDepth, BarycentricCoordinate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形重心插值，获取当前frag的w值</span></span><br><span class="line"><span class="type">float</span> fragW = <span class="built_in">GetFragW</span>(w, BarycentricCoordinate);</span><br><span class="line"><span class="comment">//获取当前frag在线性空间下（此处用的是裁剪空间）深度值</span></span><br><span class="line"><span class="type">float</span> depth = homogeneousDepth * fragW;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度判断</span></span><br><span class="line"><span class="keyword">if</span> (std::<span class="built_in">abs</span>(depth) &lt; ZBuffer[y * screen.width + x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//深度值更小，则更新ZBuffer，计算FragmentShader并渲染当前frag</span></span><br><span class="line">ZBuffer[y * screen.width + x] = depth;</span><br><span class="line">color4 FragColor = <span class="built_in">FragmentShader</span>(vertexout, fragW, BarycentricCoordinate);</span><br><span class="line"></span><br><span class="line">fragCounter++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FragColor.r == <span class="number">-1</span> || FragColor.g == <span class="number">-1</span> || FragColor.b == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置缓存区</span></span><br><span class="line">std::<span class="built_in">fill</span>(ZBuffer.<span class="built_in">begin</span>(), ZBuffer.<span class="built_in">end</span>(), <span class="number">99</span>);</span><br><span class="line">std::<span class="built_in">fill</span>(FrameBuffer.<span class="built_in">begin</span>(), FrameBuffer.<span class="built_in">end</span>(), <span class="built_in">color4</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">std::<span class="built_in">fill</span>(LuminanceBuffer.<span class="built_in">begin</span>(), LuminanceBuffer.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;执行Fragment Shader 数量：&quot;</span> &lt;&lt; fragCounter &lt;&lt; std::endl;</span><br><span class="line">fragCounter = <span class="number">0</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;|||||||||||||||||||ExeRenderPipeline 单帧结束|||||||||||||||||||&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>额外内容</h1><h2 id="Frame-Buffer">Frame Buffer</h2><p>最简易的版本将是直接将当前渲染到的像素直接绘制到屏幕上，后续加入了Frame Buffer，渲染器会先将颜色数据存储到Frame Buffer中，经过处理后再绘制到屏幕。</p><p>使用时直接在上方宏定义处定义#define DEFERREDRENDERING_ON即可</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if (std::abs(depth) &lt; ZBuffer[y * screen.width + x])</span><br><span class="line">&#123;</span><br><span class="line">ZBuffer[y * screen.width + x] = depth;</span><br><span class="line">color4 FragColor = FragmentShader(vertexout, fragW, BarycentricCoordinate);</span><br><span class="line"></span><br><span class="line">fragCounter++;</span><br><span class="line"></span><br><span class="line">if (FragColor.r == -1 || FragColor.g == -1 || FragColor.b == -1) continue;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- DrawFrag(Vec2f(x + .5, y + .5), FragColor);</span></span><br><span class="line"><span class="addition">+FrameBuffer[y * screen.width + x] = FragColor;//写入FrameBuffer</span></span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line"><span class="addition">+for (int y = 0; y &lt; screen.height; y++)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+for (int x = 0; x &lt; screen.width; x++)</span></span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+DrawFrag(Vec2f(x + .5, y + .5), FrameBuffer[y * screen.width + x]);</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><h2 id="渲染深度图">渲染深度图</h2><p>简单的渲染ZBuffer中的信息，在这个渲染器中，我想做出Deferred Render的感觉，所以实现需要#define DEFERREDRENDERING_ON来实现</p><p>只是将绘制Frame Buffer替换成了绘制ZBuffer</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">for (int y = 0; y &lt; screen.height; y++)</span><br><span class="line">&#123;</span><br><span class="line">for (int x = 0; x &lt; screen.width; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="deletion">-DrawFrag(Vec2f(x + .5, y + .5), FrameBuffer[y * screen.width + x]);</span></span><br><span class="line"><span class="addition">+DrawFrag(Vec2f(x + .5, y + .5), color4(ZBuffer[y * screen.width + x] / 120, ZBuffer[y * screen.width + x] / 120, ZBuffer[y * screen.width + x] / 120, 1.f).AddContrast(.5));</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="得到亮度图">得到亮度图</h2><p>亮度计算方法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>u</mi><mi>m</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><mi>r</mi><mo>∗</mo><mn>0.2125</mn><mo>+</mo><mi>g</mi><mo>∗</mo><mn>0.7154</mn><mo>+</mo><mi>b</mi><mo>∗</mo><mn>0.0721</mn></mrow><annotation encoding="application/x-tex">Luminance = r * 0.2125 + g * 0.7154 + b * 0.0721</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">Lu</span><span class="mord mathnormal">minan</span><span class="mord mathnormal">ce</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.2125</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6597em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.7154</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.0721</span></span></span></span></p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if (std::abs(depth) &lt; ZBuffer[y * screen.width + x])</span><br><span class="line">&#123;</span><br><span class="line">ZBuffer[y * screen.width + x] = depth;</span><br><span class="line">color4 FragColor = FragmentShader(vertexout, fragW, BarycentricCoordinate);</span><br><span class="line">fragCounter++;</span><br><span class="line">if (FragColor.r == -1 || FragColor.g == -1 || FragColor.b == -1) continue;</span><br><span class="line">FrameBuffer[y * screen.width + x] = FragColor;</span><br><span class="line"><span class="addition">+LuminanceBuffer[y * screen.width + x] = FragColor.r * 0.2125 + FragColor.g * 0.7154 + FragColor.b * 0.0721;//写入亮度LuminanceBuffer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于深度-亮度的简单描边效果">基于深度/亮度的简单描边效果</h2><p>绘制Frame Buffer时，遍历每个像素并判断是否应该进行描边绘制</p><p>此处我使用当前像素周围八个像素，对角及上下左右的颜色信息差距，通过相减除以像素差来模拟颜色信息差的二阶导数，来判断是否描边</p><h4 id="基于深度">基于深度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (y &gt; <span class="number">1</span> &amp;&amp; y &lt; screen.height - <span class="number">1</span> &amp;&amp; x &gt; <span class="number">1</span> &amp;&amp; x &lt; screen.width - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((std::<span class="built_in">abs</span>((ZBuffer[(y + <span class="number">1</span>) * screen.width + x + <span class="number">1</span>] - ZBuffer[(y - <span class="number">1</span>) * screen.width + x - <span class="number">1</span>]))/(<span class="type">float</span>)<span class="number">2.8</span> &gt; <span class="number">.2</span>f)|| (std::<span class="built_in">abs</span>((ZBuffer[(y - <span class="number">1</span>) * screen.width + x + <span class="number">1</span>] - ZBuffer[(y + <span class="number">1</span>) * screen.width + x - <span class="number">1</span>]))/(<span class="type">float</span>)<span class="number">2.8</span> &gt; <span class="number">.2</span>f)|| (std::<span class="built_in">abs</span>((ZBuffer[y * screen.width + x + <span class="number">1</span>] - ZBuffer[y * screen.width + x - <span class="number">1</span>])) / (<span class="type">float</span>)<span class="number">2</span> &gt; <span class="number">.2</span>f)|| (std::<span class="built_in">abs</span>((ZBuffer[(y + <span class="number">1</span>) * screen.width + x] - ZBuffer[(y - <span class="number">1</span>) * screen.width + x])) / (<span class="type">float</span>)<span class="number">2</span> &gt; <span class="number">.2</span>f))</span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), <span class="built_in">color4</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), FrameBuffer[y * screen.width + x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), FrameBuffer[y * screen.width + x]);</span><br></pre></td></tr></table></figure><h4 id="基于亮度">基于亮度</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (y &gt; <span class="number">1</span> &amp;&amp; y &lt; screen.height - <span class="number">1</span> &amp;&amp; x &gt; <span class="number">1</span> &amp;&amp; x &lt; screen.width - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((std::<span class="built_in">abs</span>((LuminanceBuffer[(y + <span class="number">1</span>) * screen.width + x + <span class="number">1</span> ] - LuminanceBuffer[(y - <span class="number">1</span>) * screen.width + x - <span class="number">1</span>]))/(<span class="type">float</span>)<span class="number">2.8</span> &gt; <span class="number">.05</span>f)</span><br><span class="line">|| (std::<span class="built_in">abs</span>((LuminanceBuffer[(y - <span class="number">1</span>) * screen.width + x + <span class="number">1</span>] - LuminanceBuffer[(y + <span class="number">1</span>) * screen.width + x - <span class="number">1</span>]))/(<span class="type">float</span>)<span class="number">2.8</span> &gt; <span class="number">.05</span>f)</span><br><span class="line">|| (std::<span class="built_in">abs</span>((LuminanceBuffer[y * screen.width + x + <span class="number">1</span>] - LuminanceBuffer[y * screen.width + x - <span class="number">1</span>]))/(<span class="type">float</span>)<span class="number">2</span> &gt; <span class="number">.05</span>f)</span><br><span class="line">|| (std::<span class="built_in">abs</span>((LuminanceBuffer[(y + <span class="number">1</span>) * screen.width + x] - LuminanceBuffer[(y - <span class="number">1</span>) * screen.width + x]))/(<span class="type">float</span>)<span class="number">2</span> &gt; <span class="number">.05</span>f))</span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), <span class="built_in">color4</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), FrameBuffer[y * screen.width + x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">DrawFrag</span>(<span class="built_in">Vec2f</span>(x + <span class="number">.5</span>, y + <span class="number">.5</span>), FrameBuffer[y * screen.width + x]);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">除窗口创建和像素点的绘制外，不使用任何图形学API制作的软件光栅化渲染器</summary>
    
    
    
    <category term="项目开发" scheme="https://himoqiuhan.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="图形学" scheme="https://himoqiuhan.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="C++" scheme="https://himoqiuhan.github.io/tags/C/"/>
    
    <category term="造轮子" scheme="https://himoqiuhan.github.io/tags/%E9%80%A0%E8%BD%AE%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>《Unity Shader入门精要》笔记（四）</title>
    <link href="https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-4/"/>
    <id>https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-4/</id>
    <published>2023-03-31T16:00:03.000Z</published>
    <updated>2023-06-13T09:40:54.074Z</updated>
    
    <content type="html"><![CDATA[<h1>NPR</h1><p>因为我想将来重点研究NPR，所以NPR的部分统一放在之后的笔记整理</p><h1>使用噪声</h1><h2 id="消融效果">消融效果</h2><h3 id="原理">原理</h3><p>概括来说就是<strong>噪声纹理+透明度测试</strong>，使用噪声纹理采样的结果和某个控制消融程度的阈值比较，如果小于阈值，就使用clip函数把它对应的像素裁剪掉，这些部分就对应“烧毁”的部分</p><h3 id="Shader实现">Shader实现</h3><ul><li><code>Cull Off</code>命令关闭了shader的面片剔除，也就是说模型的正面和背面都会被渲染。因为消融会导致模型内部裸露，如果只渲染正面会出现错误的效果</li><li>为了能正确投射消融效果的阴影，使用了自定义的阴影投射Pass，在这里面通常会使用Unity内提供的内置宏V2F_SHADOW_CASTER\TRANSFER_SHADOW_CASTER_NORMALOFFSET和SHADOW_CASTER_FRAGMENT来帮助我们计算投射阴影时需要的各种变量，我们可以只关注自定义计算的部分</li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Noise/Dissolve&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _BumpMap(&quot;Bump Map&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _DissolveTex(&quot;Dissolve Texture&quot;, <span class="number">2</span>D) = &quot;black&quot;&#123;&#125;</span><br><span class="line">        _BurningLineWidth(&quot;Burning Line&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0.5</span></span><br><span class="line">        _BurnedAmount(&quot;Burned Amount&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0.3</span></span><br><span class="line">        _BurningFirstColor(&quot;Burning First Color&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _BurningSecondColor(&quot;Burning Second Color&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            </span><br><span class="line">            Cull off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdbase</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;Lighting.cginc&quot;</span></span><br><span class="line">            <span class="meta">#include &quot;AutoLight.cginc&quot;</span></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            <span class="type">sampler2D</span> _BumpMap;</span><br><span class="line">            float4 _BumpMap_ST;</span><br><span class="line">            <span class="type">sampler2D</span> _DissolveTex;</span><br><span class="line">            float4 _DissolveTex_ST;</span><br><span class="line">            <span class="type">float</span> _BurningLineWidth;</span><br><span class="line">            <span class="type">float</span> _BurnedAmount;</span><br><span class="line">            fixed4 _BurningFirstColor;</span><br><span class="line">            fixed4 _BurningSecondColor;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 tangentLightDir : TEXCOORD0;</span><br><span class="line">                float2 uv_base : TEXCOORD1;</span><br><span class="line">                float2 uv_bump : TEXCOORD2;</span><br><span class="line">                float2 uv_noise : TEXCOORD3;</span><br><span class="line">                float3 worldPos : TEXCOORD4;<span class="comment">//用来计算光照衰减</span></span><br><span class="line">                SHADOW_COORDS(<span class="number">5</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_tan v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv_base = TRANSFORM_TEX(v.texcoord,_MainTex);</span><br><span class="line">                o.uv_bump = TRANSFORM_TEX(v.texcoord,_BumpMap);</span><br><span class="line">                o.uv_noise = TRANSFORM_TEX(v.texcoord,_DissolveTex);</span><br><span class="line"></span><br><span class="line">                TANGENT_SPACE_ROTATION;</span><br><span class="line">                o.tangentLightDir = mul(rotation,ObjSpaceLightDir(v.vertex));</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">float</span> burn = tex2D(_DissolveTex,i.uv_noise).r;</span><br><span class="line"></span><br><span class="line">                clip(burn.r - _BurnedAmount);<span class="comment">//剔除溶解掉的部分（值小则剔除）</span></span><br><span class="line"></span><br><span class="line">                float3 tangentLightDir = <span class="built_in">normalize</span>(i.tangentLightDir);</span><br><span class="line">                float3 tangentNormal = UnpackNormal(tex2D(_BumpMap, i.uv_bump));<span class="comment">//将法线信息从0 —— 1转换到 -1 —— 1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算正常的漫反射</span></span><br><span class="line">                fixed3 albedo = tex2D(_MainTex,i.uv_base);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(<span class="built_in">dot</span>(tangentLightDir,tangentNormal));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算溶解效果（白色溶解：为了便于后续控制完全没溶解的情况）</span></span><br><span class="line">                fixed t = <span class="number">1</span> - <span class="built_in">smoothstep</span>(<span class="number">0.0</span>,_BurningLineWidth,burn-_BurnedAmount);</span><br><span class="line">                t = <span class="built_in">pow</span>(t,<span class="number">2</span>);</span><br><span class="line">                fixed3 burningColor = lerp(_BurningFirstColor,_BurningSecondColor,t);</span><br><span class="line">                burningColor = <span class="built_in">pow</span>(burningColor,<span class="number">5</span>);<span class="comment">//指数计算加强溶解对比效果</span></span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line">                fixed3 finalColor = lerp(ambient + diffuse * atten, burningColor,t*<span class="built_in">step</span>(<span class="number">0.0001</span>,_BurnedAmount));<span class="comment">//插值计算溶解部分和非溶解部分,step用于保证_BurnedAmount为0的时候没有溶解效果</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(finalColor,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        Pass    </span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ShadowCaster&quot;&#125;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"><span class="comment">// Upgrade <span class="doctag">NOTE:</span> excluded shader from DX11; has structs without semantics (struct v2f members uv_BurnMap)</span></span><br><span class="line"><span class="meta">#pragma exclude_renderers d3d11</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma multi_compile_shadowcaster</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _DissolveMap;</span><br><span class="line">            float4 _DissolveMap_ST;</span><br><span class="line">            <span class="type">float</span> _BurnedAmount;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                V2F_SHADOW_CASTER;</span><br><span class="line">                float2 uv_BurnMap;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_base v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line"></span><br><span class="line">                o.uv_BurnMap = TRANSFORM_TEX(v.texcoord, _DissolveMap);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 burn = tex2D(_DissolveMap, i.uv_BurnMap).rgb;</span><br><span class="line"></span><br><span class="line">                clip(burn.r - _BurnedAmount);</span><br><span class="line"></span><br><span class="line">                SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水波效果">水波效果</h2><h3 id="原理-2">原理</h3><p>原理与使用反射和折射模拟透明玻璃效果的原理基本一致。此处使用Cubemao作为环境纹理模拟反射效果；使用GrabPass获取当前屏幕的渲染，并使用法线对像素进行偏移模拟折射效果</p><h3 id="Shader实现-2">Shader实现</h3><ul><li>其中将Queue设置成了Transparent，可以确保物体渲染时，其他所有不透明物体已经被渲染到屏幕上了</li><li>设置RenderType为Opaque是为了在使用着色器替换技术时，该物体可以在需要时被正确渲染（获取摄像机的深度和法线纹理时）</li><li>法线的扰动和计算是在世界空间下完成的（法线信息从世界空间转换到世界空间下进行计算），以便于对GrabPass读取到的贴图进行读取</li><li>使用了WaveXSpeed和WaveYSpeed两个属性，是为了模拟两层交叉的水面波动效果</li><li>计算偏移的屏幕坐标时，我们将偏移量和屏幕坐标的Z分量相乘，这是为了模拟深度越大，折射程度越大的效果</li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Noise/WaterWave&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;, Color) = (<span class="number">0</span>,<span class="number">0.15</span>,<span class="number">0.115</span>,<span class="number">1.0</span>)</span><br><span class="line">        _MainTex(&quot;Base(RGB)&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _WaveMap(&quot;Wave Map&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Cubemap(&quot;Environmental Cubemap&quot;, CUBE) = &quot;_Skybox&quot;&#123;&#125;</span><br><span class="line">        _WaveSpeedX(&quot;Wave Speed X&quot;, Range(<span class="number">-0.1</span>,<span class="number">0.1</span>)) = <span class="number">0.01</span></span><br><span class="line">        _WaveSpeedY(&quot;Wave Speed Y&quot;, Range(<span class="number">-0.1</span>,<span class="number">0.1</span>)) = <span class="number">0.01</span></span><br><span class="line">        _Distortion(&quot;Distortion&quot;, Range(<span class="number">0</span>,<span class="number">100</span>)) = <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags&#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Opaque&quot;&#125;<span class="comment">//Queue设置为半透明为了确保这个物体是在场景内物体渲染完成之后才被渲染的，表现出“透过水”的效果；而RenderType设置为Opaque是为了在使用着色器替换时物体可以在需要时被正确渲染</span></span><br><span class="line">        </span><br><span class="line">    GrabPass&#123; &quot;_RefractionTex&quot; &#125; <span class="comment">//屏幕图像被存入RefractionTex中</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123; &quot;LightMode&quot;=&quot;ForwardBase&quot; &#125;</span><br><span class="line"></span><br><span class="line">CGPROGRAM</span><br><span class="line"></span><br><span class="line"><span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma multi_compile_fwdbase</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma vertex vert</span></span><br><span class="line"><span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">fixed4 _Color;</span><br><span class="line"><span class="type">sampler2D</span> _MainTex;</span><br><span class="line">float4 _MainTex_ST;</span><br><span class="line"><span class="type">sampler2D</span> _WaveMap;</span><br><span class="line">float4 _WaveMap_ST;</span><br><span class="line">samplerCUBE _Cubemap;</span><br><span class="line">fixed _WaveSpeedX;</span><br><span class="line">fixed _WaveSpeedY;</span><br><span class="line"><span class="type">float</span> _Distortion;</span><br><span class="line"><span class="type">sampler2D</span> _RefractionTex;</span><br><span class="line">float4 _RefractionTex_TexelSize;</span><br><span class="line"></span><br><span class="line">struct a2v &#123;</span><br><span class="line">float4 vertex : POSITION;</span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line">float4 tangent : TANGENT; </span><br><span class="line">float4 texcoord : TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct v2f &#123;</span><br><span class="line">float4 pos : SV_POSITION;</span><br><span class="line">float4 scrPos : TEXCOORD0;</span><br><span class="line">float4 uv : TEXCOORD1;</span><br><span class="line">float4 TtoW0 : TEXCOORD2;  <span class="comment">//由于是咋世界空间下计算法线</span></span><br><span class="line">float4 TtoW1 : TEXCOORD3;  </span><br><span class="line">float4 TtoW2 : TEXCOORD4; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">v2f vert (a2v v)</span><br><span class="line">&#123;</span><br><span class="line">v2f o;</span><br><span class="line">o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">o.scrPos = ComputeGrabScreenPos(o.pos);<span class="comment">//来获取对应被抓取屏幕图像的采样坐标</span></span><br><span class="line"></span><br><span class="line">o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">o.uv.zw = TRANSFORM_TEX(v.texcoord, _WaveMap);</span><br><span class="line"></span><br><span class="line">float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;  </span><br><span class="line">fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);  </span><br><span class="line">fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);  </span><br><span class="line">fixed3 worldBinormal = <span class="built_in">cross</span>(worldNormal, worldTangent) * v.tangent.w; </span><br><span class="line"></span><br><span class="line">o.TtoW0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);  </span><br><span class="line">o.TtoW1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);  </span><br><span class="line">o.TtoW2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">fixed4 frag(v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">float3 worldPos = float3(i.TtoW0.w,i.TtoW1.w,i.TtoW2.w);</span><br><span class="line">fixed3 viewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(worldPos));</span><br><span class="line">float2 speed = _Time.y * float2(_WaveSpeedX, _WaveSpeedY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在切线空间下获取法线</span></span><br><span class="line">fixed3 bump1 = UnpackNormal(tex2D(_WaveMap, i.uv.zw + speed)).rgb;<span class="comment">//</span></span><br><span class="line">fixed3 bump2 = UnpackNormal(tex2D(_WaveMap, i.uv.zw - speed)).rgb;<span class="comment">//读取两次法线是为了能获取多层的水面波纹效果</span></span><br><span class="line">fixed3 bump = <span class="built_in">normalize</span>(bump1 + bump2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算切线空间的偏移</span></span><br><span class="line">float2 <span class="keyword">offset</span> = bump.xy * _Distortion * _RefractionTex_TexelSize.xy;</span><br><span class="line">i.scrPos.xy += <span class="keyword">offset</span> * i.scrPos.z;<span class="comment">//把偏移量和屏幕坐标相乘是为了模拟深度越大折射越强的效果</span></span><br><span class="line">fixed3 refrCol = tex2D(_RefractionTex, i.scrPos.xy/i.scrPos.w).rgb;<span class="comment">//对scrPos进行透视除法后用于采样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//从切线空间转换到世界空间</span></span><br><span class="line">bump = <span class="built_in">normalize</span>(half3(<span class="built_in">dot</span>(i.TtoW0.xyz,bump),<span class="built_in">dot</span>(i.TtoW1.xyz,bump),<span class="built_in">dot</span>(i.TtoW2.xyz,bump)));</span><br><span class="line">fixed4 texColor = tex2D(_MainTex, i.uv.xy + speed);</span><br><span class="line">fixed3 reflDir = <span class="built_in">reflect</span>(-viewDir, bump);</span><br><span class="line">fixed3 reflCol = texCUBE(_Cubemap,reflDir).rgb * texColor.rgb * _Color.rgb;</span><br><span class="line"></span><br><span class="line">fixed fresnel = <span class="built_in">pow</span>(<span class="number">1</span>-saturate(<span class="built_in">dot</span>(viewDir,bump)),<span class="number">4</span>);</span><br><span class="line">fixed3 finalColor = reflCol * fresnel + refrCol * (<span class="number">1</span>-fresnel);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fixed4(finalColor, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用噪声纹理的灰度值生成法线信息">使用噪声纹理的灰度值生成法线信息</h2><p>在纹理面板中把纹理类型设置为Normal Map，并选中Create from grayscale即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230613105817515.png"  /><h1>Unity中的渲染优化技术</h1><h2 id="移动平台的特点">移动平台的特点</h2><p>移动设备上的GPU架构专注于尽可能使用更小的带宽和功能</p><ul><li>为了减少overdraw的Tiled-based Deferred Rendering(TBDR)</li><li>Early-Z技术剔除那些不需要被渲染的片元</li></ul><h2 id="影响性能的因素">影响性能的因素</h2><p><strong>CPU主要保证帧率，GPU主要保证分辨率</strong></p><h3 id="性能瓶颈的原因">性能瓶颈的原因</h3><ul><li>CPU<ul><li>过多的draw call</li><li>复杂的脚本或者物理模拟</li></ul></li><li>GPU<ul><li>顶点处理<ul><li>过多的顶点</li><li>过多的逐顶点计算</li></ul></li><li>片元处理<ul><li>过多的片元（既可能是分辨率造成的，也可能是overdraw造成的）</li><li>过多的逐片元计算</li></ul></li></ul></li><li>带宽<ul><li>使用了尺寸很大且未被压缩的纹理</li><li>分辨率过高的帧缓存</li></ul></li></ul><h3 id="优化技术总览">优化技术总览</h3><ul><li>CPU优化<ul><li>使用批处理减少draw call数目</li></ul></li><li>GPU优化<ul><li>优化几何体</li><li>使用LOD技术</li><li>使用遮挡剔除（Occlusion Culling）技术</li></ul></li><li>减少需要处理的片元数目<ul><li>控制绘制顺序</li><li>警惕透明物体</li><li>减少实时光照</li></ul></li><li>减少计算复杂度<ul><li>使用shader的LOD技术</li><li>代码方面的优化</li></ul></li><li>节省内存带宽<ul><li>减少纹理大小</li><li>利用分辨率缩放</li></ul></li></ul><h2 id="减少draw-call数目">减少draw call数目</h2><p>处理思想：<strong>每次调用draw call时尽可能多地处理多个物体</strong></p><p>什么物体可以一起处理：使用同一个材质的物体——对于使用同一个材质的物体，他们之间的区别仅仅在于顶点数据的差别，我们可以把这些顶点数据合并在一起，再一起发送给GPU，就可以完成一次批处理</p><ul><li><p>Unity支持两种批处理方式：动态批处理和静态批处理</p></li><li><p>不管是动态批处理还是静态批处理，它们的前提都是要使用<strong>同一个材质</strong>（是同一个，而不是使用了同一个shader的材质，相当于是UE中的同一个材质实例）</p></li></ul><h3 id="动态批处理">动态批处理</h3><p><strong>基本原理</strong>：每一帧把可以进行批处理的mesh进行合并，再把合并后的模型数据传递给GPU，然后使用同一个材质进行渲染。</p><p><strong>优势</strong>：实现方便，并且自由度高，经过批处理的物体仍然可以移动</p><p><strong>缺点</strong>：只有满足条件的模型和材质才可以被动态批处理</p><p>主要的<strong>限制条件</strong>：</p><ul><li>能够进行动态批处理的<strong>网格的顶点属性规模要小于900</strong>。比如说，如果shader中需要使用顶点位置、法线和纹理坐标这3个顶点属性，那么要想让模型能够被动态批处理，他的顶点数目不能超过300（数据具有即时性，只需要记住顶点属性规模这个概念，并且其会限制动态批处理即可）</li><li>使用lightmap的物体需要小心处理。这些物体需要额外的渲染参数，例如，在光照纹理上的索引、偏移量和缩放信息等。因此为了能让这些物体可以被动态批处理，我们需要保证他们指向光照纹理中的同一个位置</li><li>多Pass的shader会中断批处理。前向渲染中，我们有时需要使用额外的Pass来为模型添加额外的光照效果，这样一来模型就不会被动态批处理了。</li></ul><h3 id="静态批处理">静态批处理</h3><p>静态批处理适用于任何大小的几何模型</p><p><strong>实现原理</strong>：只在运行开始阶段，把需要进行静态批处理的模型合并到一个新的网格结构中，这意味着这些模型不可以在运动时刻被移动。</p><p><strong>优势</strong>：但是由于它只进行一次合并操作，因此比动态批处理高效</p><p><strong>缺点</strong>：模型不可以在运动时刻被移动、需要占用更多的内存（存储合并的几何结构，其每一个物体会对应一个原本网格的复制体）</p><p><strong>操作</strong>：只需要勾选物体的<strong>Static</strong>即可</p><h3 id="共享材质">共享材质</h3><p>如果两个材质之间只有使用的纹理不同，我们可以把这些纹理合并到一张更大的纹理中，即组成一张<strong>图集（atlas）</strong>。一旦使用了纹理，我们就可以使用同一个材质，再使用不同的采样坐标对纹理进行采样即可。</p><h2 id="减少需要处理的顶点数目">减少需要处理的顶点数目</h2><h3 id="优化几何体">优化几何体</h3><ul><li><p>建模时就要记住，尽可能<strong>减少模型中三角形面片的数目</strong>，一些对于模型没有影响的、或是肉眼难以察觉到区别的顶点都要尽可能去掉</p></li><li><p>unity中显示的顶点数目和三角形数目往往大于建模软件中所显示的数目，其原因是：</p><ul><li>建模软件更多地站在人的视角下理解顶点，而unity是在GPU的视角下理解顶点。GPU看来，有时需要把一个顶点拆分成多个顶点，原因主要有两个：一是为了<strong>分离纹理坐标（uv splits）</strong>，二是为了<strong>产生平滑的边界（smoothing splits）</strong>。两者的本质，其实都是因为对于GPU来说，顶点的每一个属性和顶点之间必须是一对一的关系。有些顶点的纹理坐标可能有多个（不同的面），这对GPU来说是不可理解的，因此它必须把这个顶点拆分成多个具有不同纹理坐标的顶点。平滑边也是类似，一个顶点可能会对应多个法线信息或切线信息，用于决定一个边是hard edge还是smooth edge</li></ul></li><li><p>优化：</p><ul><li>减少顶点数目</li><li>移除不必要的硬边以及纹理衔接，以此避免边界平滑和纹理分离</li></ul></li></ul><h3 id="模型的LOD">模型的LOD</h3><p>使用LOD Group组件为一个物体构建一个LOD</p><h2 id="减少需要处理的片元数目">减少需要处理的片元数目</h2><p>重点在于减少drawcall</p><h3 id="控制绘制顺序">控制绘制顺序</h3><p>由于深度测试的存在，如果我们能保证物体都是从<strong>前往后绘制</strong>的，那么就可以很大程度上减少overdraw</p><ul><li>unity中，<strong>Queue数目小于2500</strong>的(Background、Geometry和AlphaTest)的对象都会被认为是opaque的物体，这些物体总体上是从前往后绘制的。而其他的队列则是从后往前绘制。所以我们可以尽可能把物体的队列设置为不透明物体的渲染队列，而尽量避免使用半透明队列。</li><li>而且我们可以充分利用unity的渲染队列来控制绘制顺序：<ul><li>第一人称射击游戏中，对于游戏中的主要人物角色来说，他们使用的shader往往比较复杂，但是他们通常会<strong>挡住屏幕的很大一部分区域</strong>，因此可以<strong>先绘制</strong>他们（使用小的渲染队列）</li><li>对于敌人，他们通常会出现在各种掩体之后（<strong>任务渲染比场景复杂，且部分身体部位被遮挡</strong>，但是没有完全遮住，所以不会被剔除），因此可以在所有常规的不透明物体后面渲染他们</li><li>对于天空盒，它几乎覆盖了所有像素，而且它<strong>一定是在所有物体的后面</strong>，因此它的队列可以设置为“<strong>Geometry+1</strong>”，这样可以保证不会因为天空盒造成overdraw</li></ul></li></ul><h3 id="时刻警惕透明物体">时刻警惕透明物体</h3><ul><li><p>对于半透明物体来说，由于他没有开启深度写入，如果想要获取正确的效果，就必须从后往前渲染，这意味着半透明物体几乎一定会造成overdraw</p></li><li><p>移动平台上，AlphaTest也会影响性能。虽然他没有关闭深度写入，但是由于他的实现使用了discard或clip操作，这些操作会导致一些硬件的优化策略失效。</p><ul><li>例如，TBDR技术会在执行fragment shader之前就判断哪些瓦片被真正地渲染。但是由于透明度测试在片元着色器中使用了discard函数，改变了片元是否会被渲染的结果，只有在执行了所有的fragment shader之后，GPU才会知道哪些片元会被真正渲染到屏幕上。因此GPU就无法使用这个优化策略了。这种时候，使用透明度混合的性能往往比使用透明度测试更好。</li></ul></li></ul><h3 id="减少实时光照和阴影">减少实时光照和阴影</h3><ul><li>对于逐像素光源来说，被这些光源照亮的物体需要再被渲染一次，并且他们会中断批处理<ul><li>例如，一个场景里如果包含了3个逐像素的点光源，而且使用了逐像素的shader，那么很可能将drawcall的次数提升3倍（CPU的瓶颈），同时也会增加overdraw（GPU的瓶颈）</li></ul></li><li>实时阴影也是一个非常消耗性能的效果，不仅是CPU需要提交更多的draw call，GPU也要进行更多处理</li><li>优化<ul><li>使用烘焙lightmap作为替代，这样运行时只需要更具纹理采样即可</li><li>移动平台上，一个物体使用的逐像素光源数目应小于1（不包括平行光），如果要使用更多的平行光，可以选择用逐顶点光照来代替</li></ul></li></ul><h2 id="节省带宽">节省带宽</h2><h3 id="减少纹理大小">减少纹理大小</h3><ul><li><p>所有纹理的<strong>长宽比最好相同</strong>（正方形），而且<strong>长宽值最好是2的整数幂</strong>，因为有很多优化策略只有在这种时候才可以发挥最大效用。</p></li><li><p>尽可能<strong>使用mipmap</strong>（原理见百人计划2.9-深入理解GPU硬件架构及运行机制）</p></li><li><p>压缩纹理也可以节省带宽，只需要把压缩纹理格式设置为自动压缩即可</p></li></ul><h3 id="利用分辨率缩放">利用分辨率缩放</h3><p>性能和画面之间的trade off</p><h2 id="减少计算复杂度">减少计算复杂度</h2><h3 id="Shader中的LOD技术">Shader中的LOD技术</h3><p>与之前提到的模型的LOD技术类似，Shader的LOD技术可以控制使用的shader等级，其原理是，只有shader的LOD值小于某个设定的值，这个shader才会被使用，而使用了超过设定值的shader的物体不会被渲染</p><p>通常在SubShader中使用类似下面的语句指明该shader的LOD值：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">SubShader &#123;</span><br><span class="line">    Tags &#123; &quot;RenderType&quot; = &quot;Opaque&quot;&#125;</span><br><span class="line">    LOD <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码方面的优化">代码方面的优化</h3><ul><li>尽可能使用低精度的浮点值进行计算<ul><li>float/highp适用于存储诸如顶点坐标等变量，但他的计算速度使最慢的，我们应该尽量避免在fragment  shader中使用这种精度进行计算</li><li>half/mediump适用于一些标量、纹理坐标等变量，它的计算速度约是float的两倍</li><li>fixed/lowp适用于绝大多数颜色变量和归一化后的方向矢量，他的计算速度越是float的4倍<ul><li>但要尽量避免对这些低精度变量进行频繁的swizzle操作(如color.xwxw)</li><li>应当尽量避免在不同精度之间的转换，这有可能造成一定程度的性能下降</li></ul></li></ul></li><li>对于绝大多数GPU来说，使用插值寄存器把数据从vertex shader传给下一个阶段时，应该使用尽可能少的插值变量（把多个变量组合成一个）（PowerVR除外）</li><li>尽可能不要使用全屏幕的后处理效果</li><li>尽可能不要使用分支语句和循环语句</li><li>尽可能避免使用类似sin、tan、pow、log等较为复杂的数学运算，可以使用查找表进行替代</li><li>尽可能不要使用discard操作，这会影响硬件的某些优化（TBDR）</li></ul><h1>NEXT</h1><p>Book：</p><p>《Real-time Rendering》</p><p>《Physically based rendering：From theory to implementation》</p><p>《GPU Gem》1-3</p><p>《GPU Pro》1-7</p><p>Course：</p><p>Physically Based Shading in Theory and Practice</p><p>Advances in Real-Time Rendering</p>]]></content>
    
    
    <summary type="html">噪声的使用、Unity中的渲染优化技术</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
    <category term="Unity" scheme="https://himoqiuhan.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>《Unity Shader入门精要》笔记（三）</title>
    <link href="https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-3/"/>
    <id>https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-3/</id>
    <published>2023-03-31T16:00:02.000Z</published>
    <updated>2023-06-13T09:40:43.108Z</updated>
    
    <content type="html"><![CDATA[<h1>基础动画</h1><h2 id="Unity内置的时间变量">Unity内置的时间变量</h2><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">变量类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">_Time</td><td style="text-align:center">float4</td><td style="text-align:center">t是场景加载开始持续的时间，变量类型表示为(t/20, t, 2t, 3t)</td></tr><tr><td style="text-align:center">_SinTime</td><td style="text-align:center">float4</td><td style="text-align:center">t是时间的正弦值，分别表示为(t/8, t/4, t/2, t)</td></tr><tr><td style="text-align:center">_CosTime</td><td style="text-align:center">float4</td><td style="text-align:center">t是时间的余弦值，分别表示为(t/8, t/4, t/2, t)</td></tr><tr><td style="text-align:center">unity_DeltaTime</td><td style="text-align:center">float4</td><td style="text-align:center">dt是时间增量，分别表示为(dt, 1/dt, smoothDt, 1/smoothDt)</td></tr></tbody></table><h2 id="纹理动画">纹理动画</h2><ul><li>关键帧图像存放一组动画序列帧的一张贴图</li><li>纹理动画的核心在于fragment shader中动态调整读取贴图的位置，计算不同时刻子图像的纹理坐标范围，实现关键帧动画</li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/MakeFrameMove/ImageSequence&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _MainTex(&quot;Image Sequence&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _HorizontalAmount(&quot;Horizontal Amount&quot;, Float) = <span class="number">4</span></span><br><span class="line">        _VerticalAmount(&quot;Vertical Amount&quot;, Float) = <span class="number">4</span></span><br><span class="line">        _Speed(&quot;Play Speed&quot;, Range(<span class="number">1</span>,<span class="number">100</span>)) = <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            Zwrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdbase</span></span><br><span class="line">            </span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            <span class="type">float</span> _HorizontalAmount;</span><br><span class="line">            <span class="type">float</span> _VerticalAmount;</span><br><span class="line">            <span class="type">float</span> _Speed;</span><br><span class="line">            </span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">float</span> time = <span class="built_in">floor</span>(_Time.y * _Speed);</span><br><span class="line">                <span class="type">float</span> row = <span class="built_in">floor</span>(time/_HorizontalAmount);<span class="comment">//通过商获取行索引</span></span><br><span class="line">                <span class="type">float</span> colum = time - row * _HorizontalAmount;<span class="comment">//通过余数获取列索引</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//half2 uv = float2(i.uv.x/_HorizontalAmount, i.uv.y/_VerticalAmount);//获取每个帧的读取的初始位置（知道是那个位置，类似于百分比的东西，然后再用行和列加到真正的位置</span></span><br><span class="line">                <span class="comment">//uv.x += colum/_HorizontalAmount;//相加获取正确的x位置</span></span><br><span class="line">                <span class="comment">//uv.y -= row/_VerticalAmount;//相加获取正确的y位置</span></span><br><span class="line">                </span><br><span class="line">                half2 uv = i.uv + half2(colum,-row);<span class="comment">//另一个理解方式：先获取正确的位置</span></span><br><span class="line">                uv.x /= _HorizontalAmount;<span class="comment">//再除到0-1区间内</span></span><br><span class="line">                uv.y /= _VerticalAmount;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//以上row要以 - 的形式遍历，因为逐帧贴图是从上开始到下的</span></span><br><span class="line"></span><br><span class="line">                fixed4 color = tex2D(_MainTex, uv);</span><br><span class="line">                color.rgb *= _Color;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> color;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本质上就是将原本的0-1的贴图读取范围映射到对应当前帧的范围内</p></blockquote><h2 id="顶点动画">顶点动画</h2><ul><li><p>需要关闭批处理，因为顶点动画需要在模型空间下进行顶点位置偏移的计算，批处理会使得所有相关的模型合并，导致这些模型各自的模型空间丢失。</p></li><li><p>核心在于vertex中对模型顶点进行计算偏移</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">v2f vert(a2v v)</span><br><span class="line">&#123;</span><br><span class="line">    v2f o;</span><br><span class="line">    float4 <span class="keyword">offset</span> = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">offset</span>.x = <span class="built_in">sin</span>(_Time.y * _Frequency  + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line">    <span class="comment">//因为给到的water的模型在其坐标空间内x方向是上下方向，所以使用sin对模型空间内的x进行变换</span></span><br><span class="line">    <span class="comment">//实际上的模型为 A sin(at + b)，根据不同物体的不同对象空间来决定</span></span><br><span class="line">    <span class="comment">//在此案例下x为波动的方向（竖轴），z为横轴，*v.vertex.z是因为通过不同的z的位置来控制不同的波动，否则会没有起伏的海浪的效果，只会整体移动</span></span><br><span class="line">    <span class="comment">//所以b=z,而_InvWaveLength则是告诉z应该被分为几段</span></span><br><span class="line">    o.pos = UnityObjectToClipPos(v.vertex + <span class="keyword">offset</span>);</span><br><span class="line">    o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">    o.uv += float2(<span class="number">0.0</span>, _Time.y * _Speed);</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阴影投射Pass：vert中直接把偏移值加到顶点位置变量中，再使用TRANSFER_SHADOW_CASTER_NORMALOFFSET来让unity做剩下的事；frag中直接使用TRANSFER_SHADOW_CASTER_FRAGMENT来让unity自动完成阴影投射</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Pass</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Pass to render object as a shadow caster</span></span><br><span class="line">   Tags</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;LightMode&quot;=&quot;ShadowCaster&quot;</span><br><span class="line">    &#125;<span class="comment">//将光照模式设置为阴影投射</span></span><br><span class="line"></span><br><span class="line">    CGPROGRAM</span><br><span class="line">    <span class="meta">#pragma vertex vert</span></span><br><span class="line">    <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#pragma multi_compile_shadowcaster//声明阴影投射的变体</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> _Magnitude;</span><br><span class="line">    <span class="type">float</span> _Frequency;</span><br><span class="line">    <span class="type">float</span> _InvWaveLength;</span><br><span class="line"></span><br><span class="line">    struct v2f</span><br><span class="line">    &#123;</span><br><span class="line">        V2F_SHADOW_CASTER;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     v2f vert(appdata_base v) <span class="comment">//阴影投射需要输入为v.normal和v.vertex的变量，所以可以直接使用appdata_base</span></span><br><span class="line">     &#123;</span><br><span class="line">         v2f o;</span><br><span class="line">         float4 <span class="keyword">offset</span> = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">         <span class="keyword">offset</span>.x = <span class="built_in">sin</span>(_Time.y * _Frequency  + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line">         v.vertex = v.vertex + <span class="keyword">offset</span>;</span><br><span class="line">         TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line">         <span class="keyword">return</span> o;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      fixed4 frag(v2f i) : SV_Target</span><br><span class="line">      &#123;</span><br><span class="line">         SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">      &#125;</span><br><span class="line">      ENDCG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/MakeFrameMove/Water&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Color(&quot;Color Tint&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Magnitude(&quot;Distortion Magnitude&quot;, Float) = <span class="number">1</span></span><br><span class="line">        _Frequency(&quot;Distortion Frequency&quot;, Float) = <span class="number">1</span></span><br><span class="line">        _InvWaveLength(&quot;Distortion Inversal Wave Length&quot;, Float) = <span class="number">1</span></span><br><span class="line">        _Speed(&quot;Speed&quot;, Float) = <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//需要禁用批处理batching，因为本案例需要在模型空间下对顶点进行偏移，而批处理会合并所有相关的模型导致这些模型各自的模型空间丢失</span></span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot; &quot;DisableBatching&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            Cull Off</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            <span class="type">float</span> _Magnitude;</span><br><span class="line">            <span class="type">float</span> _Frequency;</span><br><span class="line">            <span class="type">float</span> _InvWaveLength;</span><br><span class="line">            <span class="type">float</span> _Speed;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                float4 <span class="keyword">offset</span> = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">offset</span>.x = <span class="built_in">sin</span>(_Time.y * _Frequency  + v.vertex.z * _InvWaveLength) * _Magnitude;</span><br><span class="line">                <span class="comment">//因为给到的water的模型在其坐标空间内x方向是上下方向，所以使用sin对模型空间内的x进行变换</span></span><br><span class="line">                <span class="comment">//实际上的模型为 A sin(at + b)，根据不同物体的不同对象空间来决定</span></span><br><span class="line">                <span class="comment">//在此案例下x为波动的方向（竖轴），z为横轴，*v.vertex.z是因为通过不同的z的位置来控制不同的波动，否则会没有起伏的海浪的效果，只会整体移动</span></span><br><span class="line">                <span class="comment">//所以b=z,而_InvWaveLength则是告诉z应该被分为几段</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex + <span class="keyword">offset</span>);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                o.uv += float2(<span class="number">0.0</span>, _Time.y * _Speed);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 color = tex2D(_MainTex, i.uv) * _Color;</span><br><span class="line">                <span class="keyword">return</span> color;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Pass to render object as a shadow caster</span></span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ShadowCaster&quot;</span><br><span class="line">            &#125;<span class="comment">//将光照模式设置为阴影投射</span></span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma multi_compile_shadowcaster//声明阴影投射的变体</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">float</span> _Magnitude;</span><br><span class="line">            <span class="type">float</span> _Frequency;</span><br><span class="line">            <span class="type">float</span> _InvWaveLength;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                V2F_SHADOW_CASTER;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_base v) <span class="comment">//阴影投射需要输入为v.normal和v.vertex的变量，所以可以直接使用appdata_base</span></span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                float4 <span class="keyword">offset</span> = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">offset</span>.x = _Magnitude * <span class="built_in">sin</span>(_Time.y * _Frequency * <span class="built_in">abs</span>(v.vertex.x) + _InvWaveLength * v.vertex.z);</span><br><span class="line">                v.vertex = v.vertex + <span class="keyword">offset</span>;</span><br><span class="line">                TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Billboarding">Billboarding</h2><p>实现效果：让物体始终正面朝向摄像机</p><p>应用场所：面片草</p><p>计算原理：</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials11.png" alt="UnityShaderEssentials11"></p><ol><li>确定物体本地空间的轴朝向<ol><li>确定物体指向摄像机的方向为物体本地空间的法线（Z轴）朝向，得到确定的normal</li><li>通过利用物体本身向上的轴和法线，叉乘计算出物体本地坐标系向右方向的轴朝向，得到确定的right（其中需要判断UpDir会不会和Normal平行，如果平行会导致cross无效）</li><li>通过确定的normal和right叉乘计算出确定的up</li></ol></li><li>根据原始位置相对于锚点的偏移量以及三个正交基计算出新的顶点位置（x轴在right轴上投影，y轴在up轴上投影，z轴在normal轴上投影）</li></ol><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/MakeFrameMove/BillBoeard&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Color(&quot;Color Tint&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _VerticalBillboarding(&quot;Vertial Constraints&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Queue&quot;=&quot;Transparent&quot; &quot;RenderType&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;DisableBatching&quot;=&quot;True&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;LightMode&quot;=&quot;ForwardBase&quot;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">            Cull Off</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line">            </span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            <span class="type">float</span> _VerticalBillboarding;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                <span class="comment">//选择以模型空间的原点为锚点</span></span><br><span class="line">                float3 center = float3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                float3 viewer = mul(unity_WorldToObject,float4(_WorldSpaceCameraPos, <span class="number">1</span>));<span class="comment">//注意不能用内置的UnityWorldToObjectDir，因为这个计算的只是方向，会做normalize，导致无法得到正确的position</span></span><br><span class="line">                <span class="comment">//获取假定的目标法线</span></span><br><span class="line">                float3 normalDir = viewer - center;</span><br><span class="line">                <span class="comment">//如果_VerticalBillboarding=0,则说明向上的方向被固定，法线的y分量为0</span></span><br><span class="line">                <span class="comment">//如果_VerticalBillboarding=1,则说明法线方向被固定，以视野看向物体中心的反方向为法线方向</span></span><br><span class="line">                normalDir.y = normalDir.y * _VerticalBillboarding;</span><br><span class="line">                normalDir = <span class="built_in">normalize</span>(normalDir); <span class="comment">//标准化为单位向量</span></span><br><span class="line">                <span class="comment">//获取大致的向上向量upDir，为了避免upDir和法线平行（导致cross无效），需要进行判断</span></span><br><span class="line">                float3 upDir = <span class="built_in">abs</span>(normalDir.y) &gt; <span class="number">0.999</span> ? float3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) : float3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">//如果法线指向正上方，则upDir就指向前方；否则upDir指向正上方</span></span><br><span class="line">                float3 rightDir = <span class="built_in">normalize</span>(<span class="built_in">cross</span>(upDir, normalDir));</span><br><span class="line">                <span class="comment">//通过准确的rightDir和normalDir来叉乘获取准确的upDir，由此获得正交基向量</span></span><br><span class="line">                upDir = <span class="built_in">normalize</span>(<span class="built_in">cross</span>(normalDir, rightDir));</span><br><span class="line">                <span class="comment">//通过原本坐标系中的偏移值来获取顶点的新坐标位置</span></span><br><span class="line">                float3 <span class="keyword">offset</span> = v.vertex.xyz - center;</span><br><span class="line">                float3 localPos = center + rightDir * <span class="keyword">offset</span>.x + upDir * <span class="keyword">offset</span>.y + normalDir * <span class="keyword">offset</span>.z;</span><br><span class="line">                </span><br><span class="line">                o.pos = UnityObjectToClipPos(float4(localPos, <span class="number">1</span>));</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 color = tex2D(_MainTex, i.uv);</span><br><span class="line">                color.rgb *= _Color.rgb;</span><br><span class="line">                <span class="keyword">return</span> color;</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注意事项">注意事项</h2><ul><li>顶点动画如果在模型空间下进行计算需要禁用批处理，但因此会带来一定的性能下降，增加Draw Call，因此我们应该尽量避免在模型空间下用一些绝对位置和方向进行计算</li><li>顶点动画需要我们自己提供shadowcaster</li></ul><h1>屏幕后处理</h1><h2 id="屏幕后处理基本脚本系统">屏幕后处理基本脚本系统</h2><h3 id="OnRenderImage函数——得到渲染后的屏幕图像">OnRenderImage函数——得到渲染后的屏幕图像</h3><ul><li>默认在所有的不透明和透明pass被执行完毕后调用</li><li>可以在OnRenderImage函数前添加ImageEffectOpaque属性来实现在不透明pass执行完毕、透明pass执行之前调用</li></ul><h3 id="Graphics-Blit——完成对渲染纹理的处理">Graphics.Blit——完成对渲染纹理的处理</h3><p>三种声明：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">public static <span class="type">void</span> Blit(Texture src, RenderTexture dest);</span><br><span class="line">public static <span class="type">void</span> Blit(Texture src, RenderTexture dest, Material mat, <span class="type">int</span> pass = <span class="number">-1</span>);</span><br><span class="line">public static <span class="type">void</span> Blit(Texture src, Material mat, <span class="type">int</span> pass = <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><ul><li>src表示源纹理</li><li>dest表示渲染目标纹理，如果为null则结果会直接输出到屏幕上</li><li>mat表示用于渲染的材质</li><li>pass默认为-1，表示会依次调用所有的pass，否则会调用特定索引的pass</li></ul><h3 id="基类——检测兼容性">基类——检测兼容性</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ExecuteInEditMode</span>]</span><br><span class="line">[<span class="meta">RequireComponent(typeof(Camera))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PostEffectsBase</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//这个Base类用于处理子类所共有的check和construct material过程</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在调用start时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">CheckResources</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">bool</span> isSupported = CheckSupport();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isSupported == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NotSupported();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="built_in">bool</span> <span class="title">CheckSupport</span>()<span class="comment">//在CheckResource中被调用来查看当前平台是否支持</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SystemInfo.supportsImageEffects == <span class="literal">false</span> || SystemInfo.supportsRenderTextures == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogWarning(<span class="string">&quot;This Platform does not support image effects of render textures.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">NotSupported</span>()<span class="comment">//在不被当前平台支持时调用</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        enabled = <span class="literal">false</span>;<span class="comment">//禁用这个组件</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        CheckResources();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Material <span class="title">CheckShaderAndCreateMaterial</span>(<span class="params">Shader shader, Material material</span>)<span class="comment">//每个屏幕后处理效果通常需要指定一个shader来创建一个用于处理RT的材质，因此在基类提供这样的方法</span></span></span><br><span class="line"><span class="function">    <span class="comment">//其中参数shader制定了该特效需使用的shader，第二个参数则是用于后期处理的材质</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (shader == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shader.isSupported &amp;&amp; material &amp;&amp; material.shader == shader)<span class="comment">//检查shader的可用性，1.isSupported检查shader在当前GPU上是否被支持 2.material检查material是否为空 3.material.shader == shader检查当前材质的shader是否是传入的shader</span></span><br><span class="line">            <span class="keyword">return</span> material;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!shader.isSupported)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            material = <span class="keyword">new</span> Material(shader);</span><br><span class="line">            material.hideFlags = HideFlags.DontSave;</span><br><span class="line">            <span class="keyword">if</span> (material)</span><br><span class="line">                <span class="keyword">return</span> material;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础后处理效果">基础后处理效果</h2><h3 id="调整屏幕的HSL">调整屏幕的HSL</h3><p>后处理C#脚本：继承自PostEffectBase类的实际效果类模板</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BrightnessSaturationAndContrast</span> : <span class="title">PostEffectsBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//声明该效果需要的shader，并由此创建材质</span></span><br><span class="line">    <span class="keyword">public</span> Shader briSatConShader;</span><br><span class="line">    <span class="keyword">public</span> Material briSatConMaterial;</span><br><span class="line">    <span class="keyword">public</span> Material material<span class="comment">//注意看，这是一个属性</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span><span class="comment">//get函数调用基类的CheckShaderAndCreateMaterial函数来获得对应的材质</span></span><br><span class="line">        <span class="comment">//get是一个属性或索引器的一部分，返回属性的值或索引器的元素，作用是封装访问字段，提供更好的数据安全性和灵活性</span></span><br><span class="line">        &#123;</span><br><span class="line">            briSatConMaterial = CheckShaderAndCreateMaterial(briSatConShader,briSatConMaterial);</span><br><span class="line">            <span class="keyword">return</span> briSatConMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供调整亮度。饱和度和对比度的参数，并用Range属性提供变化区间</span></span><br><span class="line">    [<span class="meta">Range(0.0f, 3.0f)</span>] <span class="keyword">public</span> <span class="built_in">float</span> brightness = <span class="number">1.0f</span>;</span><br><span class="line">    [<span class="meta">Range(0.0f, 3.0f)</span>] <span class="keyword">public</span> <span class="built_in">float</span> saturation = <span class="number">1.0f</span>;</span><br><span class="line">    [<span class="meta">Range(0.0f, 3.0f)</span>] <span class="keyword">public</span> <span class="built_in">float</span> contrast = <span class="number">1.0f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义OnRenderImage来进行真正的特效处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture src, RenderTexture dest</span>)<span class="comment">//屏幕后处理的基础在于得到渲染后的屏幕图像（抓取屏幕），Unity为我们提供了这样一个方便的接口——OnRenderImage函数</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (material != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_Brightness&quot;</span>, brightness);</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_Saturation&quot;</span>,saturation);</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_Contrast&quot;</span>,contrast);</span><br><span class="line">            </span><br><span class="line">            Graphics.Blit(src, dest, material);<span class="comment">//在OnRenderImage函数中通常利用Graphics.Blit函数来完成对Render Texture的处理，src纹理将会传递给shader中名为_MainTex的纹理属性</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(src, dest);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后处理shader：（重点在于fragment shader的处理）</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/PostProcess/BrightnessSaturationAndContrast&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Brightness(&quot;Brightness&quot;, Range(<span class="number">0</span>,<span class="number">3</span>)) = <span class="number">1</span></span><br><span class="line">        _Saturation(&quot;Brightness&quot;, Range(<span class="number">0</span>,<span class="number">3</span>)) = <span class="number">1</span></span><br><span class="line">        _Contrast(&quot;Brightness&quot;, Range(<span class="number">0</span>,<span class="number">3</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Properties可以省略，对于屏幕特效来说，他们使用的材质都是临时创建的</span></span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            half _Brightness;</span><br><span class="line">            half _Saturation;</span><br><span class="line">            half _Contrast;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_img v) <span class="comment">//使用unity内置的appdata_img结构体作为顶点着色器的输入，它只包含了图像处理时必须的顶点坐标和纹理坐标等变量</span></span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityWorldToClipPos(v.vertex);</span><br><span class="line">                o.uv = v.texcoord; <span class="comment">//uv无需再进行变换</span></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed4 renderTex = tex2D(_MainTex, i.uv); <span class="comment">//首先得到对原屏幕图像的采样结果renderTex</span></span><br><span class="line"></span><br><span class="line">                fixed3 finalColor = renderTex.rgb * _Brightness; <span class="comment">//通过Brightness来调整亮度（只需要把原本颜色乘上亮度系数_Brightness即可）</span></span><br><span class="line"></span><br><span class="line">                fixed luminance = <span class="number">0.2125</span> * renderTex.r + <span class="number">0.7154</span> * renderTex.g + <span class="number">0.0721</span> * renderTex.b; <span class="comment">//计算该像素对应的亮度值</span></span><br><span class="line">                fixed3 luminanceColor = fixed3(luminance, luminance, luminance); <span class="comment">//由亮度值创建一个饱和度为0的颜色值</span></span><br><span class="line">                finalColor = lerp(luminanceColor, finalColor, _Saturation); <span class="comment">//进行插值，得到期望饱和度</span></span><br><span class="line"></span><br><span class="line">                fixed3 abgColor = fixed3(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">                finalColor = lerp(abgColor, finalColor, _Contrast);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(finalColor, renderTex.a);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于RGB值计算像素亮度信息：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mi>u</mi><mi>m</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>=</mo><mn>0.2125</mn><mo>∗</mo><mi>r</mi><mtext> </mtext><mo>+</mo><mtext> </mtext><mn>0.7154</mn><mo>∗</mo><mi>g</mi><mtext> </mtext><mo>+</mo><mtext> </mtext><mn>0.0721</mn><mo>∗</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">Luminance = 0.2125 *r \ + \ 0.7154*g \ + \ 0.0721 * b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">Lu</span><span class="mord mathnormal">minan</span><span class="mord mathnormal">ce</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.2125</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.7154</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.0721</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p><h3 id="高斯模糊">高斯模糊</h3><ul><li>原理：利用高斯核进行卷积运算</li></ul><p>C#代码：（注意其中对Render  Texture的内存处理）</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture src, RenderTexture dest</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (material != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> rtW = src.width / downSample;<span class="comment">//降低对原图的采样率，以减少开销；downSample越大性能越好，但是可能会导致图像的像素化</span></span><br><span class="line">            <span class="built_in">int</span> rtH = src.height / downSample;</span><br><span class="line">            </span><br><span class="line">            RenderTexture buffer0 = RenderTexture.GetTemporary(rtW, rtH, <span class="number">0</span>);</span><br><span class="line">            buffer0.filterMode = FilterMode.Bilinear;<span class="comment">//设置纹理的滤波器模式为双线性滤波器</span></span><br><span class="line">            </span><br><span class="line">            Graphics.Blit(src, buffer0);<span class="comment">//把src的render texture写入buffer0中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; iterations; i++)<span class="comment">//通过for循环控制高斯模糊的迭代次数</span></span><br><span class="line">            &#123;</span><br><span class="line">                material.SetFloat(<span class="string">&quot;_BlurSize&quot;</span>, <span class="number">1.0f</span> + i * blurSpread);<span class="comment">//更改用于模糊的像素量</span></span><br><span class="line"></span><br><span class="line">                RenderTexture buffer1 = RenderTexture.GetTemporary(rtW, rtH, <span class="number">0</span>);<span class="comment">//为buffer1分配一个临时RT</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//先处理第一个pass(pass0)--竖直方向的pass</span></span><br><span class="line">                Graphics.Blit(buffer0, buffer1, material,<span class="number">0</span>);</span><br><span class="line">                </span><br><span class="line">                RenderTexture.ReleaseTemporary(buffer0);<span class="comment">//</span></span><br><span class="line">                <span class="comment">/*如果是使用等号赋值，会造成内存泄露，所以在使用=前需要释放buffer0的内存；但是如果是用Graphics.Blit(buffer0,buffer1,...)的话:</span></span><br><span class="line"><span class="comment">                 ①当Graphics.Blit()接受两个参数时，它会将第一个参数（源纹理）复制到第二个参数（目标纹理），并且会自动释放目标纹理原来占用的内存空间。</span></span><br><span class="line"><span class="comment">                 ②当Graphics.Blit()接受三个参数时，它会将第一个参数（源纹理）经过第三个参数（材质）的处理后复制到第二个参数（目标纹理），并且也会自动释放目标纹理原来占用的内存空间*/</span></span><br><span class="line">                buffer0 = buffer1;<span class="comment">//再将buffer1的结果赋给buffer0,此时buffer1和buffer2指向同一个Render Texture</span></span><br><span class="line">                buffer1 = RenderTexture.GetTemporary(rtW, rtH, <span class="number">0</span>);<span class="comment">//所以需要为buffer1新指定一个Render Texture</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//处理第二个pass(pass1)--水平方向的pass</span></span><br><span class="line">                Graphics.Blit(buffer0, buffer1,material,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">                buffer0 = buffer1;<span class="comment">//buffer0和buffer1之后共同指向同一个内存，所以不需要release buffer1</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Graphics.Blit(buffer0, dest);</span><br><span class="line">            RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(src,dest);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Shader代码：</p><p>其中==使用了<strong>CGINCLUDE</strong>来组织代码==，并且在两个pass中分别计算竖直方向和水平方向的卷积</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/PostProcess/GuassianBlur&quot;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//出错的地方：</span></span><br><span class="line">    <span class="comment">// 1.水平方向和竖直方向处理uv坐标时，float2的两个参数位置写错：写水平方向时直接复制了代码改了y-&gt;x，但是没有调换0.0和_MainTex_TexelSize.y * 1.0的位置</span></span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _BlurSize(&quot;Blur Size&quot;, Float) = <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line">        <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">        <span class="comment">//使用CGINCLUDE来组织代码，这些代码不需要包含在任何的Pass语义块中，在使用的时候我们只需要在Pass中直接指定需要使用的顶点着色器和片元着色器函数即可（类似于C++中的头文件）</span></span><br><span class="line">        <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;<span class="comment">//因为要使用相邻像素的坐标</span></span><br><span class="line">        <span class="type">float</span> _BlurSize;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv[<span class="number">5</span>] : TEXCOORD0;<span class="comment">//使用5x5大小的高斯核对原图像进行高斯模糊处理，而一个5x5的高斯核可以拆分成两个大小为5的一维高斯核，因此我们只需要计算5个纹理坐标即可</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//处理竖直方向</span></span><br><span class="line">        v2f vertBlurVertical(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">            half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过把计算采样纹理坐标写在vertex shader中可以减少运算，因为vertex shader-&gt;fragment shader的计算是线性的，所以这样的计算并不会影响计算结果</span></span><br><span class="line">            o.uv[<span class="number">0</span>] = uv;</span><br><span class="line">            o.uv[<span class="number">1</span>] = uv + float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">1.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">2</span>] = uv - float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">1.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">3</span>] = uv + float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">2.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">4</span>] = uv - float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">2.0</span>) * _BlurSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理水平方向</span></span><br><span class="line">        v2f vertBlurHorizontal(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">            half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过把计算采样纹理坐标写在vertex shader中可以减少运算，因为vertex shader-&gt;fragment shader的计算是线性的，所以这样的计算并不会影响计算结果</span></span><br><span class="line">            o.uv[<span class="number">0</span>] = uv;</span><br><span class="line">            o.uv[<span class="number">1</span>] = uv + float2(_MainTex_TexelSize.x * <span class="number">1.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">2</span>] = uv - float2(_MainTex_TexelSize.x * <span class="number">1.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">3</span>] = uv + float2(_MainTex_TexelSize.x * <span class="number">2.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">4</span>] = uv - float2(_MainTex_TexelSize.x * <span class="number">2.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通用的fragment shader</span></span><br><span class="line">        fixed4 fragBlur(v2f i) : SV_Target</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> weight[<span class="number">3</span>] = &#123;<span class="number">0.4026</span>, <span class="number">0.2442</span>, <span class="number">0.0545</span>&#125;;</span><br><span class="line"></span><br><span class="line">            fixed3 sum = tex2D(_MainTex, i.uv[<span class="number">0</span>]).rgb * weight[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//应用卷积核</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">1</span>; it &lt; <span class="number">3</span>; it++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*<span class="number">2</span><span class="number">-1</span>]).rgb * weight[it];</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*<span class="number">2</span>]).rgb * weight[it];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fixed4(sum ,<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        ZTest Always Cull Off ZWrite Off</span><br><span class="line">        </span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            NAME &quot;GAUSSIAN_BLUR_VERTICAL&quot;<span class="comment">//给pass命名，方便在其他地方调用该pass</span></span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vertBlurVertical</span></span><br><span class="line">            <span class="meta">#pragma fragment fragBlur</span></span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            NAME &quot;GAUSSIAN_BLUR_HORIZONTAL&quot;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vertBlurHorizontal</span></span><br><span class="line">            <span class="meta">#pragma fragment fragBlur</span></span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bloom效果">Bloom效果</h3><ul><li>实现原理<ul><li>根据一个阈值提取像素中较亮的区域，将他们存储在一张渲染纹理中，再利用高斯模糊对这张渲染纹理进行模糊处理，模拟光线扩散，再将其和原图像进行混合</li><li>使用多个pass进行处理<ul><li>Pass0：提取高亮部分</li><li>Pass1，2：对亮度进行高斯模糊</li><li>Pass3：Bloom混合效果</li></ul></li></ul></li></ul><p>C#代码整体与高斯模糊相似，唯一区别在于进入高斯模糊处理前使用Pass1提取了亮度大于阈值的部分（后续Blit处理的pass依次往后推）</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"> private void OnRenderImage(RenderTexture src, RenderTexture dest)</span><br><span class="line">    &#123;</span><br><span class="line">        if (material != null)</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">            RenderTexture buffer0 = RenderTexture.GetTemporary(rtW, rtH, 0);</span><br><span class="line">            buffer0.filterMode = FilterMode.Bilinear;</span><br><span class="line">            </span><br><span class="line"><span class="deletion">-           Graphics.Blit(src, buffer0);</span></span><br><span class="line"><span class="addition">+           Graphics.Blit(src,buffer0,material,0);//第一个pass--&gt;处理提取亮度的过程</span></span><br><span class="line"></span><br><span class="line">            for (int i = 1;i &lt; iterations; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line"><span class="addition">+           material.SetTexture(&quot;_Bloom&quot;,buffer0);</span></span><br><span class="line"><span class="deletion">-           Graphics.Blit(buffer0, dest); </span></span><br><span class="line"><span class="addition">+           raphics.Blit(src,dest,material,3); //将高斯模糊处理后的亮度图应用到原图上</span></span><br><span class="line">            RenderTexture.ReleaseTemporary(buffer0);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(src,dest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Shader代码：</p><p>==使用<strong>UsePass</strong>来复用之前高斯模糊的Pass==<strong>(Pass的名称要使用全大写)</strong></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/PostProcess/GuassianBlur&quot;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//出错的地方：</span></span><br><span class="line">    <span class="comment">// 1.水平方向和竖直方向处理uv坐标时，float2的两个参数位置写错：写水平方向时直接复制了代码改了y-&gt;x，但是没有调换0.0和_MainTex_TexelSize.y * 1.0的位置</span></span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _BlurSize(&quot;Blur Size&quot;, Float) = <span class="number">1.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line">        <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">        <span class="comment">//使用CGINCLUDE来组织代码，这些代码不需要包含在任何的Pass语义块中，在使用的时候我们只需要在Pass中直接指定需要使用的顶点着色器和片元着色器函数即可（类似于C++中的头文件）</span></span><br><span class="line">        <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;<span class="comment">//因为要使用相邻像素的坐标</span></span><br><span class="line">        <span class="type">float</span> _BlurSize;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv[<span class="number">5</span>] : TEXCOORD0;<span class="comment">//使用5x5大小的高斯核对原图像进行高斯模糊处理，而一个5x5的高斯核可以拆分成两个大小为5的一维高斯核，因此我们只需要计算5个纹理坐标即可</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//处理竖直方向</span></span><br><span class="line">        v2f vertBlurVertical(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">            half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过把计算采样纹理坐标写在vertex shader中可以减少运算，因为vertex shader-&gt;fragment shader的计算是线性的，所以这样的计算并不会影响计算结果</span></span><br><span class="line">            o.uv[<span class="number">0</span>] = uv;</span><br><span class="line">            o.uv[<span class="number">1</span>] = uv + float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">1.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">2</span>] = uv - float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">1.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">3</span>] = uv + float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">2.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">4</span>] = uv - float2(<span class="number">0.0</span>, _MainTex_TexelSize.y * <span class="number">2.0</span>) * _BlurSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理水平方向</span></span><br><span class="line">        v2f vertBlurHorizontal(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">            half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过把计算采样纹理坐标写在vertex shader中可以减少运算，因为vertex shader-&gt;fragment shader的计算是线性的，所以这样的计算并不会影响计算结果</span></span><br><span class="line">            o.uv[<span class="number">0</span>] = uv;</span><br><span class="line">            o.uv[<span class="number">1</span>] = uv + float2(_MainTex_TexelSize.x * <span class="number">1.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">2</span>] = uv - float2(_MainTex_TexelSize.x * <span class="number">1.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">3</span>] = uv + float2(_MainTex_TexelSize.x * <span class="number">2.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line">            o.uv[<span class="number">4</span>] = uv - float2(_MainTex_TexelSize.x * <span class="number">2.0</span>,<span class="number">0.0</span>) * _BlurSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通用的fragment shader</span></span><br><span class="line">        fixed4 fragBlur(v2f i) : SV_Target</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> weight[<span class="number">3</span>] = &#123;<span class="number">0.4026</span>, <span class="number">0.2442</span>, <span class="number">0.0545</span>&#125;;</span><br><span class="line"></span><br><span class="line">            fixed3 sum = tex2D(_MainTex, i.uv[<span class="number">0</span>]).rgb * weight[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//应用卷积核</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">1</span>; it &lt; <span class="number">3</span>; it++)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*<span class="number">2</span><span class="number">-1</span>]).rgb * weight[it];</span><br><span class="line">                sum += tex2D(_MainTex, i.uv[it*<span class="number">2</span>]).rgb * weight[it];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fixed4(sum ,<span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line">        </span><br><span class="line">        ZTest Always Cull Off ZWrite Off</span><br><span class="line">        </span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            NAME &quot;GAUSSIAN_BLUR_VERTICAL&quot;<span class="comment">//给pass命名，方便在其他地方调用该pass</span></span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vertBlurVertical</span></span><br><span class="line">            <span class="meta">#pragma fragment fragBlur</span></span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            NAME &quot;GAUSSIAN_BLUR_HORIZONTAL&quot;</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vertBlurHorizontal</span></span><br><span class="line">            <span class="meta">#pragma fragment fragBlur</span></span><br><span class="line">            </span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于颜色亮度的边缘检测">基于颜色亮度的边缘检测</h3><p>C#代码中只是简单地对shader中一些数值进行调整：</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EdgeDetection</span> : <span class="title">PostEffectsBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Shader edgeDetectShader;</span><br><span class="line">    <span class="keyword">private</span> Material edgeDetectMaterial = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Material material</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            edgeDetectMaterial = CheckShaderAndCreateMaterial(edgeDetectShader, edgeDetectMaterial);</span><br><span class="line">            <span class="keyword">return</span> edgeDetectMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Range(0.0f, 1.0f)</span>] <span class="keyword">public</span> <span class="built_in">float</span> edgeOnly = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> Color edgeColor = Color.black;</span><br><span class="line">    <span class="keyword">public</span> Color backgroundColor = Color.white;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture src, RenderTexture dest</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (material != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_OnlyEdge&quot;</span>,edgeOnly);</span><br><span class="line">            material.SetColor(<span class="string">&quot;_EdgeColor&quot;</span>,edgeColor);</span><br><span class="line">            material.SetColor(<span class="string">&quot;_BackgroundColor&quot;</span>, backgroundColor);</span><br><span class="line"></span><br><span class="line">            Graphics.Blit(src,dest,material);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(src,dest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shader描边关键在于用卷积核计算该像素周围的亮度差作为梯度（模拟二阶导），并基于梯度进行插值计算</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/PostProcess/EdgeDetection&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _OnlyEdge(&quot;Only Edge&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0</span></span><br><span class="line">        _edgeColor(&quot;Edge Color&quot;, Color) = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        _backgroundColor(&quot;Background Color&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line">            </span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            half4 _MainTex_TexelSize;</span><br><span class="line">            <span class="type">float</span> _OnlyEdge;</span><br><span class="line">            fixed4 _EdgeColor;</span><br><span class="line">            fixed4 _BackgroundColor;</span><br><span class="line"></span><br><span class="line">            struct v2f </span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                half2 uv[<span class="number">9</span>] : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            v2f vert(appdata_img v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">                half2 uv = v.texcoord;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//找到目标像素点及其四周的九个像素点</span></span><br><span class="line">                o.uv[<span class="number">0</span>] = uv + _MainTex_TexelSize.xy * half2(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">                o.uv[<span class="number">1</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">                o.uv[<span class="number">2</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">                o.uv[<span class="number">3</span>] = uv + _MainTex_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">                o.uv[<span class="number">4</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                o.uv[<span class="number">5</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">                o.uv[<span class="number">6</span>] = uv + _MainTex_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">                o.uv[<span class="number">7</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                o.uv[<span class="number">8</span>] = uv + _MainTex_TexelSize.xy * half2( <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed luminance(fixed4 color)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-.2125</span> * color.r + <span class="number">0.7154</span> * color.g + <span class="number">0.0721</span> * color.b;</span><br><span class="line">            &#125;</span><br><span class="line">            half Sobel(v2f i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">const</span> half Gx[<span class="number">9</span>] = &#123;<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>,</span><br><span class="line">                                     <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,</span><br><span class="line">                                     <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">1</span>&#125;;<span class="comment">//水平方向上的卷积核</span></span><br><span class="line">                <span class="keyword">const</span> half Gy[<span class="number">9</span>] = &#123;<span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">-2</span>,  <span class="number">0</span>,  <span class="number">2</span>,</span><br><span class="line">                                    <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>&#125;;<span class="comment">//竖直方向上的卷积核</span></span><br><span class="line">                <span class="comment">//通过卷积核来计算梯度值</span></span><br><span class="line">                half texColor;</span><br><span class="line">                half edgeX = <span class="number">0</span>;</span><br><span class="line">                half edgeY = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> it = <span class="number">0</span>;it &lt; <span class="number">9</span>;it++)</span><br><span class="line">                &#123;</span><br><span class="line">                    texColor = luminance(tex2D(_MainTex,i.uv[it]));</span><br><span class="line">                    edgeX += texColor * Gx[it];</span><br><span class="line">                    edgeY += texColor * Gy[it];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                half edge = <span class="built_in">abs</span>(edgeX) + <span class="built_in">abs</span>(edgeY);<span class="comment">//本来梯度应该是X和Y的平方根，但出于性能考虑，会用绝对值操作来代替开根</span></span><br><span class="line">                <span class="comment">//half edge = 1 - abs(edgeX) - abs(edgeY);//我不知道为什么要用一个OneMinus进行一次反向映射</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> edge;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                half edge = Sobel(i);</span><br><span class="line"></span><br><span class="line">                fixed4 withEdgeColor = lerp( tex2D(_MainTex, i.uv[<span class="number">4</span>]), _EdgeColor,edge);</span><br><span class="line">                fixed4 onlyEdgeColor = lerp( _BackgroundColor, _EdgeColor, edge);</span><br><span class="line">                <span class="keyword">return</span> lerp(withEdgeColor,onlyEdgeColor,_OnlyEdge);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    FallBack Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>使用深度与法线纹理</h1><h2 id="获取深度与法线纹理">获取深度与法线纹理</h2><h3 id="Unity中的深度和法线纹理">Unity中的深度和法线纹理</h3><p>深度纹理里的深度范围是[0,1]，且因为这些深度来源于NDC，所以通常是非线性分布的</p><p>Unity对深度纹理的获取方法：</p><ul><li>延迟渲染：直接访问GBuffer</li><li>无法直接获取深度缓存时：深度和法线纹理通过一个单独的Pass渲染获得。Unity会使用Shader Replacement着色器替换技术选择那些渲染类型（RenderType）为Opaque的物体，判断他们使用的渲染队列是否小于等于2500（内置的Background、Geometry、AlphaTest均在内），如果满足条件，就把他们渲染到深度和法线纹理中。因此，<strong>想要让物体能出现在深度和法线纹理中，就必须在Shader中设置正确的RenderType（&lt;=2500)</strong></li><li>可以选择让摄像机生成一张深度纹理或深度+法线纹理<ul><li>生成一张深度纹理：Unity会直接获取深度缓存，或是使用着色器替换技术，选取需要的不透明物体，并使用它投射阴影时使用的Pass（“LightMode” = “ShadowCaster”）来得到深度纹理。如果shader中不包含这样一个Pass，那这个物体就不会出现在深度纹理中（也不会投射阴影）</li><li>生成深度+法线纹理：Unity会创建一张和屏幕分辨率相同、精度为32（8*4）位的纹理，其中观察空间下的法线信息会被编码进纹理的R、G通道中，深度信息会被编码进B、A通道中（在获取法线纹理时，如果是延迟渲染，直接读取GBuffer即可；如果是前向渲染，unity会使用一个单独的Pass把场景再渲染一遍）</li></ul></li></ul><h3 id="如何获取">如何获取</h3><p>设置摄像机的depthTextureMode</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">camera.depthTextureMode = DepthTextureMode.DepthNormals;<span class="comment">//获取深度+法线纹理</span></span><br><span class="line">camera.depthTextureMode = DepthTextureMode.Depth;<span class="comment">//获取深度纹理</span></span><br></pre></td></tr></table></figure><blockquote><p>摄像机的depthTextureMode默认为DepthTextureMode.Depth</p></blockquote><p>shader中采样深度纹理</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> sampler = tex2D(_CameraDepthNormalsTexture, i.uv);<span class="comment">//绝大多数情况直接使用tex2D函数即可</span></span><br><span class="line"><span class="type">float</span> d = SMAPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv);<span class="comment">//Unity提供的用于处理平台造成的差异的统一的宏</span></span><br></pre></td></tr></table></figure><p>当通过纹理采样获得深度值后，这些深度值往往是非线性的，这种非线性来自于透视投影使用的裁剪矩阵。</p><p>不过Unity提供了LinearEyeDepth和Linear01Depth两个辅助函数：</p><ul><li>LinearEyeDepth负责把深度纹理的采样结果转换到视角空间下的深度值</li><li>Linear01Depth会返回一个范围在[0,1]的线性深度值</li></ul><p>如果我们需要获得深度+法线纹理，Unity提供了DecodeDepthNormal来为我们获得的采样结果进行解码：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">inline <span class="type">void</span> DecodeDepthNormal(float4 enc, <span class="keyword">out</span> <span class="type">float</span> depth, <span class="keyword">out</span> float3 normal)</span><br><span class="line">&#123;</span><br><span class="line">    depth = DecodeFloatRG(enc.zw);</span><br><span class="line">    normal = DecodeViewNormalStereo(enc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获得的深度值是[0,1]的线性深度值</li><li>得到的法线是视角空间下的法线方向</li></ul><h2 id="基于深度和法线的边缘检测">基于深度和法线的边缘检测</h2><p>C#中添加了控制采样距离的参数，和控制对深度和法线进行边缘检测时的灵敏度参数</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Unity.VisualScripting;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EdgeDetectionWithDepthAndNormal</span> : <span class="title">PostEffectsBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Shader EdgeDetectionShader;</span><br><span class="line">    <span class="keyword">private</span> Material EdgeDetectionMaterial = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Material material</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            EdgeDetectionMaterial = CheckShaderAndCreateMaterial(EdgeDetectionShader, EdgeDetectionMaterial);</span><br><span class="line">            <span class="keyword">return</span> EdgeDetectionMaterial;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Range(0.0f, 1.0f)</span>] <span class="keyword">public</span> <span class="built_in">float</span> EdgeOnly = <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> Color EdgeColor = Color.black;</span><br><span class="line">    <span class="keyword">public</span> Color BackgroundColor = Color.white;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> sampleDistance = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> sensitivityDepth = <span class="number">1.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> sensitivityNormal = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GetComponent&lt;Camera&gt;().depthTextureMode = DepthTextureMode.DepthNormals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ImageEffectOpaque</span>]<span class="comment">//标明该属性实现在渲染半透明前就调用此函数进行描边</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture src, RenderTexture dest</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (material != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_EdgeOnly&quot;</span>, EdgeOnly);</span><br><span class="line">            material.SetColor(<span class="string">&quot;_EdgeColor&quot;</span>,EdgeColor);</span><br><span class="line">            material.SetColor(<span class="string">&quot;_BackgroundColor&quot;</span>,BackgroundColor);</span><br><span class="line">            material.SetFloat(<span class="string">&quot;_SampleDistance&quot;</span>,sampleDistance);</span><br><span class="line">            material.SetVector(<span class="string">&quot;_Sensitivity&quot;</span>,<span class="keyword">new</span> Vector4(sensitivityNormal,sensitivityDepth,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">            </span><br><span class="line">            Graphics.Blit(src,dest,material);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Graphics.Blit(src,dest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>其中在OnRenderImage前添加了ImageEffectOpaque属性，实现在渲染半透明前就调用此函数（不给半透明物体描边）</p></blockquote><p>shader中则是使用了Roberts算子，其本质是计算左上角和右下角的差值，乘以右上角和左下角的差值，以此作为评估边缘的依据</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230612165636754.png" alt=""></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/PostProcess/EdgeDetectionWithDepthAndNormal&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Base (RGB)&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _EdgeColor(&quot;Edge Color&quot;,Color) = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        _BackgroundColor(&quot;Background Color&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _SampleDistance(&quot;Sample Distance&quot;, Float) = <span class="number">1.0</span></span><br><span class="line">        _Sensitivity(&quot;Sensitivity(ND00)&quot;,Vector) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _EdgeOnly(&quot;Edge Only&quot;, Float) = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        CGINCLUDE</span><br><span class="line">        <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">        half4 _MainTex_TexelSize;</span><br><span class="line">        fixed4 _EdgeColor;</span><br><span class="line">        fixed4 _BackgroundColor;</span><br><span class="line">        <span class="type">float</span> _SampleDistance;</span><br><span class="line">        vector _Sensitivity;</span><br><span class="line">        <span class="type">sampler2D</span> _CameraDepthNormalsTexture;</span><br><span class="line">        fixed _EdgeOnly;</span><br><span class="line"></span><br><span class="line">        struct v2f</span><br><span class="line">        &#123;</span><br><span class="line">            float4 pos : SV_POSITION;</span><br><span class="line">            half2 uv[<span class="number">5</span>] : TEXCOORD0;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        v2f vert(appdata_img v)</span><br><span class="line">        &#123;</span><br><span class="line">            v2f o;</span><br><span class="line">            o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">            half2 uv = v.texcoord;</span><br><span class="line">            o.uv[<span class="number">0</span>] = uv;</span><br><span class="line"></span><br><span class="line">            <span class="meta">#if UNITY_UV_STARTS_AT_TOP</span></span><br><span class="line">            <span class="keyword">if</span> (_MainTex_TexelSize.y &lt; <span class="number">0</span>)</span><br><span class="line">                uv.y = <span class="number">1</span> - uv.y;</span><br><span class="line">            <span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">            o.uv[<span class="number">1</span>] = uv + _MainTex_TexelSize * half2(<span class="number">1</span>, <span class="number">1</span>) * _SampleDistance;</span><br><span class="line">            o.uv[<span class="number">2</span>] = uv + _MainTex_TexelSize * half2(<span class="number">-1</span>, <span class="number">-1</span>) * _SampleDistance;</span><br><span class="line">            o.uv[<span class="number">3</span>] = uv + _MainTex_TexelSize * half2(<span class="number">1</span>, <span class="number">-1</span>) * _SampleDistance;</span><br><span class="line">            o.uv[<span class="number">4</span>] = uv + _MainTex_TexelSize * half2(<span class="number">-1</span>, <span class="number">1</span>) * _SampleDistance;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        half CheckSame(half4 center, half4 <span class="keyword">sample</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用Roberts算子进行边缘检测</span></span><br><span class="line"></span><br><span class="line">            half2 centerNormal = center.xy;</span><br><span class="line">            <span class="type">float</span> centerDepth = DecodeFloatRG(center.zw);</span><br><span class="line">            half2 sampleNormal = <span class="keyword">sample</span>.xy;</span><br><span class="line">            <span class="type">float</span> sampleDepth = DecodeFloatRG(<span class="keyword">sample</span>.zw);</span><br><span class="line"></span><br><span class="line">            half2 diffNormal = <span class="built_in">abs</span>(centerNormal - sampleNormal) * _Sensitivity.x;</span><br><span class="line">            <span class="type">int</span> isSameNormal = (diffNormal.x + diffNormal.y) &lt; <span class="number">0.1</span>;</span><br><span class="line">            half2 diffDepth = <span class="built_in">abs</span>(centerDepth - sampleDepth) * _Sensitivity.y;</span><br><span class="line">            <span class="type">int</span> isSameDepth = <span class="built_in">abs</span>(diffDepth.x + diffDepth.y) &lt; <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (isSameDepth * isSameNormal) ? <span class="number">1.0</span> : <span class="number">0.0</span>; <span class="comment">//如果法线和深度都满足差距极小，则不加描边；否则进行描边处理</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fixed4 fragRobertsCrossDepthAndNormal(v2f i) : SV_Target</span><br><span class="line">        &#123;</span><br><span class="line">            half4 sample1 = tex2D(_CameraDepthNormalsTexture, i.uv[<span class="number">1</span>]);</span><br><span class="line">            half4 sample2 = tex2D(_CameraDepthNormalsTexture, i.uv[<span class="number">2</span>]);</span><br><span class="line">            half4 sample3 = tex2D(_CameraDepthNormalsTexture, i.uv[<span class="number">3</span>]);</span><br><span class="line">            half4 sample4 = tex2D(_CameraDepthNormalsTexture, i.uv[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">            half edge = <span class="number">1.0</span>;</span><br><span class="line">            edge *= CheckSame(sample1, sample2);</span><br><span class="line">            edge *= CheckSame(sample3, sample4);</span><br><span class="line"></span><br><span class="line">            fixed4 withEdgeColor = lerp(_EdgeColor, tex2D(_MainTex, i.uv[<span class="number">0</span>]), edge);</span><br><span class="line">            fixed4 onlyEdgeColor = lerp(_EdgeColor, _BackgroundColor, edge);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> lerp(withEdgeColor, onlyEdgeColor, _EdgeOnly);</span><br><span class="line">        &#125;</span><br><span class="line">        ENDCG</span><br><span class="line"></span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always ZWrite Off Cull Off</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment fragRobertsCrossDepthAndNormal</span></span><br><span class="line">            ENDCG</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">基础动画、屏幕后处理、使用深度和法线纹理</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
    <category term="Unity" scheme="https://himoqiuhan.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>《Unity Shader入门精要》笔记（二）</title>
    <link href="https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-2/"/>
    <id>https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-2/</id>
    <published>2023-03-31T16:00:01.000Z</published>
    <updated>2023-06-15T08:12:11.027Z</updated>
    
    <content type="html"><![CDATA[<h1>光照进阶</h1><h2 id="Unity的渲染路径">Unity的渲染路径</h2><h3 id="LightMode标签支持的渲染路径设置选项">LightMode标签支持的渲染路径设置选项</h3><p><code>Tags &#123; &quot;LightMode&quot; = &quot;----&quot;&#125;</code></p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">渲染路径</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Always</td><td style="text-align:center">所有</td><td style="text-align:center">该Pass总是被渲染，但是不会计算任何光照</td></tr><tr><td style="text-align:center">ForwardBase</td><td style="text-align:center">前向渲染</td><td style="text-align:center">环境光、最重要的平行光、逐顶点光源/SH光源、Lightmaps</td></tr><tr><td style="text-align:center">ForwardAdd</td><td style="text-align:center">前向渲染</td><td style="text-align:center">额外的逐像素光照</td></tr><tr><td style="text-align:center">Deferred</td><td style="text-align:center">延迟渲染</td><td style="text-align:center">渲染到GBuffer</td></tr><tr><td style="text-align:center">ShadowCaster</td><td style="text-align:center">前向、延迟</td><td style="text-align:center">将物体的深度信息渲染到shadowmap或一张深度纹理中</td></tr><tr><td style="text-align:center">PrepassBase</td><td style="text-align:center">(Legyacy)遗留的延迟渲染</td><td style="text-align:center">渲染法线eh高光反射的指数部分</td></tr><tr><td style="text-align:center">PrepassFinal</td><td style="text-align:center">(Legacy)遗留的延迟渲染</td><td style="text-align:center">通过合并纹理、光照和自发光来渲染得到最后的颜色</td></tr><tr><td style="text-align:center">Vertex、VertexLMRGBM、VertexLM</td><td style="text-align:center">(Legacy)遗留的顶点照明渲染</td><td style="text-align:center"></td></tr></tbody></table><h3 id="Unity中的前向渲染">Unity中的前向渲染</h3><ul><li><p>前向渲染中有3中处理光照（照亮物体）的方式：逐顶点处理、逐像素处理、SH（Spherical Harmonics）球谐函数处理</p><p>如何决定一个光源使用哪种处理方式：</p><ul><li>光源类型</li><li>光源的渲染模式：Important/Not Important</li></ul></li><li><p>前向渲染中的2种Pass</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials7.png" alt=""></p><ul><li>Base Pass<ul><li>渲染的光源默认支持阴影</li><li>渲染最重要的平行光</li><li>自发光和环境光也在其中，因为只希望计算一次</li></ul></li><li>Additional Pass<ul><li>渲染的光源默认没有阴影效果，但是可以使用<code>#pragma multi_compile_fwdadd_fullshadows</code>代替<code>#pragma multi_compile_fwdadd</code>来获得阴影效果</li><li>开启和设置了混合模式，与上一次的光照结果在帧缓存中进行叠加，通常选择Blend One One</li></ul></li><li>对于前向渲染，一个Unity Shader通常会定义一个Base Pass和一个Additional Pass，一个Base Pass只会被执行一次；而一个Additional Pass会根据影响该物体的<strong>其他逐像素光源</strong>的数目被多次调用，即每个逐像素光源会执行一个Additional Pass（通常是4个逐像素光源）</li></ul></li></ul><h3 id="Unity中的顶点照明渲染">Unity中的顶点照明渲染</h3><p>通常在一个Pass中就可以完成对物体的渲染，最多访问到8个逐顶点光源</p><ul><li>要求最少、运算性能最高</li><li>效果最差</li><li>仅仅是前向渲染的一个子集</li></ul><h3 id="Unity中的延迟渲染">Unity中的延迟渲染</h3><ul><li>原理：<ul><li>第一个Pass中不进行任何的光照计算，仅仅计算哪些片元可见（深度缓冲技术），当发现一个片元可见，就把他的相关信息存储到GBuffer中；<ul><li>漫反射颜色、高光反射颜色、平滑度、法线、自发光和深度信息</li><li>对每个物体来说，这个Pass<strong>只执行一次</strong></li></ul></li><li>然后，第二个Pass中利用GBuffer中的各个片元信息进行<strong>真正的光照计算</strong></li></ul></li><li><strong>每个光源</strong>都可以按<strong>逐像素</strong>的方式处理</li><li>默认的GBuffer包含以下几个Render Texture：<ul><li>TR</li><li>RT0：RGB存漫反射颜色，A没有被使用</li><li>RT1：RGB存高光反射颜色，A存高光反射指数</li><li>RT2：RGB存法线，A没有被使用</li><li>RT3：存自发光+Lightmap+反射探针Reflection Probe</li><li>深度缓冲和模板缓冲</li></ul></li></ul><h2 id="前向渲染代码示例">前向渲染代码示例</h2><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/AdvancedLighting/ForwardRendering&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _ColorTint(&quot;Color Tint&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _SpecularColor(&quot;Specular Color&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(&quot;Gloss&quot;,Range(<span class="number">8.0</span>,<span class="number">256.0</span>)) = <span class="number">20.0</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Base Pass: Directional light &amp; Ambient light</span></span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdbase //声明变体，用于保证unity可以为对应类型的pass生成所有需要的shader变种</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vert </span></span><br><span class="line">            <span class="meta">#pragma fragment frag </span></span><br><span class="line">            <span class="meta">#include &quot;Lighting.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed4 _ColorTint;</span><br><span class="line">            fixed4 _SpecularColor;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldPos : TEXCOORD0;</span><br><span class="line">                float3 worldNormal : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld,v.vertex.xyz);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal.xyz);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldLightDir = <span class="built_in">normalize</span>(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">                fixed3 worldNormal = <span class="built_in">normalize</span>(i.worldNormal);</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * _ColorTint.rgb;</span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _ColorTint.rgb * saturate(<span class="built_in">dot</span>(worldLightDir,worldNormal));</span><br><span class="line"></span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(worldLightDir + <span class="built_in">normalize</span>(_WorldSpaceCameraPos.xyz - i.worldPos));</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _SpecularColor.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(worldNormal,halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">                fixed atten = <span class="number">1.0</span>;<span class="comment">//定向光光照衰减始终为1</span></span><br><span class="line">                <span class="keyword">return</span> fixed4(ambient + (diffuse + specular)*atten,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Additional Pass: Other Pixel Light</span></span><br><span class="line">            Tags&#123;&quot;LightMode&quot;=&quot;ForwardAdd&quot;&#125;</span><br><span class="line">            Blend One One<span class="comment">//混合模式为one one</span></span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdadd //声明变体为forwardadd</span></span><br><span class="line">            <span class="meta">#pragma vertex vert </span></span><br><span class="line">            <span class="meta">#pragma fragment frag </span></span><br><span class="line">            <span class="meta">#include &quot;Lighting.cginc&quot;</span></span><br><span class="line">            <span class="meta">#include &quot;AutoLight.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed3 _ColorTint;</span><br><span class="line">            fixed3 _SpecularColor;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldPos : TEXCOORD0;</span><br><span class="line">                float3 worldNormal : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex.xyz);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal.xyz);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = <span class="built_in">normalize</span>(i.worldNormal);</span><br><span class="line">                <span class="meta">#ifdef USING_DIRECTIONAL_LIGHT</span></span><br><span class="line">                    fixed3 worldLightDir = <span class="built_in">normalize</span>(_WorldSpaceLightPos0.xyz);</span><br><span class="line">                <span class="meta">#else</span></span><br><span class="line">                    fixed3 worldLightDir = <span class="built_in">normalize</span>(_WorldSpaceLightPos0.xyz - i.worldPos);</span><br><span class="line">                <span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * _ColorTint.rgb * saturate(<span class="built_in">dot</span>(worldLightDir,worldNormal));</span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(worldLightDir + <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(i.worldPos)));</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _SpecularColor.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(halfDir,worldNormal)),_Gloss);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//计算光照衰减</span></span><br><span class="line">                <span class="meta">#ifdef USING_DIRECTIONAL_LIGHT</span></span><br><span class="line">fixed atten = <span class="number">1.0</span>;<span class="comment">//如果是定向光则光照衰减为1</span></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">                    <span class="comment">//使用一张纹理作为查找表（Look Up Table--LUT）来获得光照衰减值</span></span><br><span class="line"><span class="meta">#if defined (POINT)//对点光源</span></span><br><span class="line">                        <span class="comment">//首先需要得到该点在光源空间的位置来读取LightTexture中的光照衰减值</span></span><br><span class="line">    float3 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, <span class="number">1</span>)).xyz;</span><br><span class="line">                        <span class="comment">//使用光源空间中顶点距离的平方来对纹理采样</span></span><br><span class="line">                            <span class="comment">//光源空间以光源为原点</span></span><br><span class="line">                            <span class="comment">//只查询LightTexture的对角线上的值（通过光源视角的深度去查询2D纹理）</span></span><br><span class="line">    fixed atten = tex2D(_LightTexture0, <span class="built_in">dot</span>(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;</span><br><span class="line">    <span class="meta">#elif defined (SPOT)//对聚光灯</span></span><br><span class="line">    float4 lightCoord = mul(unity_WorldToLight, float4(i.worldPos, <span class="number">1</span>));</span><br><span class="line">    fixed atten = (lightCoord.z &gt; <span class="number">0</span>) * tex2D(_LightTexture0, lightCoord.xy / lightCoord.w + <span class="number">0.5</span>).w * tex2D(_LightTextureB0, <span class="built_in">dot</span>(lightCoord, lightCoord).rr).UNITY_ATTEN_CHANNEL;</span><br><span class="line">    <span class="meta">#else</span></span><br><span class="line">        fixed atten = <span class="number">1.0</span>;</span><br><span class="line">    <span class="meta">#endif</span></span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4((diffuse + specular)*atten,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="衰减与阴影">衰减与阴影</h2><h3 id="光照衰减">光照衰减</h3><ul><li><p>用于光照衰减的纹理（如上代码实例内的Look-up Table）</p></li><li><p>使用数学公式计算衰减值</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">fixed <span class="built_in">distance</span> = lengh(_WorldSpaceLightPos0.xyz - i.worldPos.xyz);</span><br><span class="line">atten = <span class="number">1.0</span> / <span class="built_in">distance</span>; <span class="comment">//线性衰减</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="阴影">阴影</h3><ul><li><p>阴影的实现</p><ul><li><p>Shadow Map：将摄像机放到光源的位置，摄像机看不到的地方就是阴影</p></li><li><p>SSM（ScreenSpace Shadow Map）</p><p>根据光源的阴影映射纹理和摄像机的深度纹理来获得屏幕空间的阴影图（将摄像机深度转换到光源空间，与光源的阴影映射纹理进行比较，如果转换过去的深度更高则说明这个表面可见但是处于光源的阴影中，以此来得到屏幕空间的阴影图）</p></li></ul></li><li><p>一个物体接收其他物体投射的阴影，以及向其他物体投射阴影是两个过程</p><ul><li>接收阴影：在shader中对阴影映射纹理（包括屏幕空的阴影图）进行采样，把采样结果和最后的光照结果相乘来产生阴影效果</li><li>投射阴影：把该物体加入光源的阴影映射纹理的计算中，从而让其他物体在对阴影映射纹理采用时可以得到该物体的相关信息。在Unity中，这个过程是通过为该物体执行LightMode为ShadowCaster的Pass来实现的。如果使用SSM，Unity还会使用这个Pass生成一张摄像机的深度纹理。</li></ul></li></ul><h3 id="阴影的实现">阴影的实现</h3><ul><li><p><strong>让物体投射阴影：</strong></p><ul><li><p>builtin-shaders-xxx-&gt;DefaultResourcesExtra-&gt;Normal-VertexLit.shader中的Shadow Caster：</p><p>实际目的就是把深度信息写入RenderTarget中</p></li></ul><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Pass to render object as a shadow caster</span></span><br><span class="line">Pass &#123;</span><br><span class="line">    Name &quot;Shadow Caster&quot;</span><br><span class="line">    Tags &#123; &quot;LightMode&quot; = &quot;ShadowCaster&quot;&#125;</span><br><span class="line">    </span><br><span class="line">    CGPROGRAM</span><br><span class="line">    <span class="meta">#pragma vertex vert</span></span><br><span class="line">    <span class="meta">#pragma fragment frag</span></span><br><span class="line">    <span class="meta">#pragma multi_compile_shadowCaster</span></span><br><span class="line">    <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line">        </span><br><span class="line">    struct v2f &#123;</span><br><span class="line">        V2F_SHADOW_CASTER;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    v2f vert( appdata_base v) </span><br><span class="line">    &#123;</span><br><span class="line">        v2f o;</span><br><span class="line">        TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    float4 frag( v2f i ) : SV_Target</span><br><span class="line">    &#123;</span><br><span class="line">        SHADOW_CASTER_FRAGMENT(i)</span><br><span class="line">    &#125;</span><br><span class="line">    ENDCG</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>让物体接收阴影：<strong>使用阴影三剑客</strong>SHADOW_COORDS</strong>、<strong>TRANSFER_SHADOW</strong>、<strong>SHADOW_ATTENUATION</strong></p><ul><li><p>首先需要在vertex shader的输出结构体v2f中添加一个内置的宏<strong>SHADOW_COORDS</strong>：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">struct v2f &#123;</span><br><span class="line">    float4 pos : SV_POSITION;</span><br><span class="line">    float3 worldNormal : TEXCOORD0;</span><br><span class="line">    float3 worldPos : TEXCOORD1;</span><br><span class="line">    SHADOW_COORDS(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宏内部所填数字表示存贮阴影贴图纹理坐标所用的插值寄存器，一般使用下一个未被使用的插值寄存器</p></li><li><p>然后在vertex shader返回前添加内置宏<strong>TRANSFER_SHADOW</strong>：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">v2f vert ( a2v v )</span><br><span class="line">&#123;</span><br><span class="line">    v2f <span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Pass shadow coordinates to pixel shader</span></span><br><span class="line">        TRANSFER_SHADOW(o);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个宏用于在顶点着色器中计算上一步中声明的阴影纹理坐标</p></li><li><p>接着在fragment shader中计算阴影值使用内置宏<strong>SHADOW_ATTENUATION</strong>：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Use shadow coordinates to sample shadow map</span></span><br><span class="line">fixed shadow = SHADOW_ATTENUATION(i);</span><br></pre></td></tr></table></figure></li><li><p>注意：为了确保宏能正确工作，需要保证自定义的变量名和这些宏中使用的变量名相同：a2v结构体中的顶点坐标变量名必须是<strong>vertex</strong>，顶点着色器的输入结构体v2f必须命名为<strong>v</strong>，且v2f中的顶点位置必须命名为<strong>pos</strong></p></li></ul></li></ul><h3 id="使用内置函数实现衰减和阴影">使用内置函数实现衰减和阴影</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//宏UNITY_LIGHT_ATTENUATION既计算了光照衰减atten又计算了阴影shadow,并且融合在最终的atten中</span></span><br><span class="line">UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br></pre></td></tr></table></figure><p>宏UNITY_LIGHT_ATTENUATION源码：</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials8.png" alt="自己定义的destName同时包含了衰减和阴影"></p><h3 id="AlphaBlendShadow">AlphaBlendShadow</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/AdvancedLighting/AlphaBlendShadow&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(&quot;Specular Color&quot;, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(&quot;Gloss&quot;, Range(<span class="number">8</span>,<span class="number">256</span>)) = <span class="number">20</span></span><br><span class="line">        _AlphaScale(&quot;Alpha Scale&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span></span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line">        BlendOp add </span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">        ZWrite Off</span><br><span class="line">        </span><br><span class="line">        UsePass &quot;Legacy Shaders/VertexLit/SHADOWCASTER&quot;</span><br><span class="line">        </span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            Cull front </span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdbase</span></span><br><span class="line">            <span class="meta">#pragma vertex vert </span></span><br><span class="line">            <span class="meta">#pragma fragment frag </span></span><br><span class="line">            <span class="meta">#include  &quot;Lighting.cginc&quot;</span></span><br><span class="line">            <span class="meta">#include &quot;AutoLight.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            <span class="type">float</span> _AlphaScale;</span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(<span class="number">3</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = <span class="built_in">normalize</span>(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = <span class="built_in">normalize</span>(UnityWorldSpaceLightDir(i.worldPos)).xyz;</span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                </span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(<span class="built_in">dot</span>(worldNormal,worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 worldViewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(worldViewDir + worldLightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(worldNormal,halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fixed3 color = ambient + (diffuse + specular)*atten;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(color,texColor.a*_AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            Cull back</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma multi_compile_fwdbase nolightmap nodirlightmap nodynlightmap novertexlight</span></span><br><span class="line">            <span class="meta">#pragma multi_compile_RECEIVE_SHADOW_ON</span></span><br><span class="line">            <span class="meta">#pragma vertex vert </span></span><br><span class="line">            <span class="meta">#pragma fragment frag </span></span><br><span class="line">            <span class="meta">#include  &quot;Lighting.cginc&quot;</span></span><br><span class="line">            <span class="meta">#include &quot;AutoLight.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed4 _Color;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            <span class="type">float</span> _AlphaScale;</span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">                float2 uv : TEXCOORD2;</span><br><span class="line">                SHADOW_COORDS(<span class="number">3</span>)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                TRANSFER_SHADOW(o);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldNormal = <span class="built_in">normalize</span>(i.worldNormal);</span><br><span class="line">                fixed3 worldLightDir = <span class="built_in">normalize</span>(UnityWorldSpaceLightDir(i.worldPos)).xyz;</span><br><span class="line">                fixed4 texColor = tex2D(_MainTex, i.uv);</span><br><span class="line">                fixed3 albedo = texColor.rgb * _Color.rgb;</span><br><span class="line">                </span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(<span class="built_in">dot</span>(worldNormal,worldLightDir));</span><br><span class="line"></span><br><span class="line">                fixed3 worldViewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(worldViewDir + worldLightDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(worldNormal,halfDir)),_Gloss);</span><br><span class="line"></span><br><span class="line">                UNITY_LIGHT_ATTENUATION(atten, i, i.worldPos);</span><br><span class="line"></span><br><span class="line">                fixed shadow = SHADOW_ATTENUATION(i);</span><br><span class="line"></span><br><span class="line">                fixed3 color = ambient + (diffuse + specular)*atten*shadow;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(color,texColor.a*_AlphaScale);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>纹理进阶</h1><h2 id="Cubemap与环境反射、折射">Cubemap与环境反射、折射</h2><h3 id="在Unity中创建Cubemap">在Unity中创建Cubemap</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Unity提供的Camera.RenderToCubemap完成</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnWizardCreate</span> ()</span> &#123;</span><br><span class="line"><span class="comment">//创建用于渲染的摄像机</span></span><br><span class="line">    GameObject go = <span class="keyword">new</span> GameObject( <span class="string">&quot;CubemapCamera&quot;</span>);</span><br><span class="line">go.AddComponent&lt;Camera&gt;();</span><br><span class="line">    <span class="comment">//将摄像机放置到待渲染位置renderFromPosition对象的位置</span></span><br><span class="line">go.transform.position = renderFromPosition.position;</span><br><span class="line">    <span class="comment">//渲染Cubemap</span></span><br><span class="line">go.GetComponent&lt;Camera&gt;().RenderToCubemap(cubemap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁临时创建的摄像机</span></span><br><span class="line">DestroyImmediate( go );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建一个空的GameObject对象作为渲染到位置</li><li>新建一个专门用于存储的立方体纹理（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>Create</mtext><mo>→</mo><mtext>Legacy</mtext><mo>→</mo><mtext>Cubemap</mtext></mrow><annotation encoding="application/x-tex">\text{Create}\rightarrow\text{Legacy}\rightarrow\text{Cubemap}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord text"><span class="mord">Create</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Legacy</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Cubemap</span></span></span></span></span>），同时为了让脚本能够顺利将图像渲染到该立方体纹理中，需要在他的面板中勾选<strong>Readable</strong>选项</li><li>从Unity菜单栏选择<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>GameObejct</mtext><mo>→</mo><mtext>Render into Cubemap</mtext></mrow><annotation encoding="application/x-tex">\text{GameObejct}\rightarrow\text{Render into Cubemap}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">GameObejct</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord text"><span class="mord">Render into Cubemap</span></span></span></span></span>，打开脚本中实现的用于渲染立方体纹理的窗口，并把低1步的GameObject和第2步的创建的Cubemap分别拖拽到窗口中的<strong>Render From Position</strong>和<strong>Cubemap</strong></li><li>单击**Render!**按钮即可</li></ol><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230610135337391.png" alt=""></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230610135446285.png" alt="image-20230610135446285" style="zoom:50%;" /><p>需要注意的是，我们需要为Cubemap设置大小，即<strong>Face Size</strong>选项，Face Size值越大，渲染出来的立方体纹理分辨率越大，可能效果越好，但是需要占用的内存越大</p><h3 id="环境映射">环境映射</h3><h4 id="反射">反射</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.需要在Properties内声明Cube类型的属性</span></span><br><span class="line">Properties</span><br><span class="line">&#123;</span><br><span class="line">_Cubemap(&quot;Reflection Cubemap&quot; ,<span class="number">3</span>D) = &quot;_Skybox&quot;&#123;&#125; <span class="comment">//3D类型的属性的默认值为&quot;_Skybox&quot;&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.在CG代码中声明该属性</span></span><br><span class="line">CGPROGRAM</span><br><span class="line">samplerCUBE _Cubemap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.为了节省性能，我们在vertex内计算反射的光线，通过插值计算器将反射的方向传递给fragment。所以需要在v2内声明反射方向</span></span><br><span class="line">struct v2f</span><br><span class="line">&#123;</span><br><span class="line">float3 worldRefl : TEXCOORDn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.在vertex中利用reflect函数计算世界空间下的反射方向</span></span><br><span class="line">v2f vert(a2v v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">o.worldRefl = <span class="built_in">reflect</span>(-o.worldViewDir, o.worldNormal);</span><br><span class="line"><span class="comment">//reflect函数第一个参数为入射光的方向，第二个参数为法线所在直线</span></span><br><span class="line"><span class="comment">//入射方向和反射方向是同向的，即如果入射方向是指向入射点，那么反射方向就是由入射点指出。所以此处worldViewDir要加负号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.在fragment中读取CUBE贴图</span></span><br><span class="line">fixed4 frag(v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">fixed3 reflection = texCUBE(_Cubemap, i.worldRefl).rgb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="折射">折射</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//与反射大同小异，唯一的区别在于vertex中函数调用的不同</span></span><br><span class="line">v2f vert(a2v v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">o.worldRefr = <span class="built_in">refract</span>(-<span class="built_in">normalize</span>(o.worldViewDir), <span class="built_in">normalize</span>(o.worldNormal), _RefractRatio);</span><br><span class="line"><span class="comment">//refrect函数第一个参数为入射光的方向，第二个参数为法线所在直线，第三个参数为折射率</span></span><br><span class="line"><span class="comment">//入射方向和折射方向是同向的，即如果入射方向是指向入射点，那么折射方向就是由入射点指出。所以此处worldViewDir要加负号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="菲涅尔反射">菲涅尔反射</h4><p><strong>万物均有菲涅尔</strong></p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials9.png" alt="菲涅尔的常见计算模型"></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本质上就是在frag内通过菲涅尔系数对环境反射内容与漫反射内容之间进行插值计算</span></span><br><span class="line">fixed4 frag(v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">fixed fresnel = _FresnelScale + (<span class="number">1</span> - _FresnelScale) * <span class="built_in">pow</span>(<span class="number">1</span> - <span class="built_in">dot</span>(worldNormal, worldViewDir), <span class="number">5</span>);</span><br><span class="line">fixed3 color = ambient + lerp(diffuse, reflection, saturate(fresnel)) * atten;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Render-Texture渲染纹理">Render Texture渲染纹理</h2><h3 id="RT的概念">RT的概念</h3><p>现代GPU允许我们把整个三维场景渲染到一个中间缓冲中，即<strong>渲染目标纹理（Render Target Texture，RTT）</strong>，而不传统的帧缓存或后备缓冲区(back buffer)</p><p>与之相关的是<strong>多重目标渲染（Multiple Render Target，MRT）</strong>，这种技术指的是GPU允许我们把场景同时渲染到多个渲染目标纹理中，而不再需要为每个渲染目标纹理单独渲染完整的场景。延迟渲染就是使用多重目标渲染的一个应用</p><h3 id="创建RT">创建RT</h3><p>Unity为RTT定义了一种专门的纹理类型——<strong>渲染纹理RenderTexture</strong>，Unity中渲染纹理通常有以下两种使用方式：</p><ul><li>在Project目录下创建一个渲染纹理，将某个摄像机的渲染目标设置为该渲染纹理，这样摄像机的渲染结果就会实时更新到RT中，而不会显示到屏幕</li><li>在屏幕后处理中使用<strong>GrabPass</strong>命令或<strong>OnRenderImage</strong>函数来获取当前屏幕图像，unity会将这个屏幕图像放到一张和屏幕分辨率相同的渲染纹理中，然后可以在自定义的Pass中将他们当作普通的纹理来处理，进而实现各种屏幕特效</li></ul><h3 id="使用RenderTexture制作镜子">使用RenderTexture制作镜子</h3><p>在处理代码前需要了先创建一个渲染纹理，并且把它指定到用于捕获的摄像机上</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials10.png" alt="UnityShaderEssentials10"></p><p>接下来编写镜子的shader</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Shader &quot;ShaderLearning/AdvancedTexture/Mirror&quot;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//在Properties内声明纹理属性，它对应了由镜子摄像机渲染得到的渲染纹理</span></span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv = v.texcoord;</span><br><span class="line"><span class="comment">//镜子对称需要翻转u轴</span></span><br><span class="line">                o.uv.x = <span class="number">1</span> - o.uv.x;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> tex2D(_MainTex, i.uv);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GrabPass">GrabPass</h2><h3 id="GrabPass的概念">GrabPass的概念</h3><ul><li><p>除去RenderTexture外，在Unity中，我们还可以使用一种特殊的Pass来完成获取屏幕图像的目的——GrabPass</p></li><li><p>当我们在Shader中定义了一个GrabPass后，Unity会把当前屏幕渲染的图像绘制在一张纹理中，以便我们在后续的Pass中访问它。</p></li><li><p>通常会使用GrabPass来实现诸如玻璃等透明材质的模拟，相比于普通的透明混合，GrabPass可以对物体后面的图像进行更加复杂的处理，例如用法线来模拟折射</p></li><li><p>需要注意的是：在使用GrabPass时需要额外<strong>小心物体的渲染队列设置</strong>。GrabPass通常用于渲染透明物体，所以我们需要把渲染队列设置为Transparent（即<code>Queue = “Transparent”</code>），这样才能保证渲染该物体时所有的不透明物体已经被渲染到屏幕上了，以获取正确的屏幕图像</p></li></ul><h3 id="使用GrabPass制作玻璃效果">使用GrabPass制作玻璃效果</h3><p>使用法线模拟折射效果</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.设置渲染队列和GrabPass</span></span><br><span class="line"><span class="comment">//必须要设置为Transparent的渲染队列，否则深度排序会出错</span></span><br><span class="line">Tags &#123;&quot;RenderType&quot;=&quot;Opaque&quot; &quot;Queue&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line">        </span><br><span class="line">GrabPass &#123; &quot;_RefractionTex&quot; &#125;<span class="comment">//定义一个抓取屏幕的Pass，在之后的Pass中就可以使用_RefractionTex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.通过法线模拟折射</span></span><br><span class="line"><span class="comment">//在vertex中需要获取当前物体在摄像机中的位置，用于读取当前物体范围内的图像</span></span><br><span class="line">struct v2f</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">float4 scrPos : TEXCOORD4;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">v2f vert(a2v i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">o.scrPos = ComputeScreenPos(o.pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.在frag中制作扭曲效果</span></span><br><span class="line"><span class="comment">//获取带有扭曲效果的折射颜色</span></span><br><span class="line">fixed4 frag (v2f i) : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    fixed2 <span class="keyword">offset</span> = bump.xy * _Distortion * _RefractionTex_TexelSize.xy * <span class="number">100</span>;<span class="comment">//通过法线来扭曲折射贴图（乘100加强视觉效果）</span></span><br><span class="line"><span class="comment">//_Refraction_TexelSize可以获取该纹理的纹素大小</span></span><br><span class="line">i.scrPos.xy = <span class="keyword">offset</span> * i.scrPos.z + i.scrPos.xy;<span class="comment">//将扭曲应用到屏幕纹理坐标上，此处多乘的srcPos.z可以让形变程度随着距离摄像机的远近发生变化</span></span><br><span class="line">fixed3 refrCol = tex2D(_RefractionTex,i.scrPos.xy/i.scrPos.w).rgb;<span class="comment">//使用扭曲后的屏幕纹理坐标坐标读取贴图，通过ComputeScreenPos得到的是线性空间下的坐标，在最后用于读取贴图前需要做透视除法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230610162319552.png" alt="ComputeScreenPos获得的srcPos在用于读取贴图前需要进行透视除法"></p><p>完整代码：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/AdvancedTexture/GlassRefraction&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _BumpMap(&quot;Normal Texture&quot;, <span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _Cubemap(&quot;Environment Cubemap&quot;, Cube) = &quot;_skybox&quot;&#123;&#125;</span><br><span class="line">        _Distortion(&quot;Distortion&quot;, Range(<span class="number">0</span>,<span class="number">100</span>)) = <span class="number">10</span></span><br><span class="line">        _RefractAmount(&quot;Refract Amount&quot;, Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    Subshader</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//必须要设置为Transparent的渲染队列，否则深度排序会出错</span></span><br><span class="line">        Tags &#123;&quot;RenderType&quot;=&quot;Opaque&quot; &quot;Queue&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line">        </span><br><span class="line">        GrabPass &#123; &quot;_RefractionTex&quot; &#125;<span class="comment">//定义一个抓取屏幕的Pass，在之后的Pass中就可以使用_RefractionTex</span></span><br><span class="line">        </span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;UnityCG.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            float4 _MainTex_ST;</span><br><span class="line">            <span class="type">sampler2D</span> _BumpMap;</span><br><span class="line">            float4 _BumpMap_ST;</span><br><span class="line">            samplerCUBE _Cubemap;</span><br><span class="line">            <span class="type">float</span> _Distortion;</span><br><span class="line">            fixed _RefractAmount;</span><br><span class="line">            <span class="type">sampler2D</span> _RefractionTex;</span><br><span class="line">            float4 _RefractionTex_TexelSize;</span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">                float2 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float4 uv : TEXCOORD0;</span><br><span class="line">                float4 T2W0 : TEXCOORD1;</span><br><span class="line">                float4 T2W1 : TEXCOORD2;</span><br><span class="line">                float4 T2W2 : TEXCOORD3;</span><br><span class="line">                float4 scrPos : TEXCOORD4;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                </span><br><span class="line">                o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex);</span><br><span class="line">                o.uv.zw = TRANSFORM_TEX(v.texcoord, _BumpMap);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Get the TangentSpace2WorldSpace Matrix</span></span><br><span class="line">                fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);</span><br><span class="line">                fixed3 worldBinormal = <span class="built_in">cross</span>(worldNormal,worldTangent)*v.tangent.w;</span><br><span class="line">                fixed3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span><br><span class="line">                o.T2W0 = fixed4(worldTangent.x, worldBinormal.x, worldTangent.x, worldPos.x);</span><br><span class="line">                o.T2W1 = fixed4(worldTangent.y, worldBinormal.y, worldTangent.y, worldPos.x);</span><br><span class="line">                o.T2W2 = fixed4(worldTangent.z, worldBinormal.z, worldTangent.z, worldPos.x);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//得到对应被抓取的屏幕图像的纹理坐标</span></span><br><span class="line">                o.scrPos = ComputeScreenPos(o.pos);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 worldPos = fixed3(i.T2W0.w, i.T2W1.w, i.T2W2.w);</span><br><span class="line">                fixed3 worldViewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(worldPos));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Get Bump texture in tangent space</span></span><br><span class="line">                fixed3 bump = UnpackNormal(tex2D(_BumpMap, i.uv.zw));</span><br><span class="line">                <span class="comment">//获取带有扭曲效果的折射颜色</span></span><br><span class="line">                fixed2 <span class="keyword">offset</span> = bump.xy * _Distortion * _RefractionTex_TexelSize.xy * <span class="number">100</span>;<span class="comment">//通过法线来扭曲折射贴图,乘100加强一下视觉效果</span></span><br><span class="line">                i.scrPos.xy = <span class="keyword">offset</span> * i.scrPos.z + i.scrPos.xy;<span class="comment">//将扭曲应用到屏幕纹理坐标上，</span></span><br><span class="line">                fixed3 refrCol = tex2D(_RefractionTex,i.scrPos.xy/i.scrPos.w).rgb;<span class="comment">//使用扭曲后的纹理坐标读取贴图</span></span><br><span class="line">                <span class="comment">//获取反射颜色</span></span><br><span class="line">                bump = <span class="built_in">normalize</span>(half3(<span class="built_in">dot</span>(i.T2W0.xyz,bump),<span class="built_in">dot</span>(i.T2W1.xyz,bump),<span class="built_in">dot</span>(i.T2W2.xyz,bump)));</span><br><span class="line">                fixed3 reflDir = <span class="built_in">reflect</span>(-worldViewDir,bump);</span><br><span class="line">                fixed4 texColor = tex2D(_MainTex,i.uv.xy);</span><br><span class="line">                fixed3 reflCol = texCUBE(_Cubemap,reflDir).rgb * texColor.rgb;</span><br><span class="line">                <span class="comment">//通过插值计算颜色</span></span><br><span class="line">                fixed3 finalColor = reflCol * (<span class="number">1</span> - _RefractAmount) + refrCol * _RefractAmount;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(finalColor, <span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RenderTexture-vs-GrabPass">RenderTexture vs. GrabPass</h2><ul><li>GrabPass的好处在于实现简单，只需要在shader中加几行代码即可</li><li>从效率上讲，使用渲染纹理的效率往往要好过GrabPass，尤其是在移动设备上。<ul><li>渲染纹理可以自定义渲染纹理的大小，尽管这种方法需要把部分场景再次渲染一遍，但我们可以通过调整摄像机的渲染层来减少二次渲染时的场景大小，或使用其他办法来控制摄像机是否需要开启。而使用GrabPass获得到的图像分辨率和显示屏幕是一致的，这意味着在一些高分辨率的设备上可能会造成严重的<strong>带宽影响</strong>。而且在移动设备上，GrabPass虽然不会重新渲染场景，但它往往需要CPU直接读取后背缓冲（Back Buffer）中的数据，<strong>破坏了CPU和GPU之间的并行性</strong></li></ul></li></ul><h2 id="其他抓屏方法">其他抓屏方法</h2><p>Unity5中引入了**命令缓冲（Command Buffers）**来允许我们拓展Unity的渲染流水线。</p><p>使用Command Buffer我们也可以获得类似抓屏的效果，它可以在不透明物体渲染后把当前的图像复制到一个临时的渲染目标纹理中，然后在那里进行一些额外的操作（例如模糊等），最后把图像传递给需要使用它的物体进行处理和显式。除此之外，Command Buffer还允许我们实现很多特殊的效果。</p><p>官方文档：<a href="https://docs.unity3d.com/Manual/GraphicsCommandBuffers.html">Unity - Manual: Extending the Built-in Render Pipeline with CommandBuffers (unity3d.com)</a></p>]]></content>
    
    
    <summary type="html">光照进阶、纹理进阶</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
    <category term="Unity" scheme="https://himoqiuhan.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>《Unity Shader入门精要》笔记（一）</title>
    <link href="https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-1/"/>
    <id>https://himoqiuhan.github.io/2023/04/01/Notes-UnityShaderEssentials-1/</id>
    <published>2023-03-31T16:00:00.000Z</published>
    <updated>2023-06-15T05:26:26.632Z</updated>
    
    <content type="html"><![CDATA[<h1>血与泪水</h1><blockquote><p>一些自己在学习过程中花了很久才去解决的bug，记录一下加深印象</p></blockquote><ul><li>Properties不要乱改属性的名字，有些特定的属性名会和Fallback的其他shader有些关系，避免用不规范的属性名带来一些未知bug</li><li>如果shader没有报错，先去看看vertex和fragment有没有被有效编译<ul><li>比如说#pragma vertex vert有没有被有被写成#pragma vretex vert</li></ul></li><li>a2v结构体中获取的UV坐标TEXCOORD0用float2接收即可，且在TRANSFORM_TEX时就有多个需要控制纹理缩放，都是共用那同一个TEXCOORD的UV坐标</li></ul><p><strong>一些注意事项：</strong></p><ol><li><p>ComputeScreenPos和ComputeGrabScreenPos获得的srcPos在用于读取贴图前需要进行透视除法</p><ul><li>ComputeScreenPos：使用摄像机的深度和法线纹理时</li><li>ComputeGrabScreenPos：使用GrabPass时</li></ul><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230610162319552.png" alt=""></p></li><li><p>顶点动画如果在模型空间下进行计算需要禁用批处理，但因此会带来一定的性能下降，增加Draw Call，因此我们应该尽量避免在模型空间下用一些绝对位置和方向进行计算</p></li><li><p>顶点动画需要我们自己提供shadowcaster以实现正确的阴影投射效果</p></li></ol><h1>渲染流水线</h1><h2 id="应用阶段-CPU"><strong>应用阶段(CPU)</strong></h2><p><strong>输出渲染所需的几何信息(渲染图元rendering primitives)</strong></p><ol><li><p>将数据从硬盘加载到RAM，再加载到VRAM上</p></li><li><p>设置渲染状态</p></li><li><p>调用Draw Call</p><ul><li><p>由CPU发起，GPU接收</p></li><li><p>命令仅仅指向一个需要被渲染的图元列表</p></li><li><p>通过命令缓冲区实现CPU与GPU的并行（改变渲染状态的命令比Draw Call的调用更加耗时）</p></li><li><p>Draw Call不宜过多</p><ul><li><p>原因：每次调用Draw Call之前，CPU需要向GPU发送很多数据以改变渲染状态，并且还需要完成很多工作（例如检查渲染状态）</p></li><li><p>解决：Batch Rendering（使用同一种渲染状态，渲染多个模型）</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled.png" alt=""></p></li></ul></li></ul></li></ol><h2 id="几何阶段-GPU">几何阶段(GPU)</h2><p><strong>输出屏幕空间的二维顶点坐标、每个顶点对应的深度值、着色等相关信息</strong></p><ol><li>Vertex Shader<ul><li><strong>每个顶点</strong>都会调用一次Vertex Shader</li><li>顶点之间的Vertex Shader<strong>相互独立</strong>，即无法得到顶点之间的关系</li><li>工作主要是坐标变化和逐顶点光照<ul><li>坐标变换：模型空间到齐次裁剪空间</li></ul></li></ul></li><li>曲面细分着色器<ul><li>可选</li><li>细分图元</li></ul></li><li>几何着色器<ul><li>作用就是将一个图元变换为另一个完全不同的图元，或者修改图元的位置</li></ul></li><li>Clipping<ul><li>用于处理部分在视野内的图元</li><li>在视野外部的顶点应该使用一个新的顶点来代替，顶点位于交界处</li></ul></li><li>屏幕映射<ul><li>输出<strong>窗口坐标系</strong>（屏幕坐标+z坐标）</li></ul></li></ol><h2 id="光栅化阶段-GPU"><strong>光栅化阶段(GPU)</strong></h2><p><strong>决定每个渲染图元中的哪些像素应该被绘制在屏幕上</strong></p><ol><li>三角形设置<ul><li>计算三角网格表示数据的过程（计算每条边上的像素坐标，用于得到整个三角形网格对像素覆盖情况）</li></ul></li><li>三角形遍历（扫描变换）<ul><li>检查像素是否被三角形覆盖，若覆盖则生成一个fragment</li><li>一个fragment != 一个像素<ul><li>fragment是包含了很多<strong>状态的集合</strong>，包括但不限于屏幕坐标、深度信息、法线、纹理坐标等</li></ul></li></ul></li><li>Fragment Shader<ul><li>输出一个或多个<strong>颜色值</strong></li><li>每个Fragment之间<strong>相互独立</strong>，Fragment Shader仅可以影响单个Fragment</li></ul></li><li>逐片元操作<ul><li>解释<ul><li>Per-Fragment Operation（OpenGL）+Output-Merge（DirectX）</li></ul></li><li>主要任务<ol><li>决定片元的可见性（很多测试工作，如Depth Test、Stencil Test）</li><li>如果片元通过了所有的测试，则与Color Buffer中的颜色进行混合</li></ol></li></ul></li></ol><h1>Vert/Frag Shader基础结构</h1><h2 id="一段简易的Vertex-Fragment-Shader">一段简易的Vertex + Fragment Shader</h2><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/UnityShader/Chapter5-SimpleShader&quot;<span class="comment">//当前shader的路径及名称</span></span><br><span class="line">&#123;</span><br><span class="line">    Properties<span class="comment">//属性---&gt;材质面板的可调节参数</span></span><br><span class="line">    &#123;</span><br><span class="line">        _Color (&quot;Color Tint&quot;,Color) = (<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>)<span class="comment">//Properties语义块支持的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader </span><br><span class="line">    &#123;</span><br><span class="line">        Pass &#123;</span><br><span class="line">            CGPROGRAM</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译指令</span></span><br><span class="line">            <span class="meta">#pragma vertex vert//告诉Unity哪个函数包含了vertex/fragment shader的代码</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            fixed4 _Color;<span class="comment">//需要定义一个与属性名称和变量类型都匹配的变量 变量类型匹配表</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//自定义的结构体，用于存放传入vertex shader的变量信息</span></span><br><span class="line"><span class="comment">//a2v = Appliacation to Vertex Shader</span></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;<span class="comment">// Unity支持的常用语义</span></span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 texcoord : TEXCOORD0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//v2f = Vertex Shader to Fragment Shader</span></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos:SV_POSITION;</span><br><span class="line">                float3 color:COLOR0;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//vertex shader代码</span></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;<span class="comment">//声明输出结构</span></span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);<span class="comment">//UnityCG.cginc中的帮助函数</span></span><br><span class="line">                o.color = v.normal*<span class="number">0.5</span> + fixed3(<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>);</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//fragment shader代码</span></span><br><span class="line">            float4 frag(v2f i):SV_Target</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 c = i.color;</span><br><span class="line">                c *= _Color.rgb;</span><br><span class="line">                <span class="keyword">return</span> fixed4(c,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录1：Properties语义块支持的属性类型">附录1：Properties语义块支持的属性类型</h2><table><thead><tr><th style="text-align:center">属性类型</th><th style="text-align:center">使用举例</th></tr></thead><tbody><tr><td style="text-align:center">Int</td><td style="text-align:center">_Int(“Int”, Int) = 2</td></tr><tr><td style="text-align:center">Float</td><td style="text-align:center">_Float(“Float”, Float) = 1.5</td></tr><tr><td style="text-align:center">Range(min, max)</td><td style="text-align:center">_Range(“Range”, Range(0.0, 0.5)) = 3.0</td></tr><tr><td style="text-align:center">Color</td><td style="text-align:center">_Color(“Color”, Color) = (1,1,1,1)</td></tr><tr><td style="text-align:center">Vector</td><td style="text-align:center">_Vector(“Vector”, Vector) = (2,3,4,5)</td></tr><tr><td style="text-align:center">2D</td><td style="text-align:center">_2D(“2D”, 2D) = “”{}</td></tr><tr><td style="text-align:center">cube</td><td style="text-align:center">_Cube(“Cube”, Cube) = “white”{}</td></tr><tr><td style="text-align:center">3D</td><td style="text-align:center">_3D(“3D”, 3d) = “black”{}</td></tr></tbody></table><h2 id="附录2：ShaderLab属性类型与CG变量类型匹配表">附录2：ShaderLab属性类型与CG变量类型匹配表</h2><table><thead><tr><th style="text-align:center">ShaderLab</th><th style="text-align:center">CG</th></tr></thead><tbody><tr><td style="text-align:center">Color, Vector</td><td style="text-align:center">float4, half4, fixed4</td></tr><tr><td style="text-align:center">Range, Float</td><td style="text-align:center">float, half, fixed</td></tr><tr><td style="text-align:center">2D</td><td style="text-align:center">sampler2D</td></tr><tr><td style="text-align:center">Cube</td><td style="text-align:center">samplerCube</td></tr><tr><td style="text-align:center">3D</td><td style="text-align:center">sampler3D</td></tr></tbody></table><h2 id="附录三：-Unity支持的常用语义">附录三： Unity支持的常用语义</h2><h3 id="应用阶段传递模型数据到顶点着色器：">应用阶段传递模型数据到顶点着色器：</h3><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">POSITION</td><td style="text-align:center">模型空间中的顶点位置，通常为float4</td></tr><tr><td style="text-align:center">NORMAL</td><td style="text-align:center">顶点法线，通常为float3</td></tr><tr><td style="text-align:center">TANGENT</td><td style="text-align:center">顶点法线，通常为float4</td></tr><tr><td style="text-align:center">TEXCOORDn</td><td style="text-align:center">顶点的纹理坐标，TEXCOORD表示第一组纹理坐标，通常为float2或float4</td></tr><tr><td style="text-align:center">COLOR</td><td style="text-align:center">顶点颜色，通常为fixed4或float4</td></tr></tbody></table><h3 id="顶点着色器到片元着色器：">顶点着色器到片元着色器：</h3><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SV_POSITION</td><td style="text-align:center">裁剪空间中的顶点坐标，</td></tr><tr><td style="text-align:center">COLOR0</td><td style="text-align:center">通常用于输出第一组顶点的颜色，非必须</td></tr><tr><td style="text-align:center">COLOR1</td><td style="text-align:center">通常用于输出第二组顶点的颜色，非必须</td></tr><tr><td style="text-align:center">TEXCOORD0~TEXCOORD7</td><td style="text-align:center">通常用于输出纹理坐标，非必须</td></tr></tbody></table><h3 id="片元着色器输出">片元着色器输出</h3><table><thead><tr><th style="text-align:center">语义</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">SV_Target</td><td style="text-align:center">输出值将会存储到render targe中</td></tr></tbody></table><h1>基础光照模型：Blinn-Phong</h1><h2 id="原理解析">原理解析</h2><p>Color = Ambient + Diffuse + Specular</p><ul><li><p>Ambient</p><p>由Lighting.cginc中的函数<code>UNITY_LIGHTMODEL_AMBIENT</code>直接获取</p></li><li><p>Diffuse</p><p>逐像素的Lambert/half Lambert，在fragment中进行计算</p><p>Diffuse颜色=光照颜色*漫反射颜色*[0-1]范围的光线与表面法线的点积</p></li><li><p>Specular</p><p>逐像素的高光计算，在fragment中进行计算</p><p>Specular颜色=光照颜色*高光反射颜色*max(0,光线、视线的中间向量与表面法线的点积)</p><blockquote><p>因为对高光不用进行右侧钳制，所以用max钳制左侧即可，且节省性能</p></blockquote></li></ul><h2 id="代码演示">代码演示</h2><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/BasicLighting/BlingPhongShadingModel&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Diffuse(&quot;Diffuse Color&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(&quot;Specular Color&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Glossy(&quot;Glossy&quot;,Range(<span class="number">8.0</span>,<span class="number">256.0</span>)) = <span class="number">20.0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert</span></span><br><span class="line">            <span class="meta">#pragma fragment frag</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">#include &quot;Lighting.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            fixed4 _Diffuse;</span><br><span class="line">            fixed4 _Specular;</span><br><span class="line">            <span class="type">float</span> _Glossy;</span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">            &#125;;</span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float3 worldNormal : TEXCOORD0;</span><br><span class="line">                float3 worldPos : TEXCOORD1;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.worldNormal = UnityObjectToWorldNormal(v.normal);</span><br><span class="line">                o.worldPos = mul(_Object2World,v.vertex).xyz;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line"><span class="comment">//计算环境光</span></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz;</span><br><span class="line"><span class="comment">//计算世界空间下的光照方向</span></span><br><span class="line">                fixed3 worldLightDir = <span class="built_in">normalize</span>(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line"><span class="comment">//计算漫反射颜色</span></span><br><span class="line">                fixed3 diffuse = _Diffuse.rgb * _LightColor0.rgb * saturate(<span class="built_in">dot</span>(worldLightDir,i.worldNormal));</span><br><span class="line"><span class="comment">//计算高光反射颜色</span></span><br><span class="line">                fixed3 viewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(worldLightDir + viewDir);</span><br><span class="line">                fixed3 specular = _Specular.rgb * _LightColor0.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(halfDir,i.worldNormal)),_Glossy);</span><br><span class="line"><span class="comment">//返回求和颜色</span></span><br><span class="line">                <span class="keyword">return</span> fixed4((ambient + diffuse + specular),<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UnityCG-cginc中常用的帮助函数">UnityCG.cginc中常用的帮助函数</h2><p>官方文档：<a href="https://docs.unity3d.com/Manual/SL-BuiltinFunctions.html">Unity - Manual: Built-in shader helper functions (unity3d.com)</a></p><table><thead><tr><th>函数名</th><th>输入</th><th>返回</th><th>是否normalize</th></tr></thead><tbody><tr><td>float3 UnityWorldSpaceViewDir(float3 v)</td><td>世界空间下的顶点位置</td><td>世界空间中从该点到摄像机的观察方向</td><td>否</td></tr><tr><td>float3 ObjSpaceViewDir(float4 v)</td><td>模型空间下的顶点位置</td><td>模型空间中从该点到摄像机的观察方向</td><td>否</td></tr><tr><td>float3 UnityWorldSpaceLightDir(float3 v)</td><td>世界空间下的顶点位置</td><td>世界空间中从该点到光源的光照方向</td><td>否</td></tr><tr><td>float3 ObjSpaceLightDir(float4 v)</td><td>模型空间下的法线方向</td><td>模型空间中从该点到摄像机的光照方向</td><td>否</td></tr><tr><td>float3 UnityObjectToWorldNormal(float3 normal)</td><td>模型空间下的法线方向</td><td>世界空间中的法线方向</td><td>是</td></tr><tr><td>float3 UnityObjectToWorldDir(float3 dir)</td><td>模型空间下的方向矢量</td><td>世界空间中的方向矢量</td><td>是</td></tr><tr><td>float3 UnityWorldToObjectDir(float3 dir)</td><td>世界空间中的方向矢量</td><td>模型空间下的方向矢量</td><td>是</td></tr></tbody></table><h1>纹理基础</h1><h2 id="纹理的基础用法">纹理的基础用法</h2><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Texture/MaskTex&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Specular(&quot;Specular Color&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _Gloss(&quot;Specular Gloss&quot;,Range(<span class="number">8.0</span>,<span class="number">256</span>)) = <span class="number">20.0</span></span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;<span class="comment">//贴图的shaderlab属性为2D</span></span><br><span class="line">        _BumpTex(&quot;Normal Texture&quot;,<span class="number">2</span>D) = &quot;bump&quot;&#123;&#125;</span><br><span class="line">        _BumpScale(&quot;Bump Scale&quot;,<span class="type">float</span>) = <span class="number">1.0</span><span class="comment">//用于控制法线的强度</span></span><br><span class="line">        _MaskTex(&quot;Mask Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _MaskScale(&quot;Mask Scale&quot;,<span class="type">float</span>) = <span class="number">1.0</span><span class="comment">//用于控制遮罩的强度</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="meta">#pragma vertex vert </span></span><br><span class="line">            <span class="meta">#pragma fragment frag </span></span><br><span class="line">            <span class="meta">#include &quot;Lighting.cginc&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">float</span> _Gloss;</span><br><span class="line">            float4 _Color;</span><br><span class="line">            float4 _Specular;</span><br><span class="line">            <span class="type">sampler2D</span> _MainTex;</span><br><span class="line">            <span class="type">sampler2D</span> _BumpTex;</span><br><span class="line">            <span class="type">sampler2D</span> _MaskTex;</span><br><span class="line">            float4 _MainTex_ST;<span class="comment">//需要使用纹理名_ST的方式来声明某个纹理的属性，ST=Scale+Translation,其中x,y表示Scale，z,w表示Transition</span></span><br><span class="line">            <span class="type">float</span> _BumpScale;</span><br><span class="line">            <span class="type">float</span> _MaskScale;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此段为在切线空间中计算光照模型</span></span><br><span class="line"></span><br><span class="line">            struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line">                float2 texcoord : TEXCOORD;</span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;<span class="comment">//是四维向量，w通道存储了副切线bitangent的方向信息</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line">                float2 uv : TEXCOORD0;</span><br><span class="line">                float3 lightDir : TEXCOORD1;</span><br><span class="line">                float3 viewDir : TEXCOORD2;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line">                o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);<span class="comment">//进行贴图的缩放，宏内部调用了之前声明的纹理的_ST属性</span></span><br><span class="line"></span><br><span class="line">                TANGENT_SPACE_ROTATION;<span class="comment">//为UnityCG.cginc中的宏定义，等价于以下两行：</span></span><br><span class="line"><span class="comment">//fixed3 Binormal = cross(normalize(v.normal),normalize(v.tangent.xyz)) * v.tangent.w;</span></span><br><span class="line"><span class="comment">//float3x3 rotation = float3x3(v.tangent.xyz, binormal, v.normal);</span></span><br><span class="line"><span class="comment">//用于得到从物体空间转换到切线空间的变换矩阵TBN矩阵</span></span><br><span class="line">                o.lightDir = mul(rotation,ObjSpaceLightDir(v.vertex)).xyz;<span class="comment">//左乘TBN矩阵：world-&gt;obj</span></span><br><span class="line">                o.viewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                fixed3 tangentLightDir = <span class="built_in">normalize</span>(i.lightDir);</span><br><span class="line">                fixed3 tangentViewDir = <span class="built_in">normalize</span>(i.viewDir);</span><br><span class="line">                fixed3 tangentNormal = UnpackNormal(tex2D(_BumpTex,i.uv));<span class="comment">//读取法线贴图信息并将映射法线信息</span></span><br><span class="line">                tangentNormal.xy *= _BumpScale;<span class="comment">//设置法线强度</span></span><br><span class="line">                tangentNormal.z = <span class="built_in">sqrt</span>(<span class="number">1</span>-<span class="built_in">dot</span>(tangentNormal.xy, tangentNormal.xy));<span class="comment">//计算法线z向量的信息</span></span><br><span class="line"></span><br><span class="line">                fixed3 albedo = tex2D(_MainTex,i.uv).rgb * _Color;</span><br><span class="line"></span><br><span class="line">                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span><br><span class="line"></span><br><span class="line">                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(<span class="built_in">dot</span>(tangentNormal,tangentLightDir));</span><br><span class="line"></span><br><span class="line">                fixed specularMask = tex2D(_MaskTex,i.uv)*_MaskScale;<span class="comment">//读取遮罩贴图并设置遮罩强度</span></span><br><span class="line">                fixed3 halfDir = <span class="built_in">normalize</span>(tangentLightDir + tangentViewDir);</span><br><span class="line">                fixed3 specular = _LightColor0.rgb * _Specular * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(halfDir,tangentNormal)),_Gloss) * specularMask;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(ambient + diffuse + specular,<span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Specular&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="法线贴图">法线贴图</h2><h3 id="凹凸映射">凹凸映射</h3><p>两种实现凹凸映射的方法：</p><ul><li>表面位移displacement：通过高度纹理来模拟，得到一个修改后的法线值<ul><li>计算复杂，不能直接得到表面法线，而是需要由像素灰度值计算</li></ul></li><li>法线纹理normal map：直接存储表面法线</li></ul><h3 id="法线纹理的解释">法线纹理的解释</h3><ul><li>存储空间：<ul><li>每个顶点都有一个属于自己的切线空间，法线纹理往往存储在模型顶点的<strong>切线空间</strong>中</li></ul></li><li>为什么大部分是蓝色：<ul><li>每个法线方向所在的坐标空间是不一样的，即是在表面各自的切线空间中。这种法线纹理实际上就是存储了每个点在各自的切线空间中的法线扰动方向。法线贴图中存储的法线，在经过映射后大多指向屏幕之外，所以法线贴图大多是蓝紫色调的。</li></ul></li></ul><h3 id="法线纹理的反映射（解压）">法线纹理的反映射（解压）</h3><p>法线纹理中存储的就是表面的法线方向，但是由于法线的分量范围是[-1,1]，而像素的分量范围是[0,1]，因此需要一个映射将法线信息存储到法线纹理中。并且在shader中对法线纹理采样后，还需要对结果进行<strong>反映射</strong>来得到原本的法线信息。</p><p>将纹理的纹理类型标识为Normal map，对采样出的法线信息调用<code>UnpackNormal</code>函数即可完成映射</p><h3 id="法线纹理属性-——-Create-from-Grayscale">法线纹理属性 —— Create from Grayscale</h3><ul><li>Bumpness：控制纹理凹凸程度</li><li>Filtering：<ul><li>Smooth：生成后的法线较为平滑</li><li>Sharp：使用Sobel滤波（用于边缘检测的滤波器）来生成法线<ul><li>Sobel滤波的实现：在一个3x3滤波器中计算x和y方向的导数，然后从中获取法线（考虑水平方向和竖直方向上的像素差）</li></ul></li></ul></li></ul><h3 id="在不同空间中计算光照模型">在不同空间中计算光照模型</h3><ul><li><p>在切线空间下计算光照模型（如上<a href="###%E7%BA%B9%E7%90%86%E7%9A%84%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95">示例代码</a>]）</p></li><li><p>在世界空间下计算光照模型：</p></li></ul><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">struct a2v</span><br><span class="line">            &#123;</span><br><span class="line">                float4 vertex : POSITION;</span><br><span class="line"><span class="deletion">-               float2 texcoord : TEXCOORD;</span></span><br><span class="line"><span class="addition">+float4 texcoord : TEXCOORD0;</span></span><br><span class="line">                float3 normal : NORMAL;</span><br><span class="line">                float4 tangent : TANGENT;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            struct v2f</span><br><span class="line">            &#123;</span><br><span class="line">                float4 pos : SV_POSITION;</span><br><span class="line"><span class="deletion">-               float2 uv : TEXCOORD0;</span></span><br><span class="line"><span class="addition">+float4 uv : TEXCOORD0;</span></span><br><span class="line"><span class="deletion">-               float3 lightDir : TEXCOORD1;</span></span><br><span class="line"><span class="deletion">-               float3 viewDir : TEXCOORD2;</span></span><br><span class="line"><span class="addition">+float4 T2W0 : TEXCOORD1;</span></span><br><span class="line"><span class="addition">+float4 T2W1 : TEXCOORD2;</span></span><br><span class="line"><span class="addition">+float4 T2W2 : TEXCOORD3;</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            v2f vert(a2v v)</span><br><span class="line">            &#123;</span><br><span class="line">                v2f o;</span><br><span class="line">                o.pos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"><span class="deletion">-               o.uv = TRANSFORM_TEX(v.texcoord,_MainTex);//进行贴图的缩放，宏内部调用了之前声明的纹理的_ST属性</span></span><br><span class="line"><span class="addition">+o.uv.xy = TRANSFORM_TEX(v.texcoord, _MainTex);</span></span><br><span class="line"><span class="addition">+o,uv.zw = TRANSFORM_TEX(v.vertex, _BumpMap);</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-               TANGENT_SPACE_ROTATION;</span></span><br><span class="line"><span class="deletion">-               o.lightDir = mul(rotation,ObjSpaceLightDir(v.vertex)).xyz;//左乘TBN矩阵：world-&gt;obj</span></span><br><span class="line"><span class="deletion">-               o.viewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;</span></span><br><span class="line"><span class="addition">+float3 worldNormal = UnityObjectToWorldNormal(v.normal);</span></span><br><span class="line"><span class="addition">+fixed4 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);</span></span><br><span class="line"><span class="addition">+fixed3 worldBitangent = cross(worldNormal, worldTanget)*v.tangent.w;//tangent切线中的w通道存储了副切线bitangent的方向信息</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+o.T2W0 = float4(worldTangent.x, worldBitangent.x, worldNormal.x, worldPos.x);</span></span><br><span class="line"><span class="addition">+o.T2W1 = float4(worldTangent.y, worldBitangent.y, worldNormal.y, worldPos.y);</span></span><br><span class="line"><span class="addition">+o.T2W2 = float4(worldTangent.z, worldBitangent.z, worldNormal.z, worldPos.z);</span></span><br><span class="line">                return o;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line"><span class="deletion">-               fixed3 tangentLightDir = normalize(i.lightDir);</span></span><br><span class="line"><span class="deletion">-               fixed3 tangentViewDir = normalize(i.viewDir);</span></span><br><span class="line"><span class="deletion">-               fixed3 tangentNormal = UnpackNormal(tex2D(_BumpTex,i.uv));</span></span><br><span class="line"><span class="deletion">-               tangentNormal.xy *= _BumpScale;//设置法线强度</span></span><br><span class="line"><span class="deletion">-               tangentNormal.z = sqrt(1-dot(tangentNormal.xy, tangentNormal.xy));</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-                fixed3 albedo = tex2D(_MainTex,i.uv).rgb * _Color;</span></span><br><span class="line"><span class="deletion">-                fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span></span><br><span class="line"><span class="deletion">-                fixed3 diffuse = _LightColor0.rgb * albedo * saturate(dot(tangentNormal,tangentLightDir));</span></span><br><span class="line"><span class="deletion">-               fixed specularMask = tex2D(_MaskTex,i.uv)*_MaskScale;</span></span><br><span class="line"><span class="deletion">-               fixed3 halfDir = normalize(tangentLightDir + tangentViewDir);</span></span><br><span class="line"><span class="deletion">-               fixed3 specular = _LightColor0.rgb * _Specular * pow(max(0,dot(halfDir,tangentNormal)),_Gloss) * specularMask;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+float3 worldPos = float3(i.T2W0.w, i.T2W1.w, i.T2W2.w);</span></span><br><span class="line"><span class="addition">+               fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));</span></span><br><span class="line"><span class="addition">+               fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));</span></span><br><span class="line">                //获取法线信息</span><br><span class="line"><span class="addition">+               fixed3 bump = UnpackNormal(tex2D(_BumpMap,i.uv.zw));</span></span><br><span class="line"><span class="addition">+               bump.xy *= _BumpScale;//因为法线是单位矢量，所以可以通过xy来计算出z，同样也就可以通过缩放xy来控制z的强度（法线贴图表示的是法线的扰动）</span></span><br><span class="line"><span class="addition">+               bump.z = sqrt(1-saturate(dot(bump.xy , bump.xy)));</span></span><br><span class="line"><span class="addition">+               bump = normalize(half3(dot(i.T2W0.xyz,bump),dot(i.T2W1.xyz,bump),dot(i.T2W2.xyz,bump)));</span></span><br><span class="line">                //读取贴图</span><br><span class="line"><span class="addition">+               fixed3 albedo = tex2D(_MainTex,i.uv.xy) * _Color;</span></span><br><span class="line"><span class="addition">+               fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * albedo;</span></span><br><span class="line"><span class="addition">+               fixed3 diffuse = _LightColor0.rgb * albedo * saturate(dot(lightDir,bump));</span></span><br><span class="line"><span class="addition">+               fixed3 halfDir = normalize(viewDir + lightDir);</span></span><br><span class="line"><span class="addition">+               fixed3 specular = _LightColor0.rgb * _Specular.rgb * pow(max(0,dot(halfDir,bump)),_Gloss);</span></span><br><span class="line"></span><br><span class="line">                return fixed4(ambient + diffuse + specular,1.0);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><blockquote><p>两者的对比： 在切线空间中计算光照模型，需要在vertex shader中将视线向量和光线向量转换到切线空间 在世界空间中计算光照模型，需要在vertex shader中将normal和binormal转换到世界空间，以此获得法线空间到世界空间的变换矩阵(BTN矩阵)，并通过插值寄存器传递矩阵，再在fragment shader中将法线信息从切线空间转换到世界空间</p></blockquote><h2 id="Ramp贴图">Ramp贴图</h2><p>使用贴图控制漫反射光照，得到NPR的效果：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/Untitled2.png" alt="Untitled2" style="zoom: 67%;" /><p>Ramp贴图：</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials3.png" alt=""></p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">&#123;</span><br><span class="line">fixed3 worldLightDir = <span class="built_in">normalize</span>(UnityWorldSpaceLightDir(i.worldPos));</span><br><span class="line">fixed3 worldViewDir = <span class="built_in">normalize</span>(UnityWorldSpaceViewDir(i.worldPos));</span><br><span class="line"></span><br><span class="line">        fixed3 ambient = UNITY_LIGHTMODEL_AMBIENT.xyz * _Color;</span><br><span class="line">        fixed3 halfDir = <span class="built_in">normalize</span>(worldLightDir + worldViewDir);</span><br><span class="line">        fixed3 specular = _LightColor0.rgb * _Color.rgb * <span class="built_in">pow</span>(<span class="built_in">max</span>(<span class="number">0</span>,<span class="built_in">dot</span>(halfDir,i.worldNormal)),_Gloss);</span><br><span class="line">                </span><br><span class="line">        fixed halfLambert = <span class="number">0.5</span> * saturate(<span class="built_in">dot</span>(i.worldNormal,worldLightDir)) + <span class="number">0.5</span>;</span><br><span class="line">        fixed3 diffuseColor = tex2D(_RampTex,fixed2(halfLambert,halfLambert)) * _Color.rgb;<span class="comment">//Key Code-&gt;根据光照计算结果读取Ramp图</span></span><br><span class="line">        fixed3 diffuse = diffuseColor * _LightColor0.rgb;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fixed4(ambient + diffuse + specular, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>透明效果</h1><p>两种实现方法：</p><ul><li>Alpha Test透明度测试<ul><li>阈值控制，简单直接，不透明或完全透明</li><li>面片草效果</li></ul></li><li>Alpha Blend透明度混合<ul><li>可以得到真正的透明效果</li></ul></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials4.png" alt="UnityShaderEssentials4" style="zoom: 50%;" /><h2 id="Unity-Shader的渲染顺序-——-Queue">Unity Shader的渲染顺序 —— Queue</h2><p>Unity提前定义的5个渲染队列：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">队列索引号</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Background</td><td style="text-align:center">1000</td><td style="text-align:center">在其他任何队列之前渲染，用于背景</td></tr><tr><td style="text-align:center">Geometry</td><td style="text-align:center">2000</td><td style="text-align:center">默认的渲染队列，不透明物体</td></tr><tr><td style="text-align:center">AlphaTes</td><td style="text-align:center">2450</td><td style="text-align:center">需要使用透明度测试的物体（Unity5中分出来的，因为这用渲染更加高效）</td></tr><tr><td style="text-align:center">Transparent</td><td style="text-align:center">3000</td><td style="text-align:center">按从后往前的顺序，使用了透明度混合的物体都应该使用该队列</td></tr><tr><td style="text-align:center">Overlay</td><td style="text-align:center">4000</td><td style="text-align:center">实现一些叠加效果，在最后渲染的物体</td></tr></tbody></table><p>写法实例：<code>Tags &#123;”Queue”=”Transparent”&#125;</code></p><p>可通过在值后加数字的形式来重新指定渲染队列：</p><p>自定义渲染序列：<code>Tags &#123;”Queue”=”Transparent + 1”&#125;</code></p><blockquote><p>染队列会通过重复绘制直接影响性能，合理的队列可以极大提升渲染效率 Unity中，队列小于2500的对象都会被认为是不透明物体，从前往后绘制；而其他的队列则是从后往前绘制。这意味着我们需要尽可能将队列设置为不透明物体的渲染队列，尽量避免重复绘制</p></blockquote><h2 id="AlphaTest">AlphaTest</h2><h3 id="Single-Side-Cull-back-side">Single Side(Cull back side)</h3><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Transparency/AlphaTest&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;<span class="comment">//通过贴图的A通道来控制透明度</span></span><br><span class="line">        _CutThreshold(&quot;Cut Alpha Threshold Value&quot;,Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">0.5</span><span class="comment">//通过一个阈值来控制裁剪的alpha值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;AlphaTest&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;TransparentCutout&quot;&#125;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags&#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                fixed4 textureColor = tex2D(_MainTex,i.uv);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Alpha Test</span></span><br><span class="line">                clip(textureColor.w-_CutThreshold);<span class="comment">//比阈值小的就直接不渲染，比阈值大的作为不透明物体渲染</span></span><br><span class="line">                <span class="comment">//Equale to:</span></span><br><span class="line">                <span class="comment">//if(textureColor.w-_CutThreshold &lt; 0.0)&#123;discard;&#125;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(ambient + diffuse, <span class="number">1.0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparent/Cutout/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Both-Side">Both Side</h3><p>在pass内禁用Cull即可：</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Pass</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//关闭cull</span></span><br><span class="line">Cull Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AlphaBlend">AlphaBlend</h2><h3 id="Without-ZWrite">Without ZWrite</h3><p>关闭ZBuffer写入后，因为无法进行深度排序，所以渲染的半透明效果可能是错误的</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Transparency/AlphaBlend&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;<span class="comment">//通过贴图的A通道来控制透明度</span></span><br><span class="line">        _AlphaScale(&quot;Alpha Scale&quot;,Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span><span class="comment">//控制Alpha的强弱</span></span><br><span class="line">    &#125;</span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags&#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot; &#125;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line"></span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line"></span><br><span class="line">           <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            fixed4 frag(v2f i) : SV_TARGET</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> fixed4(ambient + diffuse, texColor.a * _AlphaScale);<span class="comment">//通过贴图和AlphaScale来控制返回值的a通道</span></span><br><span class="line">            &#125;</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparent/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="With-ZWrite">With ZWrite</h3><p>这样得到的结果不会表现模型内部之间的半透明效果，只有整个物体的半透明效果</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials5.png" alt=""></p><p>==在写入颜色缓冲前，多一个Pass来写入深度信息而不进行实际的渲染==</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Transparency/AlphaBlendWithZWrite&quot;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZWrite on</span><br><span class="line">            ColorMask <span class="number">0</span><span class="comment">//ColorMask设置颜色通道的写掩码，可以写入RGBA的任意组合，当ColorMask设置为0时意味着该Pass不写入任何颜色通道，即不会输出任何颜色，用来单独做Z测试写入ZBuffer</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            ZWrite Off</span><br><span class="line">            Blend SrcAlpha OneminusSrcAlpha</span><br><span class="line"></span><br><span class="line">            <span class="comment">//...同AlphaTest without ZWrite</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    FallBack &quot;Transparency/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Both-Side-2">Both Side</h3><p>实现半透明效果，但是动用了两个Pass先后渲染前后面</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/UnityShaderEssentials6.png" alt=""></p><p>==核心在于分两个Pass，且先渲染背面再渲染前面==</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">Shader &quot;ShaderLearning/Transparency/AlphaBlendBothSides&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _Color(&quot;Color Tint&quot;,Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        _MainTex(&quot;Main Texture&quot;,<span class="number">2</span>D) = &quot;white&quot;&#123;&#125;</span><br><span class="line">        _AlphaScale(&quot;Alpha Scale&quot;,Range(<span class="number">0</span>,<span class="number">1</span>)) = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Tags &#123;&quot;Queue&quot;=&quot;Transparent&quot; &quot;IgnoreProjector&quot;=&quot;True&quot; &quot;RenderType&quot;=&quot;Transparent&quot;&#125;</span><br><span class="line"></span><br><span class="line">        BlendOp add</span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha</span><br><span class="line">        ZWrite Off</span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            Cull front </span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pass</span><br><span class="line">        &#123;</span><br><span class="line">            Tags &#123;&quot;LightMode&quot;=&quot;ForwardBase&quot;&#125;</span><br><span class="line">            Cull back</span><br><span class="line"></span><br><span class="line">            CGPROGRAM</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Fallback &quot;Transparenct/VertexLit&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ShaderLab的混合命令">ShaderLab的混合命令</h2><h3 id="混合操作BlendOperation">混合操作BlendOperation</h3><p>注：源颜色Src指的是frag中计算出来的颜色，目标颜色Dst指的是Color Buffer中读出的颜色</p><table><thead><tr><th style="text-align:center">BlendOperation</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">Add</td><td style="text-align:center">默认的混合指令，相加</td></tr><tr><td style="text-align:center">Sub</td><td style="text-align:center">相减，$O_{rgb}=SrcFractor*S_{rgb}+DstFractor * D_{rgb} $</td></tr><tr><td style="text-align:center">RevSub</td><td style="text-align:center">反向相减，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mi>r</mi><mi>g</mi><mi>b</mi></mrow></msub><mo>=</mo><mi>D</mi><mi>s</mi><mi>t</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∗</mo><msub><mi>O</mi><mrow><mi>r</mi><mi>g</mi><mi>b</mi></mrow></msub><mo>−</mo><mi>S</mi><mi>r</mi><mi>c</mi><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>o</mi><mi>r</mi><mo>∗</mo><msub><mi>S</mi><mrow><mi>r</mi><mi>g</mi><mi>b</mi></mrow></msub></mrow><annotation encoding="application/x-tex">O_{rgb}=DstFractor * O_{rgb} - SrcFractor * S_{rgb}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">Ds</span><span class="mord mathnormal" style="margin-right:0.13889em;">tF</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">rc</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></td></tr><tr><td style="text-align:center">Min</td><td style="text-align:center">取目标颜色和源颜色的最小值，混合因子无效</td></tr><tr><td style="text-align:center">Max</td><td style="text-align:center">去目标颜色和源颜色的最大值，混合因子无效</td></tr></tbody></table><h3 id="设置混合因子">设置混合因子</h3><table><thead><tr><th style="text-align:center">设置</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:center">Blend SrcFactor DstFactor</td><td>RGBA通道使用同样的混合因子</td></tr><tr><td style="text-align:center">Blend SrcFactor DsrFactor, SrcFactorA DstFactorA</td><td>RGB通道使用前两个混合因子，A通道使用后两个</td></tr></tbody></table><h3 id="混合因子">混合因子</h3><table><thead><tr><th style="text-align:center">混合因子</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">One</td><td style="text-align:center">因子为1</td></tr><tr><td style="text-align:center">Zero</td><td style="text-align:center">因子为0</td></tr><tr><td style="text-align:center">SrcColor/DtColor</td><td style="text-align:center">因子为源颜色/目标颜色，如果用于混合RGB，则用SrcColor的RGB去混合；如果混合A，则用SrcColor的A去混和</td></tr><tr><td style="text-align:center">SrcApha/DstColor</td><td style="text-align:center">因子为源颜色/目标颜色的Alpha值</td></tr><tr><td style="text-align:center">OneMinus—</td><td style="text-align:center">1-x</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">学习《Unity Shader入门精要》的笔记，以及博主自己的理解和手敲的代码。此章包含一些shader基础和透明效果</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="TA" scheme="https://himoqiuhan.github.io/tags/TA/"/>
    
    <category term="Shader" scheme="https://himoqiuhan.github.io/tags/Shader/"/>
    
    <category term="Unity" scheme="https://himoqiuhan.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>Games101课程笔记（二）</title>
    <link href="https://himoqiuhan.github.io/2022/10/09/Notes-Games101-2/"/>
    <id>https://himoqiuhan.github.io/2022/10/09/Notes-Games101-2/</id>
    <published>2022-10-08T16:00:01.000Z</published>
    <updated>2023-06-14T00:45:39.690Z</updated>
    
    <content type="html"><![CDATA[<h1>光线追踪 Ray Tracing</h1><h2 id="Why-Ray-Tracing">Why Ray Tracing</h2><ul><li><p><strong>光栅化不易于把一些全局的效果处理好</strong></p><ul><li><p>阴影（软阴影）</p></li><li><p>尤其是光线的多次反射（Glossy reflection, indirect illumination）</p></li></ul></li><li><p>光栅化很快，但是质量相对较低（一种快速的近似）</p></li><li><p><strong>光线追踪很准确，但是很慢</strong></p><ul><li>Rasteriaztion：real-time，Ray Tracing：offline</li><li>生成1帧图大概需要渲染10k CPU hours</li></ul></li></ul><h2 id="Basic-Ray-Tracing-Algorithm">Basic Ray-Tracing Algorithm</h2><h3 id="Light-Rays">Light Rays</h3><p>关于光线的三个idea：</p><ul><li>光沿直线传播（虽然实际上是错的）</li><li>即使光线之间彼此相交，光线也不会与彼此发生碰撞</li><li>光线从光源沿着一定的路径射向眼睛，且光路可逆</li></ul><p>实际上光线追踪是<strong>从相机出发向世界中投射光线</strong></p><h3 id="Ray-Casting">Ray Casting</h3><p><strong>光线投射</strong></p><ol><li><p>从相机处此处认为相机是一个点)，对成像平面上的每一个像素向场景中投射光线，记录最近的交点（类似深度）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221029140055230.png" alt="image-20221029140055230" style="zoom:50%;" /></li><li><p>（考虑记录的交点会不会被照亮）连接交点和光源（shadow ray），如果shadow ray上没有其他物体，那么说明这个交点被光源照亮，再执行shading计算得出像素的颜色</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221029140510644.png" alt="image-20221029140510644" style="zoom:50%;" /></li></ol><p><strong>局限：还是只考虑了一次光线的反射</strong></p><h3 id="Recursive-Whitted-Style-Ray-Tracing">Recursive(Whitted-Style) Ray Tracing</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221029140801196.png" alt="image-20221029140801196" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221029141444034.png" alt="image-20221029141444034" style="zoom:50%;" /><h2 id="Ray-Surface-Intersection">Ray-Surface Intersection</h2><h3 id="Ray-Equation">Ray Equation</h3><ul><li><strong>用==光源==和==一条方向向量==定义光线</strong></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031134715406.png" alt="image-20221031134715406" style="zoom:50%;" /><ul><li><strong>Ray Equation：</strong>（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>：时间,非负 ）</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo>+</mo><mi>t</mi><mi>d</mi><mtext>   </mtext><mn>0</mn><mo>&lt;</mo><mi>t</mi><mo>&lt;</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">r(t)=0 + td \ \ \ 0&lt;t&lt;\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6542em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></span></p><ul><li>Ray Intersection with Sphere：</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031134829060.png" alt="image-20221031134829060" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031135046371.png" alt="image-20221031135046371" style="zoom:50%;" /><ul><li>推广到光线与Implicit Surface隐式表面的求交：</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031135523563.png" alt="image-20221031135523563" style="zoom:50%;" /><h3 id="Plane-Equation">Plane Equation</h3><ul><li><strong>用==一个点==和==一条法线向量==定义一个平面</strong></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031142041202.png" alt="image-20221031142041202" style="zoom:50%;" /><ul><li><strong>Plane Equation：</strong></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>p</mi><mo>:</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>⋅</mo><mi>N</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p:(p-p&#x27;) \cdot N = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>+</mo><mi>c</mi><mi>z</mi><mo>+</mo><mi>d</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">ax + by + cz + d = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">cz</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><ul><li><p>光线和三角形面求交：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031141814818.png" alt="image-20221031141814818" style="zoom:50%;" /><p>转换为两步：</p><ul><li><p>光线与平面求交</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031142541219.png" alt="image-20221031142541219" style="zoom:50%;" /></li><li><p>然后再通过cross判断交点是否在三角形内部即可</p></li></ul></li></ul><h3 id="Moller-Trumbore-Algorithm">Moller Trumbore Algorithm</h3><p>简化三角形和光线求交的算法</p><p>原理：一个点在三角形内，那么就可以写为重心坐标的形式，那么一个交点就应该同时<strong>满足光线方程</strong>和<strong>存在三角形重心坐标</strong>两个条件（通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><msub><mi>b</mi><mn>1</mn></msub><mo>−</mo><msub><mi>b</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">b_1,b_2,(1-b_1-b_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>三者之和等于一和及三者非负即可判断点在三角形内）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031143750573.png" alt="image-20221031143750573" style="zoom:50%;" /><h2 id="Accelerating-Ray-Surface-Intersection">Accelerating Ray-Surface Intersection</h2><h3 id="Bounding-Volumes（BVol）">Bounding Volumes（BVol）</h3><ul><li>一个可以完全包围物体的体积</li><li>如果光线不hit包围盒，他就不会hit物体</li><li>所以可以先检测BVol是否被hit，如果hit了再检测物体</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031144453059.png" alt="image-20221031144453059" style="zoom:50%;" /><h3 id="Ray-Intersection-with-Box">Ray-Intersection with Box</h3><p>理解Box：Box是三组相对的面形成的交集（Box is the intersection of 3 pairs of slabs）</p><p>通常用<strong>Axis-Aligned Bounding Box(AABB)</strong>（轴对齐包围盒）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031144835452.png" alt="image-20221031144835452" style="zoom:50%;" /><h3 id="Ray-Intersection-with-Axis-Aligned-Box">Ray Intersection with Axis-Aligned Box</h3><p>原理：计算光线和平面相交的时间，并判断得到光线在BVol内部的时间（起始时间为最后一个轴向的进入时间，结束时间为最早一个轴向的离开时间）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031145701232.png" alt="image-20221031145701232" style="zoom:50%;" /><p>三维空间中：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031145808578.png" alt="image-20221031145808578" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031150424561.png" alt="image-20221031150424561" style="zoom:50%;" /><p>为什么用Axis-Aligned的绑定盒：极大地简化加速求交</p><p>用随意的包围盒，进行求交时要做三个轴向上的减法，再乘法线，就会有3次减法，六次乘法和一次除法</p><p>而用轴向包围盒，只需要考虑一个轴向的距离，除上光线在该轴的分量即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031150546448.png" alt="image-20221031150546448" style="zoom:50%;" /><p>AABB totally : 3 subtraction, 3 division, get min and max</p><h3 id="Using-AABBs-to-accelerate-ray-tracing">Using AABBs to accelerate ray tracing</h3><h4 id="Uniform-Spatial-Partition-Grids">Uniform Spatial Partition(Grids)</h4><h5 id="Preprocess-—-Build-Acceleration-Grid">Preprocess — Build Acceleration Grid</h5><p>找到场景的包围盒，在包围盒内划分网格，判定哪些网格里与物体相交并<strong>标记</strong>与物体相交的网格（只考虑表面不考虑内部）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031152717717.png" alt="image-20221031152717717" style="zoom:50%;" /><h5 id="Ray-Scene-Intersection">Ray-Scene Intersection</h5><p>投射光线，顺着光线方向与一个一个的盒子求交，对于预处理过程中没有被标记的盒子不需要做与实际物体求交的操作；当光线遇到在预处理过程中被标记的盒子时，意味着这个盒子里会有物体，光线有可能会与物体有交点，所以需要在这个格子内与物体求交进行判断；当找到光线与物体的第一个交点后光线就可以停下来了</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031153948853.png" alt="image-20221031153948853" style="zoom:50%;" /><p>”沿着光线方向“的实现方法：（一种没有在用但是很好理解的方法）光栅化一条直线的方法：知道这个盒子现在在和光线求交，那么下一次和光线进行求交的一定是他周围的盒子</p><h5 id="Grid-Resolution">Grid Resolution</h5><p>包围盒内的网格太密集太疏松都不好</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031154933884.png" alt="image-20221031154933884" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031155023804.png" alt="image-20221031155023804" style="zoom:50%;" /><p>效果不错的格子数量：（这也并非游戏中实际使用的方法，因为它还是要走过他所相交的所有格子，只用知道Grid数量不能太多或太少，有一个平衡就好）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031155110244.png" alt="image-20221031155110244" style="zoom:50%;" /><h5 id="When-Uniform-Grids-Fail">When Uniform Grids Fail</h5><p>适合应用于场景中有很多物体的情况</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031155418553.png" alt="image-20221031155418553" style="zoom:50%;" /><p>但是不适合用于场景很空的情况——”Teapot in a stadium“ problem</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031155604320.png" alt="image-20221031155604320" style="zoom:50%;" /><h4 id="Spatial-Partitions">Spatial Partitions</h4><h5 id="Spatial-Partitioning-Examples">Spatial Partitioning Examples</h5><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031155754217.png" alt="image-20221031155754217" style="zoom:50%;" /><ul><li>Oct-Tree：八叉树（平面情况是四叉树——和维度绑定，在高维度不好计算）</li><li>KD-Tree：和八叉树几乎完全相同，区别在每次找到一个物体就会在轴向上砍一刀，形成类似二叉树的结构；KD-Tree是层之间循环轴向切割，即这一层沿着x方向，下一层就沿着y方向，再下一层沿着z方向，以xyz顺序循环</li><li>BSP-Tree：每一次选一个方向将节点砍开，与KD-Tree区别在于不是横平竖直地砍，且在高维度会不好计算</li></ul><h5 id="KD-Tree-Pre-Processing">KD-Tree Pre-Processing</h5><p>在进行光追前先做好加速结构，再去考虑与光线求交</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031160655382.png" alt="image-20221031160655382" style="zoom:50%;" /><p>注：蓝色绿色部分都会砍开，只是没有画出来</p><ul><li>中间节点只需要记录它会被如何划分</li><li>叶子节点（决定不再划分地节点）才需要再去存储和格子相交的几何形体的信息</li></ul><h5 id="Data-Structure-for-KD-Trees">Data Structure for KD-Trees</h5><p>中间节点存储：</p><ul><li>该节点向下分裂的轴向</li><li>平面沿着轴向的分裂位置</li><li>指向子节点的指针</li><li><strong>实际物体不会储存在中间节点内</strong></li></ul><p>叶子节点：</p><ul><li>储存实际物体的链表</li></ul><h5 id="Traversing-a-KD-Tree">Traversing a KD-Tree</h5><p>光线照射进入BVol</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031164219472.png" alt="image-20221031164219472" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031164252835.png" alt="image-20221031164252835" style="zoom:50%;" /><p>发现A内有物体，就需要和A的两个子节点都进行求交（A有分支，就对A和他的子分支求交，以此递归，直到找到叶子节点）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031164335169.png" alt="image-20221031164335169" style="zoom: 25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031164346824.png" alt="image-20221031164346824" style="zoom:25%;" /><p>以此向下进行</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031164720396.png" alt="image-20221031164720396" style="zoom:50%;" /><p>即：光线如果和该节点有交点，那么光线会向下对该节点的两个子节点求交；如果光线和该节点没有交点就不会继续对该节点的子节点求交；以此向下进行，直到找到叶子节点</p><h5 id="Problem">Problem</h5><ul><li>KD-Tree的建立不简单，需要考虑三角形与盒子的求交（举例：三角形三个顶点不在盒子内，但是这个盒子内有三角形的一部分的情况，不容易处理三角形与盒子的求交）</li><li>物体可能存在于多个盒子内</li></ul><h4 id="Object-Partition-Bounding-Volume-Hierarchy-BVH">Object Partition &amp; Bounding Volume Hierarchy(BVH)</h4><p>以物体为根基，把物体”分堆“并重新计算他们的包围盒——解决了物体可能存在于多个盒子内的问题</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031165738846.png" alt="image-20221031165738846" style="zoom:25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031165706006.png" alt="image-20221031165706006" style="zoom:25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031165715402.png" alt="image-20221031165715402" style="zoom:25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031165725003.png" alt="image-20221031165725003" style="zoom:25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031165916240.png" alt="image-20221031165916240" style="zoom: 50%;" /><p>实际上如何划分一个节点：</p><ul><li>选择一个维度去划分</li><li>Heuristic #1：总是沿着最长的轴去划分，让最长的轴变短，让整个结构最后变得均匀</li><li>Heuristic #2：取中间的物体进行划分(第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个)，让这棵树接近平衡<ul><li>无序的一列数快速找出中位数（不需要排序）：快速选择算法，只对快排划分出的某一边进行操作，可以使时间复杂度在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">O_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span>以内</li></ul></li></ul><p>最终取值：</p><ul><li>Heuristic：节点内含有少量元素时终止</li></ul><h5 id="Data-Structure-for-BVHs">Data Structure for BVHs</h5><p>中间节点存储：</p><ul><li>包围盒</li><li>指向子节点的指针</li></ul><p>叶子节点存储：</p><ul><li>包围盒</li><li>存储实际对象的链表</li></ul><p>节点代表场景中原始物体的交集</p><ul><li>所有物体都在subtree中</li></ul><h5 id="BVH-Traveral">BVH Traveral</h5><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221031175944272.png" alt="image-20221031175944272" style="zoom:50%;" /><h5 id="Spatial-vs-Object-Partitions">Spatial vs Object Partitions</h5><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102090457290.png" alt="image-20221102090457290" style="zoom:50%;" /><h2 id="Basic-Radiometry">Basic Radiometry</h2><p>—— <strong>辐射度量学</strong></p><h3 id="why-radiomentry">why radiomentry</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102092649223.png" alt="image-20221102092649223" style="zoom:50%;" /><h3 id="Radiometry">Radiometry</h3><ul><li><p>Measurement system and units for illumination</p></li><li><p>精确测量光在空间中的属性，并且还是基于几何光学（光沿直线传播，不考虑波动性）</p><ul><li>New terms：Radiant flux，intensity，irradiance，radiance</li></ul></li><li><p>辐射度量学实际上是在物理上准确定义光照的方法</p></li></ul><h3 id="Radiant-Energy-and-Flux-Power">Radiant Energy and Flux(Power)</h3><h4 id="Radiant-Energy">Radiant Energy</h4><p>Radiant energy是电磁辐射的能量，以焦耳为单位，用符号表示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Q</mi><mo stretchy="false">[</mo><mi>J</mi><mo>=</mo><mi>J</mi><mi>o</mi><mi>u</mi><mi>l</mi><mi>e</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">Q[J=Joule]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Q</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mclose">]</span></span></span></span></span></p><h4 id="Radiant-flux-power">Radiant flux(power)</h4><p>单位时间内发射、反射、转换或接收的能量</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ϕ</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>Q</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mtext> </mtext><mo stretchy="false">[</mo><mi>W</mi><mo>=</mo><mi>W</mi><mi>a</mi><mi>t</mi><mi>t</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>l</mi><mi>m</mi><mo>=</mo><mi>l</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>n</mi><msup><mo stretchy="false">]</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">\phi = \frac{dQ}{dt}\ [W = Watt][lm = lumen]^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">Q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"> </span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">Wa</span><span class="mord mathnormal">tt</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">e</span><span class="mord mathnormal">n</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span></p><p>(lumen是光学上的单位，理解为光的亮度)</p><p>Flus —— 单位时间通过感光位置的光子量</p><h3 id="Radiant-intensity">Radiant intensity</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102094718694.png" alt="image-20221102094718694" style="zoom:50%;" /><h4 id="Definition">Definition</h4><p>The radiant (luminous) intensity is the power <strong>per unit solid angle</strong> emitted by a point light source</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102095000345.png" alt="image-20221102095000345" style="zoom:50%;" /><h4 id="Solid-angles-and-Solid-angle">Solid angles and Solid angle</h4><p><strong>Angle</strong>: ratio of subtended arc length on circle to radius</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi><mo>=</mo><mfrac><mi>l</mi><mi>r</mi></mfrac></mrow><annotation encoding="application/x-tex">\theta = \frac{l}{r}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>Circle has 2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> <strong>radians</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100132926.png" alt="image-20221102100132926" style="zoom:50%;" /></li></ul><p><strong>Solid angle</strong>: ratio of subtended area on sphere to radius squared</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mfrac><mi>A</mi><msup><mi>r</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">\Omega = \frac{A}{r^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">A</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>Spere has 4<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>π</mi></mrow><annotation encoding="application/x-tex">\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span></span> <strong>steradians</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100151541.png" alt="image-20221102100151541" style="zoom:50%;" /></li><li><p>弧度在球面上的延申——球弧度，立体角描述空间上的角张开的大小</p></li></ul><h4 id="Differential-Solid-Angles">Differential Solid Angles</h4><p>微分立体角：理解为取一个方向在球面上打到的点，再将这个方向向量的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi></mrow><annotation encoding="application/x-tex">\phi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ϕ</span></span></span></span>都增加一个极小的量，最后投影到球面上得到的一个小曲面对应的立体角</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100229494.png" alt="image-20221102100229494" style="zoom:50%;" /><p>对微分立体角在整个球面上积分可以得到整个球的表面积</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100253612.png" alt="image-20221102100253612" style="zoom:50%;" /><h4 id="omega-as-a-direction-vector"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span> as a direction vector</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100509856.png" alt="image-20221102100509856" style="zoom:50%;" /><h4 id="Isotropic-Point-Source">Isotropic Point Source</h4><p>Radiant intensity(intensity)就是单位时间内光源向各个方向发射的光子能量强度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221102100617487.png" alt="image-20221102100617487" style="zoom:50%;" /><p>intensity是单位面积上的power，因此对intensity在面积上进行积分可以得到power</p><h3 id="Irradiance">Irradiance</h3><h4 id="Definition-2">Definition</h4><p>The irradiance is the <strong>power per unit area</strong> incident on a surfacec point</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103082924980.png" alt="image-20221103082924980" style="zoom:50%;" />$$E_{(x)} = \frac{d\phi (x)}{dA}\cr[\frac{W}{m^2}][\frac{lm}{m^2}=lux]$$这个**area**必须是与光线垂直的部分，如果不垂直的话要把光线投影到垂直方向<ul><li>lambert计算漫反射时需要投影到垂直部分</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103082948987.png" alt="image-20221103082948987" style="zoom:50%;" /><ul><li><p>四季的原因：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103083352319.png" alt="image-20221103083352319" style="zoom:50%;" /></li></ul><h4 id="light-Falloff">light Falloff</h4><p>Light falloff的正确解释：不是intensity的衰减，而是irradiance的衰减，传播到越往外面积越小，irradiance越小</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103083757218.png" alt="image-20221103083757218" style="zoom:50%;" /><h3 id="Radiance">Radiance</h3><h4 id="Definition-3">Definition</h4><p>The radiance (luminance) is the power emitted, reflected, transmitted or received by a surfae, <strong>per unit solid angle</strong>,  <strong>per projected unit area</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103091228894.png" alt="image-20221103091228894" style="zoom:50%;" /><p>对power的两次微分：单位立体角、单位投影面积</p><p>一个单位面积可能和光的朝向不垂直，在度量特定方向的光的朝向时需要进行投影，即需要确定某一个特定的面和某一个特定的方向，通过这样的方式去定义光线</p><h4 id="Radiance-comprehension">Radiance comprehension</h4><p>Recall</p><ul><li>Irradiance：power per projected unit area</li><li>Intensity：power per solid angel</li></ul><p>So</p><ul><li>Radiance：Irradiance per solid angle</li><li>Radiance：Intensity per projected unit area</li></ul><h4 id="Incident-Radiance">Incident Radiance</h4><p>一个面接收到的能量：</p><p>入射Radiance是单位立体角上的到达入射表面的irradiance，即radiance和irradiance的区别在于是否有方向性</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103092219803.png" alt="image-20221103092219803" style="zoom:50%;" /><h4 id="Exiting-Radiance">Exiting Radiance</h4><p>一个面发射出去的能量：</p><p>出射Radiance是在单位投影面积上的intensity，即radiance和intensity的区别在于是否投影到单位面积</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103092447422.png" alt="image-20221103092447422" style="zoom:50%;" /><h4 id="Irradiance-vs-Radiance">Irradiance vs. Radiance</h4><p>Irradiance：一个很小的范围收到的<strong>所有</strong>的能量</p><p>Radiance：一个很小的范围收到的<strong>特定方向</strong>的能量</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103092653435.png" alt="image-20221103092653435" style="zoom:50%;" /><h2 id="BRDF-and-Rendering-Equation">BRDF and Rendering Equation</h2><p><strong>Bidirectional Reflection Distribution Function 双向反射分布函数</strong></p><h3 id="BRDF">BRDF</h3><p><strong>反射的解释：</strong></p><p>Radiance从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>方向打到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>成为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>接收到的power<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>，然后power<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>会成为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>向任意的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ω</mi></mrow><annotation encoding="application/x-tex">\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>方向的Radiance</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221103175101463.png" alt="image-20221103175101463" style="zoom:50%;" /><p>Differential irradiance incoming：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>c</mi><mi>o</mi><mi>s</mi><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">dE(\omega_i) = L(\omega_i)cos\theta_id\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>Differential radiance exiting (due to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>E</mi><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dE(\omega_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>)：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dL_r(\omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><strong>BRDF的解释：</strong></p><p>定义一个函数，描述微小面积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>，从某一个微小立体角<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>接收到的irradiance会如何被分配到各个不同的立体角上去，即一个比例，任何一个出射方向的radiance去除以这一个小块接收到的irradiance</p><p><strong>BRDF的定义：</strong></p><p>The Bidirectional Reflection Distribution Function respresents how much light is reflected into each outgoing direction <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>ω</mi><mi>r</mi></msub></mrow><annotation encoding="application/x-tex">\omega_r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> from each incoming direction</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104083838585.png" alt="image-20221104083838585" style="zoom: 67%;" />$$f_r(\omega_i\rightarrow\omega_r)=\frac{dL_r(\omega_r)}{dE_i(\omega_i)}=\frac{dL_r(\omega_r)}{L_i(\omega_i)cos{\theta_i}d\omega_i}[\frac{1}{sr}]$$BRDF理解：从一个方向进来，打到物体后，物体向各个方向反射的能量分布情况。比如说物体是镜面的，镜面反射方向分分布了所有能量，其他方向没有能量；如果是漫反射，能量会均等的向各个方向分布。BRDF描述了光线和物体如何作用，他决定了物体不同的材质会怎么回事<h3 id="Reflection-Equation">Reflection Equation</h3><p><strong>考虑入射的全部方向：反射方程</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104084617363.png" alt="image-20221104084617363" style="zoom:67%;" />$$L_r(p,\omega_r) = \int_{H^2}f_r(p,\omega_r \rightarrow\omega_r)L_i(p,\omega_i)L_i(p,\omega_i)cos{\theta_i}d\omega_i$$将所有入射方向的贡献积分起来形成最终的出射的radiance<p><strong>Challenge： Recursive Equation</strong></p><p>光线在场景中不可能只弹射一次，任何出射的radiance都可能成为别的面的入射radiance，会存在一个递归的形式</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104085337313.png" alt="image-20221104085337313" style="zoom:50%;" /><h3 id="Rendering-Equation"><strong>Rendering Equation</strong></h3><p>考虑自发光后：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mtext> </mtext><mo>+</mo><mtext> </mtext><msub><mo>∫</mo><mrow><mi mathvariant="normal">Ω</mi><mo>+</mo></mrow></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o) = L_e(p,\omega_o)\ +\ \int_{\Omega+} L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n·\omega_i)d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3303em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4336em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li>假定所有方向都指向外</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>+</mo></mrow><annotation encoding="application/x-tex">\Omega+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">Ω</span><span class="mord">+</span></span></span></span>同<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>H</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">H^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>都表示半球（下半球的光不会造成影响，所以考虑的只是半个球体，而非一个球体）</li></ul><h3 id="Summary">Summary</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104090700392.png" alt="image-20221104090700392" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104090725287.png" alt="image-20221104090725287" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104090859301.png" alt="image-20221104090859301" style="zoom:50%;" /><p>将渲染方程简化为一个积分方程</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104091148088.png" alt="image-20221104091148088" style="zoom:50%;" /><p>可以把渲染方程进一步简化为一个线性矩阵方程</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104091157031.png" alt="image-20221104091157031" style="zoom:50%;" /><p>最终就是要<strong>把L解出来</strong></p><p>写成这么一种算子的形式，因为这个算子同样有类似泰勒展开的性质，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>−</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">I-K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>虽然是矩阵，但也可以写作这样的形式</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104092026337.png" alt="image-20221104092026337" style="zoom:50%;" /><p>最终看到的能量分解为：直接看到的光源能量(自发光)+光线弹射一次看到的能量(直接光照)+光线弹射两次看到的能量(间接光照)+…(间接光照)…</p><p><strong>所有光线弹射的间接光照得到的集合是全局光照</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104091413994.png" alt="image-20221104091413994" style="zoom:50%;" /><p>从光栅化的角度来看渲染方程的分解，着色做的就是分解项的前两项，即光栅化能告诉我们的内容就只有自发光和直接光照部分，后面的部分就会比较麻烦</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104092649362.png" alt="image-20221104092649362" style="zoom:50%;" /><p>光照弹射次数的效果对比：</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221104093301048.png" alt="image-20221104093301048"></p><h1>路径追踪 Path Tracing</h1><h2 id="Monte-Carlo-Integration">Monte Carlo Integration</h2><h3 id="What-How">What&amp;How</h3><p>What：解一个定积分：不写出不定积分积分后的解析式，而是直接获得定积分</p><p>How：在积分域内不断去采样，把整个积分区域的函数当作是一个矩形（y相等），采样采到的x对应的y就作为整个函数的y，这样多次采样后再求平均</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105083750946.png" alt="image-20221105083750946" style="zoom:50%;" /><h3 id="Definition-4">Definition</h3><p>通过给定的函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>定义Monte Carlo Integration</p><ul><li><p>Definite integral</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\int_{a}^{b}f(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.511em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.599em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></p></li><li><p>Random variable</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105084618612.png" alt="image-20221105084618612" style="zoom:50%;" /></li><li><p>Monte Carlo estimator</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mi>N</mi></msub><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">F_N = \frac{1}{N}\sum_{i=1}^N\frac{f(X_i)}{p(X_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(X_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>是采样点在积分域上的概率，即为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mtext>积分域</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\text{积分域}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">积分域</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{p(X_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3651em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0785em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>相当于矩形的宽</p><p>如果在[a,b]上平均采样的特殊情况：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105085409582.png" alt="image-20221105085409582" style="zoom: 50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105085448755.png" alt="image-20221105085448755" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105090535651.png" alt="image-20221105090535651" style="zoom:50%;" /><p>note：</p><ul><li>采样点越多，误差就越小</li><li>不用关心积分域<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">b-a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span></span></span></span>，在考虑积分时不用考虑积分域是多少，积分域已经在PDF(Probility Distribute Function)中体现出来了</li><li>Monte Carlo积分要求：在x方向上采样，就在x方向上积分</li></ul><h2 id="Path-Tracing">Path Tracing</h2><h3 id="Problems-of-Witted-Style-Ray-Tracing">Problems of Witted-Style Ray Tracing</h3><h4 id="Problem-1">Problem 1</h4><p>光线应该被glossy材质（并非完全光滑的材质）反射到哪里</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105091425437.png" alt="image-20221105091425437" style="zoom:50%;" /><h4 id="Problem-2">Problem 2</h4><p>漫反射材质之间的相互反射</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105092241071.png" alt="image-20221105092241071" style="zoom:50%;" /><h3 id="Whitted-Style-Ray-Tracing-is-Wrong">Whitted-Style Ray Tracing is Wrong</h3><p><strong>But Rendering equation is correct</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>L</mi><mi>e</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>e</mi></msub><mo stretchy="false">)</mo><mo>+</mo><msub><mo>∫</mo><mrow><mi mathvariant="normal">Ω</mi><mo>+</mo></mrow></msub><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ω</mi><mi>o</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">⋅</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o(p,\omega_o)=L_e(p,\omega_e)+\int_{\Omega+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n·\omega_i)d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.3303em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4336em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span><span class="mord mtight">+</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>但是这个方程包括：</p><ul><li>计算在半球上的积分</li><li>递归计算</li></ul><h3 id="A-Simple-Monte-Carlo-Solution">A Simple Monte Carlo Solution</h3><p>假定渲染一个像素在所受直接光照的结果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105093211160.png" alt="image-20221105093211160" style="zoom:50%;" /><p>通过反射方程来做解释（因为渲染方程也只是多了一个自发光），那么实际上就只是一个在不同方向上的积分。通过Monte Carlo积分计算就是随机取一个方向作为随机变量，找到他对应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>和PDF即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105093456799.png" alt="image-20221105093456799" style="zoom:50%;" /><p>反射点为p</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105093905643.png" alt="image-20221105093905643" style="zoom:50%;" /><p>将积分变为一个简单的求平均值</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105094308240.png" alt="image-20221105094308240" style="zoom:50%;" /><p>算法：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105094324469.png" alt="image-20221105094324469" style="zoom:50%;" /><h3 id="Introducing-Global-Illumination">Introducing Global Illumination</h3><p>加入间接光照就相当于：眼睛在P点看Q点，获得P点的吸收能量</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105094541320.png" alt="image-20221105094541320" style="zoom:50%;" /><p>递归算法：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105094630621.png" alt="image-20221105094630621" style="zoom:50%;" /><p>但是存在问题</p><ul><li><p>Problem 1：如此计算，光线的数量会“爆炸”</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105094757432.png" alt="image-20221105094757432" style="zoom:50%;" /><p>N = 1 唯一能防止指数爆炸</p><p>所以进一步改进算法：目前，我们假设在每个着色点上只有一根光线被追踪</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105095139458.png" alt="image-20221105095139458" style="zoom:50%;" /><p>用N = 1来做Monte Carlo积分就叫做<strong>路径追踪</strong>，N != 1叫做分布式光线追踪（光线指数爆炸）</p><p>这样获得的结果会变得noisy，不过通过在每个pixel上追踪更多的path（注意不是增加N）并最后取radiance的平均即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105095707851.png" alt="image-20221105095707851" style="zoom:50%;" /><p>算法：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105095803969.png" alt="image-20221105095803969" style="zoom:50%;" /></li><li><p>Problem 2：递归算法何时停止？</p><p>不能通过限制递归次数的方法来解决，这样做会损失能量，cutting #bounces == cutting energy，多次弹射的能量就损失了</p><p><strong>Solution：Russian Roulette(RR)</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105100649619.png" alt="image-20221105100649619" style="zoom:50%;" /><p>用俄罗斯轮盘赌的方式来<strong>决定一定的概率停止向下追踪</strong>，即不会一直向下追踪，在一定的条件下会停下来</p><p>首先，某一个着色点它的出射的radiance是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">L_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，给一个概率p，，以一定的概率p向某个方向打一条光线，返回值为得到的一定的结果再除以p，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">L_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>/P；在1-p的概率内不打出光线，返回0。最终，<strong>得到的结果的期望仍然为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">L_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105102436818.png" alt="image-20221105102436818" style="zoom:50%;" /><p>代码：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105103253126.png" alt="image-20221105103253126" style="zoom:50%;" /></li></ul><h3 id="Sampling-the-Light">Sampling the Light</h3><p>以上已经是正确的Path Tracing了</p><p>但是这样的Path Tracing并不高效，SPP不足就会出现很多噪点</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105103628147.png" alt="image-20221105103628147" style="zoom:50%;" /><p>低效的原因：</p><p>在着色点上向半球四面八方均匀采样时，从一个点打出去的很多线中只会有1根打到光源，有很多的光线被浪费</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105103929661.png" alt="image-20221105103929661" style="zoom:50%;" /><p>Solution：</p><p>直接在光源上进行采样<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>要对光源上的微表面面积进行积分<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>把BRDF方程改写成对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>的积分</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105104542348.png" alt="image-20221105104542348" style="zoom:50%;" /><p>知到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>ω</mi></mrow><annotation encoding="application/x-tex">d\omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span></span></span></span>的关系即可——投影的面积</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105104804357.png" alt="image-20221105104804357" style="zoom:50%;" /><p>变量替换后：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105105007553.png" alt="image-20221105105007553" style="zoom:50%;" /><p><strong>所以可以把着色点接收到的</strong>radiance分为两部分：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105105426685.png" alt="image-20221105105426685" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105105623893.png" alt="image-20221105105623893" style="zoom:50%;" /><p>多一步判断光源和接收点p之间有物体阻挡</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105105952419.png" alt="image-20221105105952419" style="zoom:50%;" /><h3 id="Path-Tracing-will-Generate-Photo-Realistic">Path Tracing will Generate Photo-Realistic</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221105110255699.png" alt="image-20221105110255699" style="zoom:50%;" /><h3 id="Some-Side-Notes">Some Side Notes</h3><h4 id="Modern-Concepts-of-Ray-tracing">Modern Concepts of Ray tracing</h4><ul><li><p>Previous</p><p>Ray Tracing == Whitted-style ray tracing</p></li><li><p>Modern</p><p><strong>The general solution of light transport</strong>, include:</p><ul><li>Unidirectional &amp; bidirectional path tracing</li><li>Photon mapping — 光子映射</li><li>Metropolis light transport — 光线传输</li><li>VCM — 结合双向路径追踪和光子映射</li><li>UPBP — 结合所有方法</li></ul></li></ul><h4 id="Haven’t-covered">Haven’t covered</h4><ul><li>怎样对半球进行采样</li><li>Monta Carlo积分能用在任意的pdf上，那么选择什么样的pdf是最好的（importance sampling)</li><li>随机数的选取（low discrepancy sequences）</li><li>采样半球和采样光源结合（multiple imp. sampling）</li><li>对能量的平均是否加权（pixel reconstruction filter）</li><li>一个像素里面的radiance怎么混合颜色（gamma correction，curves，color space）</li></ul><h1>材质和外观 Materials and Appearances</h1><p><strong>Material == BRDF</strong></p><h2 id="Diffuse-Lambertian-Material-BRDF">Diffuse/Lambertian Material(BRDF)</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106120044267.png" alt="image-20221106120044267" style="zoom:50%;" /><p>漫反射系数的正确定义：</p><p>假设空间中各个方向进来的irradiance都相同（uniform），反射向各个方向的irradiance也都是uniform，且物体表面不吸收光，由能量守恒得到入射光的radiance和出射光的radiance相同，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>L</mi><mi>o</mi></msub><mo>=</mo><msub><mi>L</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_o=L_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo>=</mo><mfrac><mi>ρ</mi><mi>π</mi></mfrac></mrow><annotation encoding="application/x-tex">f_r=\frac{\rho}{\pi}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0925em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">π</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ρ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106120610555.png" alt="image-20221106120610555" style="zoom:50%;" /><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding="application/x-tex">\rho</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span></span></span></span>即为albedo：反射率，在0-1之间</p><h2 id="Glossy-Material">Glossy Material</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106123526908.png" alt="image-20221106123526908" style="zoom:50%;" /><h2 id="Ideal-Reflective-Refractive-Material-BSDF">Ideal Reflective/Refractive Material(BSDF)</h2><p>BSDF = BRDF + BTDF</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106123806047.png" alt="image-20221106123806047" style="zoom:50%;" /><h2 id="Perfect-Specular-Reflection">Perfect Specular Reflection</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106124526763.png" alt="image-20221106124526763" style="zoom:50%;" /><h2 id="Specular-Refraction">Specular Refraction</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106124741807.png" alt="image-20221106124741807" style="zoom:50%;" /><p><strong>Snell’s Law</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106124957754.png" alt="image-20221106124957754" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106125649137.png" alt="image-20221106125649137" style="zoom:50%;" /><p><strong>Snell’s Window/Circle</strong></p><p>水底只有一个锥形区域会有光线折射进入（只能看到一个锥形区域）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106132831822.png" alt="image-20221106132831822" style="zoom:50%;" /><h2 id="Fresnel-Reflection-Term">Fresnel Reflection/Term</h2><p>现象：不同角度看桌面，反射内容是不一样的</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106133142200.png" alt="image-20221106133142200" style="zoom:50%;" /><p>菲涅尔项：</p><ul><li><p>绝缘体反射率随入射光角度变化</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106133601427.png" alt="image-20221106133601427" style="zoom:50%;" /></li><li><p>导体反射率随入射光角度变化</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106133627846.png" alt="image-20221106133627846" style="zoom:50%;" /></li><li><p>计算公式</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106134103673.png" alt="image-20221106134103673" style="zoom:50%;" /></li></ul><h2 id="Microfacet-Material">Microfacet Material</h2><h3 id="Microfacet-Theory">Microfacet Theory</h3><p>粗糙表面：</p><ul><li>Macroscale：flat&amp;rough（从近处看的是几何）</li><li>Microscale：bumpy&amp;specular（从远处看的是材质）</li></ul><p>单个微表面都想一面镜子一样</p><ul><li>每个微表面都有自己的法线（朝向）</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106134847542.png" alt="image-20221106134847542" style="zoom:50%;" /><h3 id="Microfacet-BRDF">Microfacet BRDF</h3><ul><li><p>key：研究微表面发现的分布</p><ul><li><p>微表面分布集中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span>glossy</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106135251122.png" alt="image-20221106135251122" style="zoom:50%;" /></li><li><p>微表面分布分散<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟺</mo></mrow><annotation encoding="application/x-tex">\Longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mrel">⟺</span></span></span></span>diffuse</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106135259108.png" alt="image-20221106135259108" style="zoom:50%;" /></li></ul></li><li><p>Microfacet BRDF</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106135721289.png" alt="image-20221106135721289" style="zoom:50%;" /><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>o</mi><mo separator="true">,</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G(i,o,h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">o</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span> —— shadowing-masking term</p><p>微表面之间可能发生相互遮挡，所以有些微表面满足反射但是会被遮挡，失去了他们的作用，即实际计算得到的反射能量可能偏大。Shadowing-masking考虑的就是这个现象。定义一个Grazing Angle，十分接近与法线垂直的角度，当光线接近Grazing Angle时，shadowing-masking就用于修正这个现象。</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span> —— distribution of normals</p><p>描述有多少微表面实现从入射到出射方向的反射</p></li></ul></li></ul><h2 id="Isotropic-Anisotropic-Materials">Isotropic/Anisotropic Materials</h2><ul><li><p>Key：directionality of underlying surface</p><ul><li><p>各向同性：认为微表面并不存在一定的方向性或方向性很弱，微表面的发现分布均匀</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106142103414.png" alt="image-20221106142103414" style="zoom:50%;" /></li><li><p>各向同性：微表面有一定的方向性</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106142133765.png" alt="image-20221106142133765" style="zoom:50%;" /></li></ul></li><li><p>Anisotropic BRDF</p><p>旋转反射的方位角（azimuthal angle），如果观测到的BRDF不变，那么说明是各向同性；如果观察到的BRDF发生变化，那么说明是各向异性（BRDF与绝对方位角有关）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106142426912.png" alt="image-20221106142426912" style="zoom:50%;" /></li></ul><h2 id="Properties-of-BRDFs">Properties of BRDFs</h2><ul><li><p>Non-negativit</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">f_r(\omega_i\rightarrow\omega_r)\ge0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p></li><li><p>Linearity</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>L</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup></msub><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><msub><mi>L</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">L_r(p,\omega_r)=\int_{H^2}f_r(p,\omega_i\rightarrow\omega_r)L_i(p,\omega_i)\cos{\theta_i}d\omega_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2719em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.3895em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">L</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106143600326.png" alt="image-20221106143600326" style="zoom:50%;" /></li><li><p>Reciprocity principle</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>r</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\omega_r\rightarrow\omega_i)=f_r(\omega_i\rightarrow\omega_r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106143717293.png" alt="image-20221106143717293" style="zoom:50%;" /></li><li><p>Energy conservation</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∀</mi><msub><mi>ω</mi><mi>r</mi></msub><mo>∫</mo><msup><mi>H</mi><mn>2</mn></msup><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>ω</mi><mi>i</mi></msub><mo>→</mo><msub><mi>ω</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mi>cos</mi><mo>⁡</mo><msub><mi>θ</mi><mi>i</mi></msub><mi>d</mi><msub><mi>ω</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\forall\omega_r\int{H^2}f_r(\omega_i\rightarrow\omega_r)\cos{\theta_i}d\omega_i\le1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2222em;vertical-align:-0.8622em;"></span><span class="mord">∀</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">ω</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p></li><li><p>Isotropic vs. anisotropic</p><ul><li><p>If isotropic，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo separator="true">;</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">;</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\theta_i,\phi_i;\theta_r,\phi_r)=f_r(\theta_i,\theta_r;\phi_r-\phi_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，四维降三维</p></li><li><p>Then, from reciprocity,</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>o</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>r</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>f</mi><mi>r</mi></msub><mo stretchy="false">(</mo><msub><mi>θ</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>θ</mi><mi>r</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><msub><mi>ϕ</mi><mi>r</mi></msub><mo>−</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_r(\theta_o,\theta_r,\phi_r-\phi_i)=f_r(\theta_r,\theta_i,\phi_i-\phi_r)=f_r(\theta_i,\theta_r,|\phi_r-\phi_i|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p><p>由可逆性得，相对方位角不需要考虑正负，方便BRDF的测量和储存</p></li></ul></li></ul><h2 id="Measuring-BRDF">Measuring BRDF</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106152910444.png" alt="image-20221106152910444" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106153300191.png" alt="image-20221106153300191" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106153317427.png" alt="image-20221106153317427" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106153334125.png" alt="image-20221106153334125" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106153343318.png" alt="image-20221106153343318" style="zoom:50%;" /><h1>Advanced Light Transport</h1><h2 id="Unbiased-light-transport-methods">Unbiased light transport methods</h2><h3 id="Biased-vs-Unbiased-Monte-Carlo-Estimators">Biased vs. Unbiased Monte Carlo Estimators</h3><ul><li><p>无偏蒙特卡罗积分不会产生任何逻辑错误</p><p>不管用多少采样点，无偏估计的期望值往往是真实值，这样的方法叫做无偏方法</p></li><li><p>有偏：其他情况</p><p>特例：期望值在无限多的采样点的情况下收敛于某个值，这样的情况叫做<strong>consistent</strong></p></li><li><p>渲染中的biased和consistent的理解</p><ul><li>Biased == blurry</li><li>Consistent == not blurry with infinite samples</li></ul></li></ul><h3 id="Bidirectional-Path-Tracing-BDPT">Bidirectional Path Tracing(BDPT)</h3><p>生成从摄像机和光源出发的子路径，再把两个子路径的端点连接起来的方法</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106162543339.png" alt="image-20221106162543339" style="zoom:50%;" /><ul><li><p>适用于光线传播在光源处比较复杂的情况</p></li><li><p>但是实现起来会很难，并且很慢</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221106162900262.png" alt="image-20221106162900262" style="zoom:50%;" /><p>如图，因为Path Tracing从摄像机出发时的第一次bounce是diffuse，导致不好控制它能够打到之后能量集中的地方去，所以效果不好。而Bidirectional Path Tracing可以直接连接光源出发的和摄像机出发的第一次bounce</p></li></ul><h3 id="Metropolis-Light-Transport-MLT">Metropolis Light Transport(MLT)</h3><ul><li><p>A Markov Chain Carlo (MCMC) application</p><p>MCMC可以生成以任意函数的形状为PDF的样本，Monte Carlo Estimator中当你采样的PDF和被积函数形状一致时(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>)，得到的variance最小。Markov Chain能够让任何未知的函数生成一系列分布与被积函数形状一致的样本。</p></li><li><p>Very good at locally exploring difficult light paths</p></li><li><p>Key idea :</p><ul><li><p>Locally pertub an existing path to get a new path</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107132716686.png" alt="image-20221107132716686" style="zoom:67%;" /></li></ul></li><li><p>特别适合做复杂的光线传播</p><ul><li><p>只需要找到一条“种子”路径</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107132827046.png" alt="image-20221107132827046" style="zoom:50%;" /></li><li><p>caustics：specular-diffuse-specular</p></li></ul></li><li><p>难以在理论上分析最终的收敛速度（难以估计sample数量和variance的关系）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107133514929.png" alt="image-20221107133514929" style="zoom:50%;" /></li></ul><h2 id="Biased-light-transport-methods">Biased light transport methods</h2><h3 id="Photon-Mapping">Photon Mapping</h3><ul><li><p>Very Good at hanging Specular—Diffuse—Specular(<strong>SDS</strong>) path and generating <strong>caustics</strong></p></li><li><p>A two-stage method</p><ul><li><p>Stage 1 — photon <strong>tracing</strong></p><p><strong>光子</strong>从光源出发，该反射就反射该折射就折射，直到光子遇到一个diffuse材质的物体，光子就停在那里</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107134151274.png" alt="image-20221107134151274" style="zoom:50%;" /><p>Stage 2 — photon <strong>collection</strong></p><p>从视角出发，发射<strong>子路径</strong>，该反射就反射该折射就折射，直到路径打到diffuse材质的物体上</p></li></ul></li><li><p>Calculation — local density estimation</p><ul><li>areas with more photons should be brighter</li><li>对于每一个shading point，寻找它周围最近的N的光子，划分这几个光子占据着色点周围的面积，用光子数量除以面积获得光子密度</li></ul></li><li><p>为什么光子映射phonto mapping是有偏的</p><ul><li>Local Density esitimation <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>d</mi><mi>N</mi></mrow><mrow><mi>d</mi><mi>A</mi></mrow></mfrac><mo stretchy="false">!</mo><mo>=</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>N</mi></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>A</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{dN}{dA} != \frac{\Delta N}{\Delta A}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">A</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>当有足够多的光子时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>A</mi><mtext>接近</mtext><mi>d</mi><mi>A</mi></mrow><annotation encoding="application/x-tex">\Delta A\text{接近}dA</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">Δ</span><span class="mord mathnormal">A</span><span class="mord text"><span class="mord cjk_fallback">接近</span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">A</span></span></span></span></li><li>所以光子映射biased但是<strong>consistent</strong></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107142647198.png" alt="image-20221107142647198" style="zoom:50%;" /></li></ul><h3 id="Vertex-Connection-and-Merging-VCM">Vertex Connection and Merging(VCM)</h3><ul><li>结合BDPT和Photon Mapping</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107142834200.png" alt="image-20221107142834200" style="zoom: 50%;" /><h3 id="Instant-Radiosity-IR">Instant Radiosity(IR)</h3><ul><li><p>也叫many-light approaches</p></li><li><p>核心思想：把被照亮的表面看作是新的光源</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107143214922.png" alt="image-20221107143214922" style="zoom:50%;" /></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107143300208.png" alt="image-20221107143300208" style="zoom:50%;" /><h1>Advanced Appearance Modeling</h1><h2 id="Non-surface-models">Non-surface models</h2><h3 id="Participating-Media">Participating Media</h3><p>Participating Media： <strong>参与介质</strong></p><ul><li>光线在参与介质中会发生①被吸收②被散射</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107143940544.png" alt="image-20221107143940544" style="zoom:50%;" /><ul><li><p>使用Phase Function相位函数来描述光在参与介质中任意位置的散射角度的分布情况</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107144320220.png" alt="image-20221107144320220" style="zoom:50%;" /></li></ul><h3 id="Hair-Fur-Fiber-BCSDF">Hair/Fur Fiber (BCSDF)</h3><h4 id="Human-Hair">Human Hair</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145029236.png" alt="image-20221107145029236" style="zoom:50%;" /><ul><li><p>Kajiya–Kay Model</p><p>只考虑反射和漫反射</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145137943.png" alt="image-20221107145137943" style="zoom:50%;" /></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145235799.png" alt="image-20221107145235799" style="zoom:50%;" /><ul><li><p>Marschner Model</p><p>光线打到圆柱后</p><p>有一部分被直接反射——R</p><p>有一部分会穿透后再穿透——TT</p><p>有一部分进头发里，在内部反射后再发生第二次穿透——TRT</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145317967.png" alt="image-20221107145317967" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145639236.png" alt="image-20221107145639236" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107145700493.png" alt="image-20221107145700493" style="zoom:50%;" /></li></ul><h4 id="Fur-Appearance">Fur Appearance</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150025638.png" alt="image-20221107150025638" style="zoom:50%;" /><p>动物毛发不能通过人头发的方式进行计算：动物毛发内的髓质比头发的大得多，之前的玻璃柱的模型没有考虑髓质的存在</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150215739.png" alt="image-20221107150215739" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150322703.png" alt="image-20221107150322703" style="zoom:50%;" /><ul><li><p>Double Cylinder Model——模拟出髓质</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150345673.png" alt="image-20221107150345673" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150435496.png" alt="image-20221107150435496" style="zoom:50%;" /><p><strong>一共五个分量</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150529063.png" alt="image-20221107150529063" style="zoom:50%;" /></li></ul><h3 id="Granular-material">Granular material</h3><p><strong>颗粒材质</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107150951579.png" alt="image-20221107150951579" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107151053220.png" alt="image-20221107151053220" style="zoom:50%;" /><h2 id="Surface-models">Surface models</h2><h3 id="Translucent-Materials-BSSRDF">Translucent Materials(BSSRDF)</h3><p><strong>Translucent Materials不是实际的半透明，Semitransparent Materials才是半透明</strong></p><p>Translucent Material说明的是光线可以从某一个地方进入物体表面，再从另一个地方出物体表面，并非光线传入一个表面并不被吸收，光线可以被导到其它地方去</p><ul><li><p>Jade</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107151710591.png" alt="image-20221107151710591" style="zoom: 33%;" /></li><li><p>Jellyfish</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107151727129.png" alt="image-20221107151727129" style="zoom: 33%;" /></li><li><p><strong>Subsurface Scattering次表面散射</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107151913664.png" alt="image-20221107151913664" style="zoom:50%;" /></li><li><p>Scattering Functions</p><ul><li><p>BSSRDF：对BRDF概念的延申</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107152032544.png" alt="image-20221107152032544" style="zoom:50%;" /></li><li><p>Dipole Approximation</p><p>当光源照向一个点后，将BSSRDF近似为物体表面内外两个光源共同照亮这一部分的着色点</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107152338492.png" alt="image-20221107152338492" style="zoom:50%;" /></li><li><p><strong>BSSRDF的效果：</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107152551271.png" alt="image-20221107152551271" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107152717545.png" alt="image-20221107152717545" style="zoom:50%;" /></li></ul></li></ul><h3 id="Cloth">Cloth</h3><h4 id="Rendering-as-Surface">Rendering as Surface</h4><p>通过给定的编织模式，计算整体的表现，通过BRDF进行计算</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107153602413.png" alt="image-20221107153602413" style="zoom:50%;" /><p>不便于处理anisotropic</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107153703945.png" alt="image-20221107153703945" style="zoom: 33%;" /><h4 id="Rendering-as-Participating-Media">Rendering as Participating Media</h4><p>不再把布料当作平面渲染，而是当作体积渲染，可以得到更好的效果，但是渲染的计算量就会大得多</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107153323711.png" alt="image-20221107153323711" style="zoom:50%;" /><h4 id="Rendering-as-Actual-Fibers">Rendering as Actual Fibers</h4><p>精确渲染每一根纤维</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107153420900.png" alt="image-20221107153420900" style="zoom:50%;" /><h3 id="Detailed-materials-non-statistical-BRDF">Detailed materials(non-statistical BRDF)</h3><h4 id="Microfacet-BRDF-2">Microfacet BRDF</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107154915065.png" alt="image-20221107154915065" style="zoom:50%;" /><p>Normal Distrubution Function(NDF)的不同——实际的NDF存在一些细节，如果能将这些细节考虑进去那么就能得到更好的细节</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107155129655.png" alt="image-20221107155129655" style="zoom:50%;" /><ul><li><p>微表面在path tracing上会存在一些问题</p><ul><li>容易发生path的miss</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107155408515.png" alt="image-20221107155408515" style="zoom:50%;" /><ul><li><p>Solution：</p><p>考虑一个像素会覆盖很多的微表面，把一个微表面在一个像素对应范围内的法线分布算出来，替代原本光滑的分布并用在微表面模型里</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107155752307.png" alt="image-20221107155752307" style="zoom:50%;" /><p>不同大小的patch</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107155824853.png" alt="image-20221107155824853" style="zoom:50%;" /><p>不同的法线贴图</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107155904485.png" alt="image-20221107155904485" style="zoom:50%;" /></li></ul></li></ul><h4 id="Wave-Optics">Wave Optics</h4><p>唯一光源下的金属划痕</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107160433755.png" alt="image-20221107160433755" style="zoom:50%;" /><p><strong>Detailed Material under Wave Optics</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107160359432.png" alt="image-20221107160359432" style="zoom:50%;" /><h2 id="Procedural-appearance">Procedural appearance</h2><ul><li><p>Define details without textures</p><ul><li><p>Compute a noise fuction on the fly</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107160809718.png" alt="image-20221107160809718" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107160756062.png" alt="image-20221107160756062" style="zoom:50%;" /></li></ul></li><li><p>例如柏林噪波</p></li></ul><h1>Camera</h1><p><strong>Imaging = Synthesis + Capture</strong></p><h2 id="Inside-a-camera">Inside a camera</h2><ul><li><p>Phinholes &amp; Lenses For Image on Sensor</p></li><li><p>Shutter Exposes Sensor For Precise Duration</p></li><li><p>Sensor Accumulates Irradiance During Exposure</p><ul><li><p>目前传感器只能记录Irradiance，所以需要有针孔或者透镜，来给定记录的方向</p></li><li><p>但是目前有人在研究可以记录radiance的传感器</p></li></ul></li></ul><h2 id="Pinhole-Image-Formation">Pinhole Image Formation</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107162907241.png" alt="image-20221107162907241" style="zoom:50%;" /><p>注：针孔相机拍不出深度(景深)，任何地方都是锐利的，拍不到虚化的存在</p><p>​光线追踪利用的是针孔相机的模型，也得不出景深效果</p><h2 id="Field-of-View-FOV">Field of View(FOV)</h2><p><strong>Effect of Focal Lengh on FOV</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107163405995.png" alt="image-20221107163405995" style="zoom:50%;" /><p><strong>Effect of Sensor Size of FOV</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221107163839867.png" alt="image-20221107163839867" style="zoom:50%;" /><h3 id="Exposure">Exposure</h3><h4 id="H-T-x-E">H = T x E</h4><ul><li><p>Exposure = time x irradiance</p></li><li><p>Exposure time (T)</p><p>Controlled by shutter</p></li><li><p>Irradiance (E)</p><p>Power of light falling on a unit area of sensor</p><p>Controlled by lens aperture(光圈) and focal lengh</p></li></ul><h4 id="Exposure-Controls-in-Photography">Exposure Controls in Photography</h4><ul><li><p>Aperture size</p><p>Change the f-stop(描述光圈大小的量) by opening / closing the aperture</p></li><li><p>Shutter speed</p><p>Change the duration the sensor pixels integrate light</p></li><li><p>ISO gain(感光度)</p><p>Change the amplification (analog and/or digital) between sensor values and digital values</p></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109090334524.png" alt="image-20221109090334524" style="zoom:50%;" /><h4 id="ISO-Gain">ISO(Gain)</h4><p>能够提高曝光度，但是同时会放大噪声</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109090736294.png" alt="image-20221109090736294" style="zoom:50%;" /><h4 id="F-Number-F-Stop-Exposure-Levels">F-Number(F-Stop) : Exposure Levels</h4><p>Written as FN or F/N, N is the f-number</p><p>F-Number defined as the <strong>focal lengh divided by the diameter of te aperture</strong></p><p>可以认为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mfrac><mn>1</mn><mtext>光圈直径</mtext></mfrac></mrow><annotation encoding="application/x-tex">N=\frac{1}{\text{光圈直径}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">光圈直径</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h4 id="Physical-Shutter-1-25-Sec-Exposure">Physical Shutter (1/25 Sec Exposure)</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109091445225.png" alt="image-20221109091445225" style="zoom:50%;" /><ul><li><p>Side Effect of Shutter Speed</p><ul><li><p>Motion blur ： Handshake, subject movement</p></li><li><p>Boubling shutter times doubles motion blur</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109091601790.png" alt="image-20221109091601790" style="zoom:50%;" /></li><li><p>Rolling shutter : different parts of photo taken at different times</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109091802935.png" alt="image-20221109091802935" style="zoom:50%;" /></li><li><p>High-Speed Photoraphy</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109092412617.png" alt="image-20221109092412617" style="zoom:50%;" /></li><li><p>Long-Exposure Photography(延时摄影)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109092442779.png" alt="image-20221109092442779" style="zoom:50%;" /></li></ul></li></ul><h3 id="Thin-Lens-Approximation">Thin Lens Approximation</h3><p>The Thin Lens Equation</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109092822163.png" alt="image-20221109092822163" style="zoom:50%;" /><h3 id="Defocus-Blur">Defocus Blur</h3><ul><li><p>Computing Circle of Confusion(CoC) Size</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109094759185.png" alt="image-20221109094759185" style="zoom:50%;" /><p>一个点的成像反映到sensor上成了一个圈（近视眼）</p></li><li><p>Circle of Confution取决于光圈的大小</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109103311744.png" alt="image-20221109103311744" style="zoom:50%;" /><p>Size of CoC is Inversely Proportional to F-Stop</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109103714547.png" alt="image-20221109103714547" style="zoom:50%;" /></li></ul><h2 id="Ray-Tracing-Ideal-Thin-Lenses">Ray Tracing Ideal Thin Lenses</h2><p><strong>原本的Ray Tracing是小孔呈现，但是也可以模拟Lens</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109103931127.png" alt="image-20221109103931127" style="zoom:50%;" /><h3 id="Ray-Tracing-for-Defocus-Blur-Thin-Lens">Ray Tracing for Defocus Blur (Thin Lens)</h3><h6 id="Set-up">Set up:</h6><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109104027409.png" alt="image-20221109104027409" style="zoom:50%;" /><ul><li>Choose sensor size, lens focal lengh, and aperture size</li><li>Choose depth of subject of interest <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>o</mi></msub></mrow><annotation encoding="application/x-tex">z_o</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(物距)<ul><li>Calculate corresponding depth of sensor <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> from thin lens equation</li></ul></li></ul><h6 id="Rendering">Rendering:</h6><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109104335328.png" alt="image-20221109104335328" style="zoom:50%;" /><ul><li>For each pixel <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">x&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span> on the sensor</li><li>Sample random points <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′</span></span></span></span></span></span></span></span></span></span></span></span> on lens plane</li><li>You know the ray pssing through the lens will hit <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x&#x27;&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′′</span></span></span></span></span></span></span></span></span></span></span></span>(using the thin lens formula, because <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x&#x27;&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′′</span></span></span></span></span></span></span></span></span></span></span></span> is in focus, consider virtual ray (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">x&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>——center of the l))</li><li>Estimate radiance on ray <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>→</mo><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x&#x27;&#x27;\rightarrow x&#x27;&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7519em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′′</span></span></span></span></span></span></span></span></span></span></span></span></li></ul><h3 id="Depth-of-Field">Depth of Field</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109105618952.png" alt="image-20221109105618952" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109105802916.png" alt="image-20221109105802916" style="zoom:50%;" /><h2 id="Light-Field-Lumigraph">Light Field/Lumigraph</h2><h3 id="The-Plenopic-Function">The Plenopic Function</h3><p>全光函数：Parameterize everything that he can see</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109112145575.png" alt="image-20221109112145575" style="zoom:50%;" /><p>is intensity of light</p><ul><li>Seen from a single view point</li><li>At a single time</li><li>Average over the wavelenghs(color) of the visible spectrum</li></ul><p>(can also do <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>, but spherical coordinate are nicer)*</p><p>Grayscale snapshot</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109112304734.png" alt="image-20221109112304734" style="zoom:50%;" />$$P(\theta,\phi)$$<p>Color snapshot</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109112648966.png" alt="image-20221109112648966" style="zoom:50%;" />$$P(\theta,\phi,\lambda)$$<p>A movie</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109125813979.png" alt="image-20221109125813979" style="zoom:50%;" />$$P(\theta,\phi,\lambda,t)$$<p>Holographic movie</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109125910489.png" alt="image-20221109125910489" style="zoom:50%;" />$$P(\theta,\phi,\lambda,t,V_x,V_y,V_z)$$<h6 id="The-Plenoptic-Function">The Plenoptic Function</h6><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109130500712.png" alt="image-20221109130500712" style="zoom:50%;" /><h3 id="Ray">Ray</h3><p>定义光线：</p><ul><li><p>第一类：三维的位置+二维的方向来定义光线</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109131749960.png" alt="image-20221109131749960" style="zoom:50%;" /></li><li><p>第二类：二维的位置+二维的方向来定义光线</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109131900868.png" alt="image-20221109131900868" style="zoom:50%;" /></li></ul><h3 id="Light-Field">Light Field</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109132140298.png" alt="image-20221109132140298" style="zoom:50%;" /><p>The surface of a cube holds all the radiance information dut to enclosed object</p><p>Light Field：函数记录了物体表面不同位置往各个方向的发光情况，光场即为任何一个位置向任何一个方向的发光强度，光场只是全光函数的一部分，只是位置和方向</p><p>2D position：只有s和t轴，位置只是在一个面上进行查询，所以是二维的位置</p><p>光场的含义：从任意一个位置看向物体，都能<strong>查询</strong>到各个点的光照信息</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109133315295.png" alt="image-20221109133315295" style="zoom:50%;" /><p>记录光场：不需要知道光场内部有什么，只需要查询到储存在表面的任何位置任意方向的光照信息即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109133607603.png" alt="image-20221109133607603" style="zoom:50%;" /><p>光场的参数化</p><ul><li><p>1个位置+1个方向进行参数化</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109133839916.png" alt="image-20221109133839916" style="zoom:50%;" /></li><li><p>两个平行的平面，各自取点进行参数化</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109133858535.png" alt="image-20221109133858535" style="zoom:50%;" /></li><li><p>Lumigraph</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109133923175.png" alt="image-20221109133923175" style="zoom:50%;" /></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109134832974.png" alt="image-20221109134832974"  /><p>把一个像素分开并在像素前加一个lens，将来自各个方向的光分到不同的位置，即用一个像素储存了不同方向的irradiance</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109135310056.png" alt="image-20221109135310056" style="zoom:50%;" /><h3 id="Light-Field-Camera">Light Field Camera</h3><p>原理：微透镜(Microlens)，把一个像素替换成一个透镜，使来自不同方向的光通过微透镜分开，分别记录到不同的位置</p><p>优势：可以后期动态聚焦——先拍照，再聚焦</p><h4 id="Understanding">Understanding</h4><p>原本像素储存的irradiance被沿着多个方向拆开了（pixel<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>block of pixels）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109140335954.png" alt="image-20221109140335954" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109141528173.png" alt="image-20221109141528173" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109142122808.png" alt="image-20221109142122808" style="zoom:50%;" /><h1>Color</h1><h2 id="Physical-Basis-of-Color">Physical Basis of Color</h2><h3 id="The-Visible-Spectrum-of-Light">The Visible Spectrum of Light</h3><p>Electromagnetic radiance</p><ul><li><p>Oscillations of different frequencies (wavelenghs)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109145116422.png" alt="image-20221109145116422" style="zoom:50%;" /></li></ul><h3 id="Spectrual-Power-Distribution-SPD">Spectrual Power Distribution (SPD)</h3><p>Salient property in measuring light</p><p>即光线不同的波长对应的强度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109145531636.png" alt="image-20221109145531636" style="zoom:50%;" /><p><strong>SPD of light sources</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109145636052.png" alt="image-20221109145636052" style="zoom:50%;" /><p><strong>Linearity of SPD</strong>：线性关系，<strong>可加性</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109145703756.png" alt="image-20221109145703756" style="zoom:50%;" /><h2 id="Biological-Basis-of-Color">Biological Basis of Color</h2><h3 id="Anatomy-of-the-Human-Eye">Anatomy of the Human Eye</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109150128747.png" alt="image-20221109150128747" style="zoom:50%;" /><h3 id="Retinal-Photoreceptor-Cells：Rods-and-Cones">Retinal Photoreceptor Cells：Rods and Cones</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109150522267.png" alt="image-20221109150522267" style="zoom:50%;" /><ul><li><p>Rod cells：很多，但是只能感知光的强度，得到灰度图</p></li><li><p>Cone cells：相对较少，能感知光的颜色，又分为三类</p><ul><li>锥形细胞分类及响应曲线图：</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109150504086.png" alt="image-20221109150504086" style="zoom: 50%;" /><ul><li><p>锥形细胞在不同人身上分布的差异很大</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109150722600.png" alt="image-20221109150722600" style="zoom:50%;" /></li></ul></li></ul><h2 id="Tristimulus-Theory-of-Color">Tristimulus Theory of Color</h2><h3 id="Spectral-Response-of-Human-Cone-Cells">Spectral Response of Human Cone Cells</h3><p>感知：光线波长SPD和感知细胞响应曲线相乘的积分，得到的<strong>SML才是感知到的颜色</strong>，而不是光的SPD</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109150955582.png" alt="image-20221109150955582" style="zoom:50%;" /><h3 id="The-Human-Visual-System">The Human Visual System</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109151240772.png" alt="image-20221109151240772" style="zoom:50%;" /><h3 id="Metamerism">Metamerism</h3><p><strong>同色异谱现象</strong>：不同的SPD但是看到同样的颜色的现象</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109151537946.png" alt="image-20221109151537946" style="zoom:50%;" /><p><strong>Color matching</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109151629313.png" alt="image-20221109151629313" style="zoom:50%;" /><h2 id="Color-Reproduction-Matching">Color Reproduction/Matching</h2><h3 id="Additive-Color">Additive Color</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109151755784.png" alt="image-20221109151755784" style="zoom:50%;" /><h3 id="Color-Reproduction-with-Matching-Functions">Color Reproduction with Matching Functions</h3><p>s——SPD</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109152345475.png" alt="image-20221109152345475" style="zoom:50%;" /><h2 id="Color-Spaces">Color Spaces</h2><h3 id="Standard-Color-Spaces">Standard Color Spaces</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109152657664.png" alt="image-20221109152657664" style="zoom:67%;" /><h3 id="A-Universal-Color-Space-CIE-XYZ">A Universal Color Space: CIE XYZ</h3><p>另一套匹配系统：一套人造的颜色匹配系统，初值不是存在的颜色</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109152920001.png" alt="image-20221109152920001" style="zoom: 67%;" /><h3 id="Separating-Luminance，Chromaticity">Separating Luminance，Chromaticity</h3><p><strong>让XYZ系统能表示的颜色显示出来</strong></p><p>对大写的XYZ做一个可视化：将XYZ进行归一化（此处的归一和向量不同，此处只是指x+y+z=1），固定了Y，可视化x，y（因为Y只是强度）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109153909093.png" alt="image-20221109153909093" style="zoom:50%;" /><h3 id="CIE-Chromaticity-Diagram">CIE Chromaticity Diagram</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109154012297.png" alt="image-20221109154012297" style="zoom:50%;" /><h3 id="Gamut">Gamut</h3><p>不同的颜色空间Gamut色域是不同的</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109154421884.png" alt="image-20221109154421884" style="zoom:50%;" /><h3 id="HSV-Color-Space">HSV Color Space</h3><p><strong>Hue—Saturation—Value</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109154748402.png" alt="image-20221109154748402" style="zoom:67%;" /><h3 id="CIELAB-Space-AKA-L-a-b">CIELAB Space(AKA L*a*b*)</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109154924702.png" alt="image-20221109154924702" style="zoom:50%;" /><h4 id="Opponent-Color-Theory"><strong>Opponent Color Theory</strong></h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109155127206.png" alt="image-20221109155127206" style="zoom: 67%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109155137787.png" alt="image-20221109155137787" style="zoom:67%;" /><h3 id="CMYK-A-Subtractive-Color-Space">CMYK: A Subtractive Color Space</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221109155913938.png" alt="image-20221109155913938" style="zoom:50%;" /><h1>Animation Intro</h1><h2 id="Keyframe-Animation">Keyframe Animation</h2><h3 id="Keyframe">Keyframe</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110083228747.png" alt="image-20221110083228747" style="zoom: 80%;" /><ul><li>Lead animator creates keyframes</li><li>Assistant (person or computer) creates in-between frames (“tweening”)</li></ul><h3 id="Keyframe-Interpolation">Keyframe Interpolation</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110083455365.png" alt="image-20221110083455365" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110083543341.png" alt="image-20221110083543341" style="zoom:50%;" /><h2 id="Physical-Simulation">Physical Simulation</h2><ul><li>Newton’s Law</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mi>m</mi><mi>a</mi></mrow><annotation encoding="application/x-tex">F = ma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">ma</span></span></span></span></span></p><ul><li><p>Generate motion of objects using numerical simulation</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110083811115.png" alt="image-20221110083811115" style="zoom:50%;" /></li><li><p>Example</p><ul><li>Cloth Simulation</li><li>Fluids<ul><li>模拟流体如何运动</li><li>模拟位置、形状后去渲染，得出模样</li></ul></li><li>Mass Spring Rope/Mesh（质点弹簧系统）</li><li>Hair</li></ul></li></ul><h2 id="Mass-Spring-System">Mass Spring System</h2><h3 id="A-Simple-Spring">A Simple Spring</h3><p>—— 一系列相互连接的<strong>质点</strong>和<strong>弹簧</strong></p><h4 id="Idealized-spring">Idealized spring</h4><p>Zero length spring</p><ul><li><p>Hooke‘s Law</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mrow><mi>a</mi><mo>→</mo><mi>b</mi></mrow></msub><mo>=</mo><msub><mi>k</mi><mi>s</mi></msub><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{a\rightarrow b} = k_s(b-a)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">→</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mrow><mi>a</mi><mo>→</mo><mi>b</mi></mrow></msub><mo>=</mo><mo>−</mo><msub><mi>f</mi><mrow><mi>b</mi><mo>→</mo><mi>a</mi></mrow></msub></mrow><annotation encoding="application/x-tex">f_{a\rightarrow b} = -f_{b\rightarrow a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">→</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="mrel mtight">→</span><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>Problem: this spring wants to have zero length</p></li></ul><h4 id="Non-Zero-Length-Spring">Non-Zero Length Spring</h4><p>Spring with non-zero <strong>rest length<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span></strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>f</mi><mrow><mi>a</mi><mo>→</mo><mi>b</mi></mrow></msub><mo>=</mo><msub><mi>k</mi><mi>s</mi></msub><mfrac><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow><mrow><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo>−</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi></mrow></mfrac><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>b</mi><mo>−</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f_{a\rightarrow b}=k_s\frac{b-a}{||b-a||}(||b-a||-l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mrel mtight">→</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.936em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∣∣</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span><span class="mord">∣∣</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">∣∣</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">∣∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span></span></p><p>Problem: oscillates forever</p><h4 id="Dot-Notation-for-Derivatives">Dot Notation for Derivatives</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110085300203.png" alt="image-20221110085300203" style="zoom:50%;" /><h4 id="Internal-Damping-Force-Energy-Loss">Internal Damping Force(Energy Loss)</h4><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110090041930.png" alt="image-20221110090041930" style="zoom:50%;" /><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>k</mi><mi>d</mi></msub></mrow><annotation encoding="application/x-tex">k_d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is a damping coefficient</p></li><li><p>Viscous drag only on change in spring length</p></li></ul><h3 id="Structures-from-Springs">Structures from Springs</h3><ul><li><p>Behavior is determined by structure linkages</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110090901637.png" alt="image-20221110090901637" style="zoom:50%;" /><ul><li>This Structure will not resist shearing</li><li>This structure will not resist out-of-plane bending (该形状可以折成一个平面并且没有反抗弯曲的力)</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110091404952.png" alt="image-20221110091404952" style="zoom:50%;" /><ul><li>This structure will resist shearing. Less directional bias.</li><li>This structure will resist out-of-plane bending. Red spring should be much weaker（蓝色线力更强，红色只是用来抵抗弯曲）</li></ul></li></ul><h3 id="Aside-FEM">Aside: FEM</h3><p><strong>Finite Element Method(FEM)</strong> Instead of Springs</p><p>有限元方法，适用于力的扩散与传导</p><h2 id="Particle-Systems">Particle Systems</h2><h3 id="Particle-system">Particle system</h3><ul><li><p>Model dynamical systems as collection of large numbers of particles</p></li><li><p>Each particle’s motion is defined by a set of physical (or non-physical) forces (e.g. 粒子之间的碰撞、引力，粒子受到的重力)</p></li><li><p>Popular technique in graphics and games</p><ul><li>Easy to understand , implement</li><li>Scalable: fewer particles for speed, more higher complexity</li></ul></li><li><p>Challenges</p><ul><li>May need many particles (e.g. fluid)</li><li>May need acceleration structure (e.g. to find nearest particles for interactions)</li></ul></li></ul><h3 id="Particle-System-Animations">Particle System Animations</h3><p>For each frame in animation</p><ul><li>[If needed] Create new particles</li><li>Calculate forces on each particle</li><li>Update each particle’s position and velocity</li><li>[If needed] Remove dead particles</li><li>Render particles</li></ul><h3 id="Particles-System-Forces">Particles System Forces</h3><ul><li><p>Attraction and repulsion forces</p><ul><li>Gravity, electromagnetism, …</li><li>Springs, propulsion, …</li></ul></li><li><p>Damping forces</p><ul><li>Friction, air drag, viscosity, …</li></ul></li><li><p>Collisions</p><ul><li>Walls, containers, fixed objects, …</li><li>Dynamic objects, character body parts, …</li></ul></li><li><p>Gravitational Attraction</p><ul><li><p>Newton’s universal law of gravitation</p><ul><li>Gravitational pull between particles<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mi>g</mi></msub><mo>=</mo><mi>G</mi><mfrac><mrow><msub><mi>m</mi><mn>1</mn></msub><msub><mi>m</mi><mn>2</mn></msub></mrow><msup><mi>d</mi><mn>2</mn></msup></mfrac></mrow><annotation encoding="application/x-tex">F_g = G\frac{m_1m_2}{d^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.7936em;vertical-align:-0.686em;"></span><span class="mord mathnormal">G</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p></li></ul></li></ul></li><li><p>Examples</p><ul><li><p>Galaxy Simulation</p></li><li><p>Particle-Based Fluids</p></li></ul></li></ul><h3 id="Simulated-Flocking-as-an-ODE">Simulated Flocking as an ODE</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110094637224.png" alt="image-20221110094637224" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110094716284.png" alt="image-20221110094716284" style="zoom:50%;" /><p><strong>考虑个体与群体之间的联系</strong></p><h2 id="Forward-Kinematics">Forward Kinematics</h2><h3 id="Forward-Kinematics-2">Forward Kinematics</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110154614676.png" alt="image-20221110154614676" style="zoom: 25%;" /><p>Articulated skeleton</p><ul><li>Topology (what’s connected to what)</li><li>Geometric relations from joints</li><li>Tree structure (in absence of loops)</li></ul><p>Joint types</p><ul><li><p>Pin (1D rotation)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110154753466.png" alt="image-20221110154753466" style="zoom:50%;" /></li><li><p>Ball (2D rotation)</p></li><li><p>Prismatic joint (translation)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110154703490.png" alt="image-20221110154703490" style="zoom:50%;" /></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110154641331.png" alt="image-20221110154641331" style="zoom:50%;" /><p>Kinematics Pros and Cons</p><p>Strenghs</p><ul><li>Direct control is convenient</li><li>Implementation is straightforward</li></ul><p>Weakness</p><ul><li>Animation may be inconsistent with physics</li><li>Time consuming for artists</li></ul><h3 id="Inverse-Kinematics">Inverse Kinematics</h3><p>Animator provides position of end-effector, and computer must determine joint angles that satisfy constrains</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110221119909.png" alt="image-20221110221119909" style="zoom:50%;" /><p>Problems(Hard):</p><ul><li><p>Multiple solutions in configuration space</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110221323011.png" alt="image-20221110221323011" style="zoom:50%;" /></li><li><p>Solutions may not always exist</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110221410474.png" alt="image-20221110221410474" style="zoom:50%;" /></li></ul><p>Numerical solution to general N-link IK problem</p><ul><li>Choose an initial configuration</li><li>Define an error metric</li><li>Compute gradient of error as function of configuration</li><li>Apply gradient descent</li></ul><h2 id="Rigging">Rigging</h2><p>Rigging is a set of higher level controls on a character that allow more rapid &amp; intuitive modification of pose, deformations, expression, etc.</p><p>Important</p><ul><li>Like strings on a puppet</li><li>Captures all meaningful character changes</li><li>Varies from character to character</li></ul><p>Expensive to create</p><ul><li>Manual effort</li><li>Requires both artistic and technical training</li></ul><p><strong>Blend Shapes</strong></p><p>Instead of skeleton, interpolate directly between surfaces</p><p>Simplest scheme: take linear combination of vertex positions</p><p>Spline used to control choice of weight over time</p><p>(控制点和控制点之间做插值，blend控制点及控制点周围能够影响的区域)</p><h2 id="Motion-Capture">Motion Capture</h2><p>Data-driven approach to creating animation sequences</p><ul><li>Record real-world performance</li><li>Extract pose as a function of time from the data collected</li></ul><p><strong>Pros and Cons</strong></p><ul><li>Strenghs<ul><li>Can acpture arge amounts of real data quickly</li><li>Realism can be high</li></ul></li><li>Weaknesses<ul><li>Complex and costly set-ups</li><li>Captured animation may not meet artistic needs, requiring alterations</li></ul></li></ul><h2 id="The-Production-Pipeline">The Production Pipeline</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221110225001723.png" alt="image-20221110225001723" style="zoom: 80%;" /><h1>Animation Simulation</h1><h2 id="Single-Particle-Simulation">Single Particle Simulation</h2><p>First: study motion of a single particle</p><p>Later: generalize to a multitude of particles</p><h3 id="Velocity-Field">Velocity Field</h3><p>To start, assume motion of particle determined by a velocity vector field that is a function of position and time: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v(x,t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111104313402.png" alt="image-20221111104313402" style="zoom:50%;" /><h3 id="Ordinary-Differential-Equation-ODE">Ordinary Differential Equation(ODE)</h3><p>Computing position of particle over time requires solving a first-order ordinary differential equation:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>=</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>v</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{dx}{dt} = x&#x27; = v(x,t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8019em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></p><ul><li>“first-order”: the first derivative being taken</li><li>“Ordinary”: no partial derivative (i.e. x is just a function of t)</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111110640553.png" alt="image-20221111110640553" style="zoom:50%;" /><h3 id="Euler’s-Method">Euler’s Method</h3><ul><li><p>Simple iterative method</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>x</mi><mrow><mi>t</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></msup><mo>=</mo><msup><mi>x</mi><mi>t</mi></msup><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mi>t</mi></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">x^{t+\Delta t} = x^t + \Delta t(x^t)&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9269em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0936em;vertical-align:-0.25em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>t</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></msub><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mi>t</mi></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mi>t</mi></msup><msup><mo stretchy="false">)</mo><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup></mrow><annotation encoding="application/x-tex">(x_{t+\Delta t})&#x27; = (x^t)&#x27; + \Delta t(x^t)&#x27;&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0519em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0936em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0936em;vertical-align:-0.25em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′′</span></span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Euler’s Method - Errors</p><p>With numerical integration, errors accumulate</p><p>增大time step可以减小误差</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111125044191.png" alt="image-20221111125044191" style="zoom:50%;" /><p>time step affect the accuracy</p></li><li><p>Instability of Euler Method</p><p>不稳定，例如要沿着下面的圆形移动，但不管time step有多小，往下进行会越来越脱离想要的结果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111125339723.png" alt="image-20221111125339723" style="zoom:50%;" /></li></ul><h3 id="Errors-and-Instability">Errors and Instability</h3><p>Solving by numerical integration with finite differences leads to two problems:</p><ul><li><p>Errors</p><ul><li><p>Errors at each time step accumulate</p><p>Accuracy decreases as simulation proceeds</p></li><li><p>Accuracy may not be critical in graphics applications</p></li></ul></li><li><p>Instability</p><ul><li>Errors can compound, causing the simulation to <strong>diverge</strong> even when the underlying system does not</li><li>Lack ok stability is a fundamental problem in simulation, and cannot be ignored</li></ul></li></ul><h3 id="Combating-Instability">Combating Instability</h3><p><strong>How to determine/quantize “stability”?</strong></p><ul><li><p>Local truncation error(every step) / total accumulated error(overall)</p></li><li><p>这些数字没有意义，研究的是他们的导数</p></li><li><p>Implicit Euler has order 1, which means that</p><ul><li><p>Local truncation error: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>h</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p></li><li><p>Global truncation error: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span></p><p>(h is the step, i.e. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>)</p></li></ul></li><li><p>Understanding of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span></p><p>If we halve h, we can expect the error to halve as well</p></li></ul><h4 id="Midpoint-Method-Modified-Euler">Midpoint Method/Modified Euler</h4><ul><li>Average velocities at start and endpoint</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111131159438.png" alt="image-20221111131159438" style="zoom:50%;" /><p>理想运动路径是中间的曲线，实际路径是下面的直线</p><p>实际上是用了两次Euler方法，先用出发点的速度场来算出中点b的速度，在以此速度回到起始点作为真正的速度</p><ul><li><p>Better results: 算出的局部的二次模型，优于原本的一次模型</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111131540742.png" alt="image-20221111131540742" style="zoom:50%;" /></li></ul><h4 id="Adaptive-Step-Size">Adaptive Step Size</h4><p>试着把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span>分成两个部分，如果两个结果相差很远，就减小step size并再次进行判断</p><p>得到右下的图，在不同的位置会有不同的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">\Delta t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span><span class="mord mathnormal">t</span></span></span></span></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111132259048.png" alt="image-20221111132259048" style="zoom:50%;" /><h4 id="Implicit-Backward-Euler-Method">Implicit(Backward) Euler Method</h4><ul><li><p>Use derivatives in the future, for the current step</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111143114062.png" alt="image-20221111143114062" style="zoom:67%;" /></li><li><p>Solve nonlinear problem for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mi>t</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">x^{t+\Delta t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mrow><mi>t</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mi>t</mi></mrow></msup><msup><mo stretchy="false">)</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">(x^{t+\Delta t})&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0913em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Using root-finding algorithm</p></li><li><p>Offers much better stability</p></li></ul><h4 id="Rung-Kutta-Families">Rung-Kutta Families</h4><p>A family of advanced methods for solving ODEs</p><ul><li>Especially good at dealing with non0linearity</li><li>It’s order-four version is the most widely used</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111192642402.png" alt="image-20221111192642402" style="zoom:50%;" /><h4 id="Position-Based-Verlet-Integration">Position-Based/Verlet Integration</h4><ul><li><p>Idea:</p><ul><li>After modified Euler forward-step, constrain position of particles to prevent divergent, unstable behavior</li><li>Use constrained positions to calculate velocity</li><li>Both of these ideas will dissipate energy, stabilize</li></ul></li><li><p>Pros and cons</p><ul><li>Fast and simple</li><li>Not physically based, dissipates energy(error)</li></ul></li></ul><h2 id="Rigid-Body-Simulation">Rigid Body Simulation</h2><p>物体内的所有点运动规律都一致</p><p>Simple case</p><ul><li>Similar to simulation a particle</li><li>Just consider a bit more properties</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111193458458.png" alt="image-20221111193458458" style="zoom:50%;" /><h2 id="Fluid-Simulation">Fluid Simulation</h2><h3 id="A-Simple-Position-Based-Method">A Simple Position-Based Method</h3><p>Key idea</p><ul><li>Assuming water is composed of small rigid-body spheres</li><li>Assuming the water cannot be compressed(i.e. const density)</li><li>So, as long as the density changes somewhere, it should be “corrected” via changing the position of particles</li><li>You need to know the gradient of the density anywhere w.r.t. each particle’s position</li><li>任何一个位置上让原本不正确的密度恢复原本的密度，并且我知道如何调整各个小球的位置使得他的密度往我们所需的方向上去变化——Gradient Descent</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111194137333.png" alt="image-20221111194137333" style="zoom:80%;" /><h3 id="Eulerian-vs-Lagrangian">Eulerian vs. Lagrangian</h3><p>Two different views to simulating <strong>large collections of matters</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111195004578.png" alt="image-20221111195004578" style="zoom:50%;" /><h3 id="Material-Point-Method-MPM">Material Point Method(MPM)</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221111195259997.png" alt="image-20221111195259997" style="zoom:50%;" /><h2 id="—Next—">—Next—</h2><ul><li>Games201 —— Advanced Physics Engines 2020: A Hands-on Tutorial</li><li>Real-Time High Quality Rendering</li></ul>]]></content>
    
    
    <summary type="html">Games101课程的学习笔记</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图形学" scheme="https://himoqiuhan.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="Games" scheme="https://himoqiuhan.github.io/tags/Games/"/>
    
  </entry>
  
  <entry>
    <title>Games101课程笔记（一）</title>
    <link href="https://himoqiuhan.github.io/2022/10/09/Notes-Games101-1/"/>
    <id>https://himoqiuhan.github.io/2022/10/09/Notes-Games101-1/</id>
    <published>2022-10-08T16:00:00.000Z</published>
    <updated>2023-06-14T00:40:41.148Z</updated>
    
    <content type="html"><![CDATA[<h1>线性代数 Linear Algebra</h1><h2 id="点乘-Dot">点乘 Dot</h2><ul><li>计算：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo>⋅</mo><mover accent="true"><mi>y</mi><mo>⃗</mo></mover><mo>=</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>y</mi><mn>1</mn></msub><msub><mi>y</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\vec{x} \cdot \vec{y} = |x||y|\cos\theta(x_1,y_1) \cdot (x_2,y_2) = x_1x_2 + y_1y_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">x</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>​向量点乘向量得到常量</p><ul><li>用途：</li></ul><p>​判断两条向量<strong>是否同向</strong></p><h2 id="叉乘-Cross">叉乘 Cross</h2><ul><li>计算：<ul><li>方向：右手螺旋定则</li><li>大小：</li></ul></li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>y</mi><mo>⃗</mo></mover><mo>=</mo><mi mathvariant="normal">∣</mi><mover accent="true"><mi>x</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mover accent="true"><mi>y</mi><mo>⃗</mo></mover><mi mathvariant="normal">∣</mi><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">\vec{x} \times \vec{y} = |\vec{x}||\vec{y}|\sin\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">x</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><p>​向量叉乘向量得到向量，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}\times\vec{a} = \vec0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9274em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></p><p>​写成矩阵形式：</p><p>​</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>a</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>a</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mi>a</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>×</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mi>b</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>b</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>z</mi><mi>b</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mi>a</mi></msub><msub><mi>z</mi><mi>b</mi></msub><mo>−</mo><msub><mi>y</mi><mi>b</mi></msub><msub><mi>z</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>z</mi><mi>a</mi></msub><msub><mi>x</mi><mi>b</mi></msub><mo>−</mo><msub><mi>z</mi><mi>b</mi></msub><msub><mi>x</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>x</mi><mi>a</mi></msub><msub><mi>y</mi><mi>b</mi></msub><mo>−</mo><msub><mi>x</mi><mi>b</mi></msub><msub><mi>y</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\vec{a}\times\vec{b} &amp;= \left( \begin{matrix}x_a\\y_a\\z_a\end{matrix}\right)\times\left( \begin{matrix}x_b\\y_b\\z_b\end{matrix}\right)= \left(\begin{matrix}y_az_b - y_bz_a\crz_ax_b - z_bx_a\crx_ay_b - x_by_a\cr\end{matrix}\right)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.9em;vertical-align:-1.7em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.2em;"><span class="pstrut" style="height:4.05em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.2em;"><span style="top:-4.2em;"><span class="pstrut" style="height:4.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>用途：</p><ul><li><p>判定左右：判断一条向量在另一条向量的顺时针或逆时针方向</p><p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/20230603162954.png" alt=""></p><p>判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的顺时针方向还是逆时针方向：</p><ul><li>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>z</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>&gt;</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{z} = \vec{a} \times \vec{b}&gt; \vec{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0165em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9274em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mtext>在</mtext><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b} \text{在} \vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">在</span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的逆时针方向</li><li>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>z</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>&lt;</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{z} = \vec{a} \times \vec{b}&lt; \vec{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7973em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0165em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9274em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mtext>在</mtext><mover accent="true"><mi>a</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{b} \text{在} \vec{a}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9774em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">b</span></span><span style="top:-3.2634em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">在</span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> 的顺时针方向</li></ul></li><li><p>判定内外：二维上判断点在多边形内或外</p><p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/20230603163029.png" alt=""></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∵</mo><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><mi>A</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>&gt;</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mrow><mi>B</mi><mi>C</mi></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><mi>B</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>&gt;</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover><mo separator="true">,</mo><mtext> </mtext><mover accent="true"><mrow><mi>C</mi><mi>A</mi></mrow><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mrow><mi>C</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mo>&gt;</mo><mover accent="true"><mn>0</mn><mo>⃗</mo></mover><mo separator="true">,</mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">\because\vec{AB}\times\vec{AP}&gt;\vec{0},\ \vec{BC}\times\vec{BP}&gt;\vec{0},\\vec{CA}\times\vec{CP}&gt;\vec{0},\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.0833em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0054em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0054em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">BP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1608em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">A</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0054em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1219em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9274em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord">0</span></span><span style="top:-3.2134em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"> </span></span></span></span></span></p></li></ul></li></ul><p>所以<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>A</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mtext>在</mtext><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{AP} \text{在}\vec{AB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">在</span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>的逆时针方向<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>B</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mtext>在</mtext><mover accent="true"><mrow><mi>B</mi><mi>C</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{BP} \text{在} \vec{BC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">BP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">在</span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>的逆时针方向<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><mi>C</mi><mi>P</mi></mrow><mo>⃗</mo></mover><mtext>在</mtext><mover accent="true"><mrow><mi>V</mi><mi>A</mi></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{CP} \text{在} \vec{VA}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9663em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">在</span></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord mathnormal">A</span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>的逆时针方向<br>所以<br>P在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">△</mi><mrow><mi>A</mi><mi>B</mi><mi>C</mi></mrow></mrow><annotation encoding="application/x-tex">\triangle{ABC}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">△</span><span class="mord"><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07153em;">BC</span></span></span></span></span>内部</p><h2 id="矩阵相乘">矩阵相乘</h2><p>(M <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span></span></span> N) (N <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span></span></span> P) = (M <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span></span></span> P)，即 M行N列矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">×</span></span></span></span>N行P列矩阵 = M行P列矩阵</p><h1>变换 Transformation</h1><h2 id="二维变换">二维变换</h2><ul><li><p><strong>缩放矩阵</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}S_x &amp; 0\cr0 &amp; S_y\cr\end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p></li><li><p><strong>对称矩阵</strong></p><p>沿Y轴</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}-1 &amp; 0\cr0 &amp; 1\cr\end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>沿X轴</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}1 &amp; 0\cr0 &amp; -1\cr \end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p></li><li><p><strong>切变矩阵</strong></p><p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/20230603164027.png" alt=""></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}1 &amp; a\cr0 &amp; 1\cr\end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p></li><li><p><strong>旋转变换</strong></p><p>（默认旋转中心为原点、逆时针方向旋转）</p><p><img src="https://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/20230603164129.png" alt=""></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}\cos{\theta} &amp; -\sin{\theta}\cr\sin{\theta} &amp; \cos{\theta}\end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>==<strong>旋转变换是正交矩阵</strong>==，证明如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∵</mo><msub><mi>R</mi><mi>θ</mi></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\becauseR_\theta = \left(\begin{matrix}cos{\theta} &amp; -sin{\theta}\crsin{\theta} &amp; cos{\theta}\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>∴</mo><msub><mi>R</mi><mi>θ</mi></msub><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">R_{-\theta} = \left(\begin{matrix}cos{\theta} &amp; sin{\theta}\cr-sin{\theta} &amp; cos{\theta}\end{matrix}\right)\thereforeR_\theta R_{-\theta} = E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span></span></p><p>所以 $ R_\theta$ 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub></mrow><annotation encoding="application/x-tex">R_{-\theta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span> 互逆</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∴</mo><msub><mi>R</mi><mrow><mo>−</mo><mi>θ</mi></mrow></msub><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><msubsup><mi>R</mi><mi>θ</mi><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">\therefore R_{-\theta} = R_\theta^{-1} = R_\theta^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6922em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1555em;vertical-align:-0.2914em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.4086em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2914em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1383em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.453em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">R_\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是正交矩阵</p></li><li><p><strong>平移变换</strong>（非线性变换）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}1 &amp; 0\cr0 &amp; 1\cr \end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)+\left(\begin{matrix}t_x\\t_y\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p></li></ul><h2 id="齐次坐标">齐次坐标</h2><p>用途：将线性变换与非线性变换统一为一个公式（矩阵x向量）</p><h3 id="齐次坐标的引入">齐次坐标的引入</h3><ol><li><p>引入齐次坐标——通过增加一个维度的数来表示原本维度的数据</p><p>一般像这样设：</p><ul><li><p>2D的点</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>2D的向量</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\0\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul></li><li><p>引入齐次坐标之后，也满足以下计算的意义</p></li></ol><ul><li>vector + vector = vector</li><li>point - point = vector</li><li>point + vector = point</li><li>point + point = 两个点的中点point</li></ul><ol start="3"><li><p>齐次坐标中</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\w\end{matrix}\right)==\left(\begin{matrix}x/w\\y/w\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以在齐次坐标中，point + point表示的是两个点的中点</p></li></ol><h3 id="齐次坐标的运用">齐次坐标的运用</h3><p><strong>仿射变换 = 线性变换 + 平移变换</strong>，即</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>+</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\end{matrix}\right)=\left(\begin{matrix}a &amp; b\crc &amp; d\cr \end{matrix}\right)\left(\begin{matrix}x\\y \end{matrix}\right)+\left(\begin{matrix}t_x\\t_y\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>(由此可知：<strong>仿射变换先进行线性变换再进行平移</strong>)</p><p><strong>如果使用齐次坐标：</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\\1\end{matrix}\right)=\left(\begin{matrix}a &amp; b &amp; t_x\crc &amp; d &amp; t_y\cr 0 &amp; 0 &amp; 1\end{matrix}\right)\left(\begin{matrix}x\\y \\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>二维仿射变换矩阵的最后一行永远是(0,0,1)，但在其他情况下可能有所不同</p><p>用齐次坐标的形式表示常用仿射变换：</p><ul><li><p>Scale</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">S(s_x,s_y) = \left(\begin{matrix}s_x &amp; 0 &amp; 0\cr0 &amp; s_y &amp; 0\cr0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Rotation</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R(\alpha) = \left(\begin{matrix}cos{\alpha} &amp; -sin{\alpha} &amp; 0\crsin{\alpha} &amp; cos{\alpha} &amp; 0\cr0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Transition</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}1 &amp; 0 &amp; t_x\cr0 &amp; 1 &amp; t_y\cr0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h3 id="组合变换">组合变换</h3><h4 id="逆变换">逆变换</h4><p>乘以逆矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>M</mi><mo>−</mo></msup></mrow><annotation encoding="application/x-tex">M^-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7713em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7713em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">−</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="组合变换-2">组合变换</h4><p><strong>矩阵的应用是从右到左的：</strong></p><p>变换的顺序不同则得到的结果不同，进行一次变换就在当前矩阵<strong>前方</strong>乘上一个矩阵，且注意矩阵乘法不能交换顺序</p><p>即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>θ</mi></msub><mi>T</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">!</mo><mo>=</mo><mtext> </mtext><mi>T</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><msub><mi>R</mi><mi>θ</mi></msub></mrow><annotation encoding="application/x-tex">R_\theta T(1,0)\ != \ T(1,0)R_\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace"> </span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>**(性能)**但是矩阵乘法有结合律，通过预先相乘获得一个表示一系列变换的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn><mtext>的矩阵</mtext><mo>→</mo></mrow><annotation encoding="application/x-tex">3 \times 3\text{的矩阵}\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">3</span><span class="mord text"><span class="mord cjk_fallback">的矩阵</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span></span></span>可以借此来优化性能</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msub><mi>A</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><msub><mi>A</mi><mi>n</mi></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mn>2</mn></msub><msub><mi>A</mi><mn>1</mn></msub><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">A_n(...A_2(A_1(x))) = A_n...A_2A_1\left(\begin{matrix}x\\y\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="分解组合变换">分解组合变换</h4><p>问题的提出：“如何沿着一个给定的点旋转？”</p><p>将中心点移动到远点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>进行旋转<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>移动回原位置</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>c</mi><mo stretchy="false">)</mo><mi>T</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mi>T</mi><mo stretchy="false">(</mo><mo>−</mo><mi>c</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(c)T(\alpha)T(-c)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">c</span><span class="mclose">)</span></span></span></span></span></p><p>(变换是从右向左进行)</p><h3 id="三维变换">三维变换</h3><p>用二维进行类比，可以得出：</p><ul><li><p>3D point</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>3D vector</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\z\\0\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>齐次坐标中</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>w</mi></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mi mathvariant="normal">/</mi><mi>w</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x\\y\\z\\w\end{matrix}\right)==\left(\begin{matrix}x/w\\y/w\\z/w\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>仿射变换：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>h</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>i</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>z</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\left(\begin{matrix}x&#x27;\\y&#x27;\\z&#x27;\\1\end{matrix}\right)=\left(\begin{matrix}a &amp; b &amp; c &amp; t_x\crd &amp; e &amp; f &amp; t_y\crg &amp; h &amp; i &amp; t_z\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)\left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">e</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">h</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">c</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">i</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>Scale</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>s</mi><mi>z</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>s</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">S(s_x,s_y,s_z) = \left(\begin{matrix}s_x &amp; 0 &amp; 0 &amp; 0\cr0 &amp; s_y &amp; 0 &amp; 0\cr0 &amp; 0 &amp; s_z &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Translation</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>t</mi><mi>y</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>t</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">T(t_x,t_y) = \left(\begin{matrix}1 &amp; 0 &amp; t_x\cr0 &amp; 1 &amp; t_y\cr0 &amp; 0 &amp; 1\cr\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li><li><p>Rotation</p><ul><li>基于轴旋转</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_x(\alpha) = \left(\begin{matrix}1 &amp; 0 &amp; 0 &amp; 0\cr0 &amp; cos{\alpha} &amp; -sin{\alpha} &amp; 0 \cr0 &amp; sin{\alpha} &amp; cos{\alpha} &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_y(\alpha) = \left(\begin{matrix}cos{\alpha} &amp; 0 &amp; sin{\alpha} &amp; 0\cr0 &amp; 1 &amp; 0 &amp; 0 \cr-sin{\alpha} &amp; 0 &amp; cos{\alpha} &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R_z(\alpha) = \left(\begin{matrix}cos{\alpha} &amp; -sin{\alpha} &amp; 0 &amp; 0\crsin{\alpha} &amp; cos{\alpha} &amp; 0 &amp; 0\cr0 &amp; 0 &amp; 1 &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>任意旋转</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>R</mi><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow></msub><mo stretchy="false">(</mo><mi>α</mi><mo separator="true">,</mo><mi>β</mi><mo separator="true">,</mo><mi>γ</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><msub><mi>R</mi><mi>y</mi></msub><mo stretchy="false">(</mo><mi>β</mi><mo stretchy="false">)</mo><msub><mi>R</mi><mi>z</mi></msub><mo stretchy="false">(</mo><mi>γ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R_{xyz}(\alpha,\beta,\gamma) = R_x(\alpha)R_y(\beta)R_z(\gamma)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mathnormal mtight" style="margin-right:0.04398em;">yz</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span><span class="mclose">)</span></span></span></span></span></p><p><strong>欧拉角：</strong></p><p>​yaw：左右摇头</p><p>​pitch：上下点头</p><p>​roll：左右偏头</p><p>沿着轴<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>旋转<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>角度——<strong>Rodrigoues Rotation Formula</strong>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo stretchy="false">(</mo><mover accent="true"><mi>n</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mi>I</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>α</mi><mo stretchy="false">)</mo><mover accent="true"><mi>n</mi><mo>⃗</mo></mover><msup><mover accent="true"><mi>n</mi><mo>⃗</mo></mover><mi>T</mi></msup><mo>+</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>x</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>z</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>n</mi><mi>y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>n</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">R(\vec{n},\alpha) = cos{\alpha}I + (1-cos{\alpha})\vec{n}\vec{n}^T+sin({\alpha})\left(\begin{matrix}0 &amp; -n_x &amp; n_y\crn_z &amp; 0 &amp; -n_x\cr-n_y &amp; n_x &amp; 0\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1413em;vertical-align:-0.25em;"></span><span class="mord mathnormal">cos</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mclose">)</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">in</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='3.600em' viewBox='0 0 875 3600'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>为默认轴，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>n</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">n</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>过圆心)</p></li></ul></li></ul></li></ul><h1>MVP</h1><h2 id="Model-Transformation-模型变换">Model Transformation 模型变换</h2><p>通过World Matrix将顶点数据从Object Space转换到World Space</p><h2 id="View-Camera-Transformation-视图-相机变换">View / Camera Transformation 视图/相机变换</h2><h3 id="首先定义一个相机">首先定义一个相机</h3><ol><li>Position:  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></li><li>Look at/gaze direction: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>g</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></li><li>Up direction : <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8981em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8981em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">t</span></span><span style="top:-3.1841em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span>（定义Roll —— 即是横屏还是竖屏）</li></ol><h3 id="如何进行视图变换">如何进行视图变换</h3><ol><li><p>相机标准位置</p><ul><li>原点</li><li>向上方向为y轴正方向</li><li>看向-z方向</li></ul></li><li><p>通过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>将Camera以及其他物体转换到标准位置</p><ul><li>Translation Matrix：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{e}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.714em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">e</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> to orgin</li><li>Rotate：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>g</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{g}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">-z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span></li><li>Rotate：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8981em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8981em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">t</span></span><span style="top:-3.1841em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></li><li>Rotate： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>g</mi><mo>⃗</mo></mover><mo>×</mo><mover accent="true"><mi>t</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{g}\times\vec{t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2077em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8981em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8981em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">t</span></span><span style="top:-3.1841em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span></li></ul></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> in Math</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><msub><mi>R</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><msub><mi>T</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub></mrow><annotation encoding="application/x-tex">M_{view} = R_{view}T_{view}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0077em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>（先平移再旋转）</p><p>注：旋转矩阵是正交矩阵，用逆矩阵更好得出矩阵<br>逆变换inverse rotation是: X to (g x t), Y to t, Z to -g</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>x</mi><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>y</mi><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><msub><mi>z</mi><mover accent="true"><mi>e</mi><mo>⃗</mo></mover></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">T_{view} = \left(\begin{matrix}1 &amp; 0 &amp; 0 &amp; -x_{\vec{e}}\cr0 &amp; 1 &amp; 0 &amp; -y_{\vec{e}}\cr0 &amp; 0 &amp; 1 &amp; -z_{\vec{e}}\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.8em;vertical-align:-2.15em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.545em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight">e</span></span><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.155em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.545em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight">e</span></span><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.155em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.545em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight">e</span></span><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.155em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><p>\left(<br>\begin{matrix}<br>x_{\vec{g}\times\vec{t}} &amp; y_{\vec{g}\times\vec{t}} &amp; z_{\vec{g}\times\vec{t}} &amp; 0\cr<br>x_{t} &amp; y_{t} &amp; z_{t} &amp; 0\cr<br>x_{-g} &amp; y_{-g} &amp; z_{-g} &amp; 0\cr<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><p>R_{view} = {(R_{view}^{-1})}^T =<br>\left(<br>\begin{matrix}<br>x_{\vec{g}\times\vec{t}} &amp; x_{\vec{t}} &amp; x_{\vec{g}} &amp; 0\cr<br>y_{\vec{g}\times\vec{t}} &amp; y_{\vec{t}} &amp; y_{\vec{g}} &amp; 0\cr<br>z_{\vec{g}\times\vec{t}} &amp; z_{\vec{t}} &amp; z_{\vec{g}} &amp; 0\cr<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{matrix}<br>\right)</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p></li></ol><p>—— 这一步实现3D$\rightarrow$2D的效果</p><p>投影变换的两种类型</p><ul><li>Orthographic Projection（假设相机无限远）</li><li>Perspective Projection（相机作为一个点）</li></ul><h3 id="Orthographic-Projection-正交投影">Orthographic Projection 正交投影</h3><ol><li><p>平移到中心</p></li><li><p>缩放为canonical cube (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">[-1,1]^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>)</p><p>Transform Matrix：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>o</mi><mi>r</mi><mi>t</mi><mi>h</mi><mi>o</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>r</mi><mo>−</mo><mi>l</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>t</mi><mo>−</mo><mi>b</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mi>f</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>r</mi><mo>+</mo><mi>l</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>t</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">M_{ortho} = \left(\begin{matrix}\frac{2}{r-l} &amp; 0 &amp; 0 &amp; 0\cr0 &amp; \frac{2}{t-b} &amp; 0 &amp; 0\cr0 &amp; 0 &amp; \frac{2}{n-f} &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)\left(\begin{matrix}1 &amp; 0 &amp; 0 &amp; -\frac{r+l}{2}\cr0 &amp; 1 &amp; 0 &amp; -\frac{t+b}{2}\cr0 &amp; 0 &amp; 1 &amp; -\frac{n+f}{2}\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.0231em;vertical-align:-2.2615em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7615em;"><span style="top:-4.9164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4196em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0985em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7615em;"><span style="top:-4.9164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.4196em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0985em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7615em;"><span style="top:-4.9164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4196em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.0985em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7615em;"><span style="top:-4.9164em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.668em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.4196em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.0985em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2615em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7362em;"><span style="top:-4.8561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.616em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2362em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7362em;"><span style="top:-4.8561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.616em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.3238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2362em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7362em;"><span style="top:-4.8561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.616em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2362em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7362em;"><span style="top:-4.8561em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.616em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-1.1238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2362em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221016122040590.png" alt="image-20221016122040590"></p></li></ol><p>（因为我们使用的是<strong>右手系</strong>，所以Z值越小深度值越大，照相机看向<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">-z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>）</p><h3 id="Perspective-Projection-透视投影">Perspective Projection 透视投影</h3><h4 id="如何定义一个Frustum">如何定义一个Frustum</h4><p>定义一个垂直可视角度field-of-view(fovY)、和一个宽高比aspect radio即可</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017144903795.png" alt="image-20221017144903795" style="zoom: 50%;" /><h4 id="Perspective-Projection"><strong>Perspective Projection</strong></h4><p>近大远小，平行线不再平行</p><p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221016155734310.png" alt="image-20221016155734310"></p><p>如何进行投影变换</p><ol><li><p>“Squish” the frustum into a cuboid（将视锥体的内容压缩到Cuboid中）</p></li><li><p>do orthographic projection（进行正交投影）</p></li></ol><p>推导过程：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221016202533188.png" alt="image-20221016202533188" style="zoom: 25%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230605111452269.png" alt="image-20230605111452269" style="zoom: 25%;" /><h1>光栅化 Rasterization</h1><h2 id="Canonical-Cube-to-Screen">Canonical Cube to Screen</h2><p>—— <strong>Rasterize == drawing onto the screen</strong></p><h3 id="屏幕和像素">屏幕和像素</h3><ul><li><p>Screen is an arrays of <strong>pixels</strong>.</p></li><li><p><strong>Resolution</strong> is the size of array.</p></li></ul><p><strong>Pixel</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017204039400.png" alt="image-20221017204039400" style="zoom:50%;" /><p><strong>Screen Space</strong></p><p>(不同地方对Screen Space的定义会有不同)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017145901163.png" alt="image-20221017145901163" style="zoom:50%;" /><ul><li>Pixel以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>的形式索引，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>都是整数</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>范围从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(width-1,height-1 )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></li><li>Pixel中心是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+0.5,y+0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span></span></li><li>屏幕大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(width,height)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></li></ul><h3 id="视口变换">视口变换</h3><ul><li><p>忽略z轴</p></li><li><p>变换<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">xy</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>平面：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>1</mn><msup><mo stretchy="false">]</mo><mn>2</mn></msup><mo>→</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi><mo stretchy="false">]</mo><mo>×</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1,1]^2\rightarrow [0,width]\times[0,height]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">h</span><span class="mord mathnormal">t</span><span class="mclose">]</span></span></span></span></p></li><li><p>Viewport transform matrix:</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>M</mi><mrow><mi>v</mi><mi>i</mi><mi>e</mi><mi>w</mi><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>w</mi><mi>i</mi><mi>d</mi><mi>t</mi><mi>h</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mfrac><mrow><mi>h</mi><mi>e</mi><mi>i</mi><mi>g</mi><mi>h</mi><mi>t</mi></mrow><mn>2</mn></mfrac></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">M_{viewport}=\left(\begin{matrix}\frac{width}{2} &amp; 0 &amp; 0 &amp; \frac{width}{2}\cr0 &amp; \frac{height}{2} &amp; 0 &amp; \frac{height}{2}\cr0 &amp; 0 &amp; 1 &amp; 0\cr0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">wp</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">or</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:4.9323em;vertical-align:-2.2162em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,1284c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-1292c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7162em;"><span style="top:-4.8361em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2162em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7162em;"><span style="top:-4.8361em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2162em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7162em;"><span style="top:-4.8361em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.5438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-2.3438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.1438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2162em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.7162em;"><span style="top:-4.8361em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">h</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.3438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.1438em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.2162em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-4.65em;"><span class="pstrut" style="height:6.8em;"></span><span style="width:0.875em;height:4.800em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.875em' height='4.800em' viewBox='0 0 875 4800'><path d='M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,1209c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-1344c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ul><h2 id="Drawing-to-Raster-Display">Drawing to Raster Display</h2><h3 id="Frame-Buffer-帧缓冲区">Frame Buffer 帧缓冲区</h3><p>为成像设备进行信息显示而开辟的，用于存储显示信息的内存</p><p>成像设备：</p><ul><li><p>示波器</p><p>原理：阴极射线管</p></li><li><p><strong>LCD</strong>(Liquid Crystal Display) Pixel（液晶显示）</p><p>原理：控制光栅</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017155732323.png" alt="image-20221017155732323" style="zoom:50%;" /></li><li><p><strong>LED</strong>(Light emitting diode array) Array Display</p><p>发光二极管</p></li><li><p>Electrophoretic (Electronic Ink) Display</p><p>水墨屏</p></li></ul><h3 id="Sample-采样">Sample 采样</h3><p>判断像素中心点是否在三角形内部</p><ul><li>定义一个inside函数</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017202645582.png" alt="image-20221017202645582" style="zoom: 67%;" /><ul><li><p>inside函数的实现：三个叉积运算</p></li><li><p>边缘问题：三角形边上的点的归属关系（不同地方定义不同，图形API内会有严格定义）</p></li><li><p>Axis Alined Bounding Box (AABB)</p><p>判断Bounding Box区域内的像素点，不需要整个屏幕的所有像素点都做判断</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017203512580.png" alt="image-20221017203512580" style="zoom: 67%;" /></li><li><p>进一步缩小bounding box的方法，但是这样处理不一定能让程序运行更快</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221017203936076.png" alt="image-20221017203936076" style="zoom: 50%;" /></li></ul><h3 id="Anti-Aliasing-反走样">Anti-Aliasing 反走样</h3><h4 id="Sampling-Theorem-采样理论">Sampling Theorem 采样理论</h4><ul><li>Rasterization = Sample 2D Position（在屏幕上采样像素位置）</li><li>Photograph = Sample Image Sensor Plane（在光感受器上采样自然光线信息）</li><li>Vedio = Sample Time (在时间上采样，每一帧都是一个特定的时间点，而非连续的)</li></ul><h4 id="Sampling-Artifacts-采样走样">Sampling Artifacts 采样走样</h4><ul><li>Jaggies (Aliasing) — sampling in space</li><li>Moire — undersampling images</li><li>Wagon Wheel effect (False Motion) — sampling in time</li></ul><p>Sampling Artifacts的原因：信号变化太快导致采样跟不上他的速度（速度不匹配）</p><h4 id="Anti-Aliasing-反走样-2">Anti-Aliasing 反走样</h4><p>先对原始信号做一个滤波，然后再进行采样</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018090056916.png" alt="image-20221018090056916" style="zoom:50%;" /><h4 id="Signal-Processing-Theorem-信号处理理论">Signal Processing Theorem 信号处理理论</h4><p><strong>傅里叶级数展开</strong>：把一个函数描述成很多正弦余弦函数的和（一个函数可以分解为不同的频率）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018092939328.png" alt="image-20221018092939328" style="zoom:80%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018093733480.png" alt="image-20221018093733480" style="zoom:50%;" /><p><strong>傅里叶变换</strong>：将一个信号分解为不同的频率</p><p>给定一个函数，我们都可以对其进行一定操作让他变为另一个函数，并且操作可逆</p><p>（<strong>时域与频域</strong>之间的转换）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018093802743.png" alt="image-20221018093802743" style="zoom:50%;" /><p><strong>通过频率的概念理解Aliasing</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018094327200.png" alt="image-20221018094327200" style="zoom:50%;" /><ul><li>高频信号没有被充分采样，导致采样后错误地表现出一个低频信号</li><li>在给定采样速率下，两个不同频率的信号经过采样得出的结果难以区分，叫做<strong>aliasing</strong></li></ul><p><strong>因而，高频率需要更快的采样速度</strong>，以满足对原始信号的更充分表达</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018093908480.png" alt="image-20221018093908480" style="zoom:50%;" /><h4 id="Filtering-滤波">Filtering 滤波</h4><p>用于去掉一些特定频率的内容</p><p>**频谱：**中心低频，越往外频率越高（对应到图像上，颜色信息差距越大的地方频率越高）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230605113700273.png" alt="image-20230605113700273" style="zoom: 67%;" /><ul><li><p>过滤低频信号：Edge获取内容的边界（高通滤波器）</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221018100448310.png" alt="image-20221018100448310" style="zoom: 45%;" /></li><li><p>过滤高频信号：Blur模糊（低通滤波器）</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221018100716159.png" alt="image-20221018100716159" style="zoom: 45%;" /></li><li><p>过滤低频和高频（获取中间频率内容）</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221018100911332.png" alt="image-20221018100911332" style="zoom: 45%;" /><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221018100922466.png" alt="image-20221018100922466" style="zoom: 45%;" /></li></ul><h4 id="Filetering-Convolution-Average">Filetering = Convolution(Average)</h4><p><strong>Convolution(卷积)：</strong></p><p>图形学简化后的概念：原始信号与周围信号进行加权平均得到结果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018101236140.png" alt="image-20221018101236140" style="zoom: 33%;" /><p><strong>Convolution Theorem(卷积定理)：</strong></p><ul><li><p>时域卷积 = 频域乘积</p></li><li><p>时域乘积 = 频域卷积</p></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018103251589.png" alt="image-20221018103251589" style="zoom:50%;" /><p><strong>Box Filter(卷积核)：</strong></p><ul><li>乘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>9</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>是为了做归一化，防止亮度过高</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018103529470.png" alt="image-20221018103529470" style="zoom:50%;" /><ul><li><p>卷积核在时域上越大，则表现在频域上就越小</p><p>即：卷积的范围越大，信号处理后高频信息更少，所以乘上的卷积核在频域上越小</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230605114110085.png" alt="image-20230605114110085" style="zoom:50%;" /></li></ul><h4 id="通过频率的概念来理解Sampling">通过频率的概念来理解Sampling</h4><p>采样 = 模拟原始信号的频谱</p><p>给你原始信号A，乘上冲击函数，得到采样结果</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221018104656047.png" alt="image-20221018104656047" style="zoom: 50%;" /><p>走样 = 混叠频率内容</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019104206921.png" alt="image-20221019104206921" style="zoom:50%;" /><h4 id="如何减少走样错误">如何减少走样错误</h4><ul><li><p>Option 1：Increase sampling rate</p><ul><li>本质是增加傅里叶变换级数</li><li>高分辨率的呈现、显示设备和framebuffers</li><li>但是消耗高，并且可能受限于物理限制（低分辨率屏幕）</li></ul></li><li><p>Option 2：Antialiasing</p><ul><li><p>在repeating前先让傅里叶展开的内容更接近</p></li><li><p>即在采样前通过低通滤波先过滤掉高频信息，然后再采样</p><p>Antialiasing = <strong>Limiting, then repeating</strong></p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221019110128918.png" alt="image-20221019110128918" style="zoom: 50%;" /><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221019110152125.png" alt="image-20221019110152125" style="zoom: 50%;" /></li><li><p>实际运用的Pre-Filter</p><p>一个1像素大小的box filter（低通滤波，模糊效果）</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221019110554940.png" alt="image-20221019110554940" style="zoom: 50%;" /><p><strong>Solution</strong>：</p><ul><li><p>通过一个一像素大小的box-blur去卷积<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></p><p>(convolving = filtering = averaging)</p></li><li><p>然后再对每个像素的中心进行采样</p></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019111052408.png" alt="image-20221019111052408" style="zoom:50%;" /></li></ul></li></ul><h3 id="常见抗锯齿方法">常见抗锯齿方法</h3><h4 id="MSAA">MSAA</h4><p>Multi-Sample Anti-alias, 对Anti-alias的近似，而不能严格意义上完全解决Anti-alias的问题</p><ul><li><p>Step 1</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019114336950.png" alt="image-20221019114336950" style="zoom:80%;" /><p>在一个像素内部增加采样点，得到更加准确的三角形在像素内的近似覆盖率</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019114541770.png" alt="image-20221019114541770" style="zoom: 50%;" /></li><li><p>Step 2</p><p>根据三角形的覆盖率求每个像素的平均值</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019114838200.png" alt="image-20221019114838200" style="zoom: 50%;" /></li></ul><p>MSAA是通过<strong>优化Blur(处理模糊信号)</strong>（对像素采样操刀）那个过程来实现反走样的，而不是通过提高采样率，不是增加分辨率</p><h4 id="FXAA">FXAA</h4><p>Fast Approximate AA，快速近似抗锯齿</p><p>是一种<strong>图像的后期处理</strong>，原理是得到一副有锯齿的图，通过图像匹配的方法找到边界，并且把这些边界换成没有锯齿的边界，而且非常非常快</p><h4 id="TAA">TAA</h4><p>Temporal AA，<strong>基于后处理实现</strong></p><p>简单高效，复用上一帧的信息来做AA，对于静态场景来说，相当于把MASS的样本分布在了时间上，并且对于当前帧没有做任何操作</p><h3 id="Super-Resolution-Super-Sampling-超采样">Super Resolution / Super Sampling 超采样</h3><ul><li>把低分辨率图拉大成高分辨率的图</li><li>本质上也是在解决采样不足的问题</li><li><strong>DLSS(Deep Learning Super Sampling)</strong></li></ul><h3 id="Visibility-Occlusion-可见性与剔除">Visibility / Occlusion 可见性与剔除</h3><h4 id="Painter’s-Algorithm-画家算法">Painter’s Algorithm 画家算法</h4><p>从最远的内容开始画，画到近处的内容，近处的内容覆盖远处的内容（画油画）</p><p>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">O_{(nlogn)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> triangles（在深度上进行排序）</p><p>会有无法解决的深度排序问题：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019152725046.png" alt="image-20221019152725046" style="zoom: 67%;" /><h4 id="ZBuffer-深度缓冲区">ZBuffer 深度缓冲区</h4><p>Idea：</p><ul><li>储存当前每个像素的最小深度值，<strong>每个像素内记录最浅深度</strong></li><li>需要一个额外的buffer来存储深度信息<ul><li>frame buffer储存颜色信息</li><li>depth buffer(z—buffer)存储深度信息</li></ul></li></ul><p>我们假定z是一个正值，代表物体到摄像机的深度距离，z越小越近，z越大越远</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019153402311.png" alt="image-20221019153402311" style="zoom:50%;" /><p>算法实现：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019182525558.png" alt="image-20221019182525558" style="zoom: 50%;" /><p>图解：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221019182547450.png" alt="image-20221019182547450" style="zoom:50%;" /><p>深度算法的时间复杂度：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>O</mi><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">O_{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0385em;vertical-align:-0.3552em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span></span></span></span> for <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> triangles（不进行排序，直接替换最小值）</p><h1>着色 Shading</h1><h2 id="着色的定义">着色的定义</h2><p>将<strong>材质</strong>应用到一个物体上的过程</p><h2 id="着色模型">着色模型</h2><p><strong>Perceptual Observation</strong></p><p>着色是一种感性的认知</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230605115049589.png" alt="image-20230605115049589" style="zoom:50%;" /><p><strong>着色是局部的</strong></p><p>shading有局部性，不考虑其他物体的存在，只考虑这个点的着色，不会考虑光线是否被遮挡</p><p>shading <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">!</mo><mo>=</mo></mrow><annotation encoding="application/x-tex">!=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span></span></span></span> shadow，shading得到的是<strong>明暗变化</strong>，但是不生成阴影</p><h3 id="Diffuse-Reflection-Lambertian-Term">Diffuse Reflection(Lambertian Term)</h3><ul><li><p>接收角度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608211854012.png" alt="image-20230608211854012" style="zoom:50%;" /></li><li><p>衰减角度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608211918465.png" alt="image-20230608211918465" style="zoom:50%;" /></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608211956088.png" alt="image-20230608211956088" style="zoom: 67%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608212505869.png" alt="image-20230608212505869" style="zoom:50%;" /><h3 id="Specular-Term-Blinn-Phong">Specular Term(Blinn-Phong)</h3><p>Intensity depends on view direction</p><ul><li><p>Bright near mirror reflection direction</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608212706491.png" alt="image-20230608212706491" style="zoom:50%;" /><p>V close to mirror reflection direction &lt;=&gt; <strong>half vector</strong> near normal</p></li><li><p>通过单位向量的点乘来判断法线的“near”程度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608212751472.png" alt="image-20230608212751472" style="zoom:50%;" /><ol><li><p>因为Blin-Phong模型是经验模型，所以没有考虑能量的问题（漫反射、点乘）</p></li><li><p>使用反射向量与观测向量点乘的方法叫做Phong模型，但是反射向量较难计算，<strong>Blinn-Phong模型更占优</strong></p></li><li><p>指数p的由来：向量点乘确实能表现两个向量的相邻程度，但是他的<strong>容忍度</strong>太高了，通过指数p来降低容忍度。实际效果表现为p控制高光大小，Blinn-Phong模型中p一般为100-200。</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213045889.png" alt="image-20230608213045889" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213055454.png" alt="image-20230608213055454" style="zoom:50%;" /></li></ol></li></ul><h3 id="Ambient-Term">Ambient Term</h3><p>渲染环境光不依赖于任何东西</p><ul><li>添加一个常数颜色值去处理被忽略的照明并填充全黑的阴影</li><li>Blinn-Phong模型中的环境光是一个近似值</li></ul><p>即：不让阴影全黑</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213312593.png" alt="image-20230608213312593" style="zoom:50%;" /><h3 id="This-is-Blinn-Phong-Reflection-Model">This is Blinn-Phong Reflection Model</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213337319.png" alt="image-20230608213337319" style="zoom:50%;" /><p>Ambient + Lambert + Blin-Phong</p><p>注意用单位向量点乘表示夹角大小时，Specular才需加指数p(降低容忍度，调整高光效果)，diffuse一般不需要</p><h2 id="着色频率-Shading-Frequencies">着色频率 Shading Frequencies</h2><p>所谓着色频率就是把着色应用到哪类图元上</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213720317.png" alt="image-20230608213720317" style="zoom:50%;" /><ul><li><p><strong>Flat Shading(Shade each triangle)</strong></p><ul><li><p>每个三角形是一个平面，一个三角形有一条法线，一个平面上（三角形内部）的颜色相同</p></li><li><p>不适用于平滑表面</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608213934799.png" alt="image-20230608213934799" style="zoom: 80%;" /></li></ul></li><li><p><strong>Gouraud Shading(Shade each vertex)</strong></p><ul><li><p>求顶点的法线，每个顶点做一次着色，三角形内部的颜色通过插值计算出来</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608214022683.png" alt="image-20230608214022683" style="zoom:80%;" /></li></ul></li><li><p><strong>Phong Shading(Shade each pixel)</strong></p><ul><li><p>三角形内部每一个像素通过插值计算出法线</p></li><li><p>利用法线计算每一个像素的颜色</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608214130071.png" alt="image-20230608214130071" style="zoom: 80%;" /></li></ul></li><li><p><strong>使用何种着色频率取决于模型三角形面数：</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608214200761.png" alt="image-20230608214200761" style="zoom:50%;" /></li><li><p><strong>定义逐顶点的法线：</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022102156325.png" alt="image-20221022102156325" style="zoom: 50%;" /><p>进阶：需要根据周围三角形的大小进行<strong>加权平均</strong></p></li><li><p><strong>定义逐顶点的法线</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608214706559.png" alt="image-20230608214706559" style="zoom:50%;" /></li></ul><p>利用三角形重心坐标插值计算</p><h1>实时渲染管线 Real-time Rendering Pipline</h1><h2 id="Pipeline">Pipeline</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608214837419.png" alt="image-20230608214837419" style="zoom:50%;" /><ul><li><p>Vertex Processing</p><p>Model, View, Projection transforms</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221022103931571.png" alt="image-20221022103931571" style="zoom: 25%;" /></li><li><p>Triangle Processing</p><p>根据顶点信息形成三角形</p></li><li><p>Rasteriazition</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221022103952951.png" alt="image-20221022103952951" style="zoom:25%;" /></li><li><p>Fragment Processing</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221022104051402.png" alt="image-20221022104051402" style="zoom:25%;" /></li><li><p>shading</p><p>考虑不同的着色频率</p><ul><li><p>使用Gouraud shading时shading可以在vertex processing</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221022104245776.png" alt="image-20221022104245776" style="zoom:25%;" /></li><li><p>使用Phong shading则需要等到获取像素信息后再shading</p></li></ul></li></ul><h2 id="Shader-Programs">Shader Programs</h2><ul><li><p>shader是对所有顶点/像素通用的，不需要有for循环</p></li><li><p>分为vertex shader和fragment shader</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221022105136528.png" alt="image-20221022105136528" style="zoom:50%;" /></li></ul><h2 id="GPU">GPU</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022153032214.png" alt="image-20221022153032214" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022153207163.png" alt="image-20221022153207163" style="zoom:50%;" /><h1>纹理映射 Texture Mapping</h1><p>希望在物体不同位置定义不同属性——<strong>定义任何一个点的基本属性</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022151825469.png" alt="image-20221022151825469" style="zoom: 50%;" /><p><strong>Surface are 2D</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022152031619.png" alt="image-20221022152031619" style="zoom:50%;" /><p><strong>Texture Applied to Surface</strong></p><p>纹理上的三角形与模型上的三角形一一映射（三角形的每个顶点对应纹理上的一个坐标）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022152159347.png" alt="image-20221022152159347" style="zoom:50%;" /><p>uv坐标：通常认为u、v均为0-1</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221022152445718.png" alt="image-20221022152445718" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608215134172.png" alt="image-20230608215134172" style="zoom:50%;" /><h1>三角形重心坐标 Barycentric Coordinate</h1><p><strong>目标：在三角新内部做任意属性的插值</strong></p><h2 id="Barycentirc-Coordinates">Barycentirc Coordinates</h2><p>A coordinate system for triangles (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo separator="true">,</mo><mi>β</mi><mo separator="true">,</mo><mi>γ</mi></mrow><annotation encoding="application/x-tex">\alpha ,\beta , \gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span></span>)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024102515064.png" alt="image-20221024102515064" style="zoom:50%;" /><p>A点的重心坐标</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024102557497.png" alt="image-20221024102557497" style="zoom:50%;" /><p>重心坐标的几何表示——面积之比</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024102756323.png" alt="image-20221024102756323" style="zoom:50%;" /><p>三角形的重心</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024102944584.png" alt="image-20221024102944584" style="zoom:50%;" /><p>任意一个点的重心坐标的计算</p><ul><li>法一：算面积</li><li>法二：公式</li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024102904788.png" alt="image-20221024102904788" style="zoom:50%;" /><h2 id="Using-Barycentric-Coordinates">Using Barycentric Coordinates</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024103309271.png" alt="image-20221024103309271" style="zoom:50%;" /><p><strong>投影后无法保证重心坐标不变</strong></p><ul><li>如果要插值三维空间的属性就需要在三维空间中做插值<ul><li>举例：深度插值在线性空间中进行</li></ul></li></ul><h1>纹理应用 Applying Texture</h1><h2 id="Simple-Texture-Mapping">Simple Texture Mapping</h2><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608215502239.png" alt="image-20230608215502239" style="zoom:50%;" /><h2 id="Texture-Magnification">Texture Magnification</h2><h3 id="Easy-Case">Easy Case</h3><p>放大后<strong>纹理分辨率不足</strong>的问题</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024104705021.png" alt="image-20221024104705021" style="zoom:50%;" /><p><strong>Nearest</strong>：取最近点</p><p><strong>Bilinear</strong>：双线性（取周围4个）</p><p><strong>Bicubic</strong>：双向三阶（取周围16个）</p><p><strong>Bilinear Interpolation</strong></p><p><strong>双线性差值</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024105004314.png" alt="image-20221024105004314" style="zoom:33%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024105019778.png" alt="image-20221024105019778" style="zoom:33%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024105121151.png" alt="image-20221024105121151" style="zoom:33%;" /><h3 id="Hard-Case">Hard Case</h3><p><strong>分辨率过大的问题</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024110027990.png" alt="image-20221024110027990" style="zoom:50%;" /><blockquote><p><strong>Jaggies锯齿是因为相邻频率重叠，Moire摩尔纹是因为一个采样周期内储存了原信息的多个频率周期</strong></p></blockquote><p>Screen Pixel “Footprint” in Texture</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024110608709.png" alt="image-20221024110608709" style="zoom: 50%;" /><p>注释：蓝色为像素覆盖纹理的区域，灰色的框表示采样率大小</p><p>近处像素覆盖的纹理区域与采样率相适配不会出问题，但是远处像素用一个蓝色的点就取平均值表示了整个平行四边形的框，显然会有问题</p><p>使用MSAA：能得到好的结果，但是开销会很大</p><ul><li>问题原因：<ul><li>在图形高度缩小后，一个pixel footprint里有多个texel</li><li>一个像素内的信号频率过高，需要更高的采样频率</li></ul></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024111409985.png" alt="image-20221024111409985" style="zoom:50%;" /><ul><li><p>另一种解决思路</p><p>采样会引起走样，如果不采样的话，只需要快速获得原采样区域的平局值（范围查询）</p><p>不同像素有不同的纹理覆盖大小，那么不同像素的范围查询就应该能够查询到任意的范围大小——引入<strong>MipMap</strong></p></li></ul><h2 id="MipMap">MipMap</h2><p>实现（<strong>快、近似、正方形的</strong>）范围查询</p><p><strong>用一张图生成一系列的图</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024112606318.png" alt="image-20221024112606318" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024112815739.png" alt="image-20221024112815739" style="zoom:50%;" /><p>使用Mipmap只比原来多<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>3</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>的存储量（级数求和）</p><p><strong>计算不同等级的Mipmap：</strong></p><p>使用屏幕空间内相邻采样点对应纹素空间的坐标来估算纹理的占用空间</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024132819099.png" alt="image-20221024132819099" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024132859622.png" alt="image-20221024132859622" style="zoom:50%;" /><p>用相邻纹理空间坐标的最大值代表采样点覆盖纹素的正方形大小</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024132957409.png" alt="image-20221024132957409" style="zoom:50%;" /><p>用该正方形内的平均颜色来代表该mipmap层级内采样点的占用空间</p><p>四舍五入取mipmap层级的形象化：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024133533227.png" alt="image-20221024133533227" style="zoom:50%;" /><p><strong>Trilinear Interpolation</strong></p><p>Mipmap层级内部做插值（屏幕空间和纹理空间都有），Mipmap层级之间再做插值（可以理解为两次查询和一次插值）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024133700820.png" alt="image-20221024133700820" style="zoom:50%;" /><p>采样一张贴图的七次插值运算=Screen Space x&amp;y(2) + Mipmap Level D x&amp;y(2) + Mipmap Level D+1 x&amp;y(2) + continuous D value(1)</p><p>这样处理后的mipmap层级形象化：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024134028002.png" alt="image-20221024134028002" style="zoom:50%;" /><p><strong>Mipmap的局限性</strong></p><p>对远处的表现过度模糊</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024135514481.png" alt="image-20221024135514481" style="zoom:50%;" /><p>产生问题的原因：对远处覆盖区域的采样不一定是正方形，用一个正方形的框去框住就难免会有采样精度的问题</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024140203104.png" alt="image-20221024140203104" style="zoom:50%;" /><p>使用**各向异性过滤(Anisotropic Filtering)**则可以部分解决Mipmap采样产生的问题（Ripmap）</p><p>各向异性过滤总共的开销是原来的四倍，mipmap只是增加了三分之一（只是对显存的开销，基本和算力无关）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024135711567.png" alt="image-20221024135711567" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024140400555.png" alt="image-20221024140400555" style="zoom:50%;" /><p>Mipmap正常采样图只在对角线上，其余的图对应回正常图都是矩形，所以解决了远处覆盖区域是矩形的问题（部分解决的由来），比正方形的mipmap查询要好，但是无法解决非矩形的情况</p><p><strong>EWA filtering</strong></p><p>不规则的形状可以拆成很多的圆形去覆盖这个形状，进行<strong>多次查询</strong>（代价大）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221024140637117.png" alt="image-20221024140637117" style="zoom:50%;" /><h2 id="Other-Applications">Other Applications</h2><p>可以把纹理理解为一块数据，可以做点查询和范围查询</p><p>texture = memory + range query（filtering）</p><ul><li>General method to bring data to fragment calculation</li></ul><p>纹理的许多其他运用：</p><ul><li><p>Evironment lighting</p></li><li><p>Store microgeometry</p></li><li><p>Procedural textures</p></li><li><p>Solid modeling</p></li><li><p>Volume rendering</p></li><li><p>…</p></li></ul><h3 id="Environment-Map">Environment Map</h3><p>假设只记录光源的方向信息——认为光无限远，不记录光的深度信息</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093146966.png" alt="image-20221026093146966" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093323619.png" alt="image-20221026093323619" style="zoom: 50%;" /><p>把光照信息存在球体上：<strong>Spherical Environment Map</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093400107.png" alt="image-20221026093400107" style="zoom:50%;" /><p>问题：球体贴图展开后在靠近极点的地方会被压缩扭曲</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093459648.png" alt="image-20221026093459648" style="zoom:50%;" /><p>解决方法：<strong>Cube Map</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093556148.png" alt="image-20221026093556148" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093609953.png" alt="image-20221026093609953" style="zoom:50%;" /><h3 id="Bump-Mapping">Bump Mapping</h3><p>凹凸贴图：可以在不让模型复杂的基础上让物体表面的属性发生变化，人为做假的法线获得假的着色结果，让人有凹凸的感觉，但实际上模型没有凹凸</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026093804850.png" alt="image-20221026093804850" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026094255429.png" alt="image-20221026094255429" style="zoom:50%;" /><p>计算方法：</p><p>（由二维类推）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026095028624.png" alt="image-20221026095028624" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026095042595.png" alt="image-20221026095042595" style="zoom:50%;" /><h3 id="Displacement-Mapping">Displacement Mapping</h3><p>相较于Bump Mapping，Dp贴图实际上改变了三角形顶点的位置</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026095247327.png" alt="image-20221026095247327" style="zoom:50%;" /><p>要求：</p><ul><li>模型足够细致，三角形顶点数量足够多<ul><li>为此DirectX提供<strong>动态曲面细分</strong>，即在需要的时候动态增加三角形数量（顶点数量），以满足对顶点数量的需求</li></ul></li></ul><h3 id="3D-Procedural-Noise">3D Procedural Noise</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026095853368.png" alt="image-20221026095853368" style="zoom:50%;" /><h3 id="Precomputed-Shading">Precomputed Shading</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026095931399.png" alt="image-20221026095931399" style="zoom:50%;" /><h3 id="3D-Textures-and-Volume-Rendering">3D Textures and Volume Rendering</h3><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20230608220017718.png" alt="image-20230608220017718" style="zoom:50%;" /><h1>几何 Geometry</h1><h2 id="几何表示方法-Geometry-Representation">几何表示方法 Geometry Representation</h2><h2 id="Overview">Overview</h2><h3 id="Implicit">Implicit</h3><p>告诉你一些点满足的关系，但不告诉你这些点实际在哪儿</p><p>例如：Sphere：all points in 3D, where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>Z</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x^2+y^2+Z^2 = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>更通用：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026101503348.png" alt="image-20221026101503348" style="zoom:50%;" /><ul><li><p>Sampling Can Be Hard：隐式几何难以表示</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026101643880.png" alt="image-20221026101643880" style="zoom:50%;" /></li><li><p>Inside/Outside Test Easy：隐式几何便于判断点是否在几何内</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026101749721.png" alt="image-20221026101749721" style="zoom:50%;" /></li></ul><h3 id="Explicit">Explicit</h3><p>所有点都被<strong>直接给出</strong>，或者通过<strong>参数映射</strong>的方法表示</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026101938890.png" alt="image-20221026101938890" style="zoom:50%;" /><ul><li><p>Sampling Can Be Easy：显式几何容易表示</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026102155632.png" alt="image-20221026102155632" style="zoom:50%;" /></li><li><p>Inside/Outside Test Hard：显式几何难以判断点是否在几何内</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026102328575.png" alt="image-20221026102328575" style="zoom:50%;" /></li></ul><p>==<strong>Best Representation Depends on the Task</strong>==</p><h2 id="隐式表示-Implicit">隐式表示 Implicit</h2><ul><li><p>Algebraic Surfaces</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026102647573.png" alt="image-20221026102647573" style="zoom:50%;" /></li><li><p>Constructive Solid Geometry(CSG)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026102904939.png" alt="image-20221026102904939" style="zoom:50%;" /></li><li><p>Distance Function</p><p>空间中的任何一个点到你想要表述的几何形体表面上任何一个点的最小距离</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026104616018.png" alt="image-20221026104616018" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026110716287.png" alt="image-20221026110716287" style="zoom:50%;" /><p>在blend distance function后再恢复成原本的表面</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026104807031.png" alt="image-20221026104807031" style="zoom:50%;" /></li><li><p>Level Set Methods（水平集）</p><p>思想和距离函数相同，只不过是把距离函数表示成了带数据的格子</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026111833579.png" alt="image-20221026111833579" style="zoom:50%;" /></li><li><p>Fractals（分形）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221026112159965.png" alt="image-20221026112159965" style="zoom:50%;" /></li></ul><p><strong>Implicit Representation - Pros&amp;Cons</strong></p><p>Pros：</p><ul><li>阐述简洁（比如通过一个函数）</li><li>某些特定的查询很简单（在内在外的查询、到表面的距离查询）</li><li>易于做光线求交</li><li>表示很准确，没有sampling error</li><li>在拓扑结构上方便做变化</li></ul><p>Cons：</p><ul><li>难以表现复杂形状</li></ul><h2 id="显式表示-Explicit">显式表示 Explicit</h2><ul><li><p>Point Cloud（点云）</p><ul><li><p>最简单的表示方式：一系列的点形成</p></li><li><p>可以容易地表示任何几何</p></li><li><p>适用于大型数据集</p></li><li><p>常转变为多边形网格</p></li><li><p>不易于在采样不足的区域绘制</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027082240881.png" alt="image-20221027082240881" style="zoom:50%;" /></li></ul></li><li><p>Polygon Mesh（几何网格体——<strong>用的最多</strong>）</p><ul><li><p>储存顶点和多边形</p></li><li><p>更易于运算、模拟和自适应采样</p></li><li><p>拥有更复杂的数据结构</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027082708419.png" alt="image-20221027082708419" style="zoom:50%;" /></li><li><p>The Wavefront Object File(.obj) Format</p><ul><li><p>一个指明vertices, normals, texture coordinates and their connectivities的文本文件</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027083131340.png" alt="image-20221027083131340" style="zoom:50%;" /></li></ul></li></ul></li></ul><h2 id="Curve">Curve</h2><h3 id="Bezier-Curve">Bezier Curve</h3><p><strong>定义：</strong></p><p>用一系列的控制点定义某条曲线，该切线满足一些性质</p><ul><li>曲线始于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">p_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 终于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>曲线起始点切线为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>0</mn></msub><msub><mi>p</mi><mn>1</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{p_0p_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span> 终点切线为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mrow><msub><mi>p</mi><mn>2</mn></msub><msub><mi>p</mi><mn>3</mn></msub></mrow><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{p_2p_3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9084em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span></li></ul><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027084106100.png" alt="image-20221027084106100" style="zoom: 33%;" /><p><strong>de Casteljau Algorithm：</strong></p><p>给定任意的控制点绘制出贝塞尔曲线</p><p>认为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>0</mn></msub><mtext>到</mtext><msub><mi>b</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">b_0 \text{到} b_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">到</span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(起点到终点)映射到时间t的0到1，绘制曲线即为求出每个t对应的位置，以此将绘制曲线转换为绘制一个个点；实际算法为在序号相邻控制点之间进行线性插值计算，并以此递归</p><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221027084608503.png" alt="image-20221027084608503" style="zoom:50%;" /><img src="E:/Notes_GitSpace/ComputerGraphics/FromGAMES/assets/image-20221027084948760.png" alt="image-20221027084948760" style="zoom: 33%;" /><p>满足任意一个时刻贝塞尔曲线上的点由控制点所控制</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027085419975.png" alt="image-20221027085419975" style="zoom:50%;" /><p>伯恩斯坦多项式：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027085710727.png" alt="image-20221027085710727" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027085739095.png" alt="image-20221027085739095" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027085923606.png" alt="image-20221027085923606" style="zoom:50%;" /><p><strong>贝塞尔曲线的性质：</strong></p><ul><li>起始点和终点为两个控制点</li><li>起始点和终点的切线</li><li>对控制点进行<strong>仿射变换</strong>后绘制出的贝塞尔曲线，和对已知贝塞尔曲线的每个顶点进行仿射变换得到的曲线相同，即对一条贝塞尔曲线进行仿射变换，不需要记录曲线上每一个点的信息，而是只需要根据控制点进行仿射变换，再用变换后的控制点进行绘制即可（注意：并不适用于其他变换，如投影就不满足此性质）</li><li>凸包性质：绘制出的贝塞尔曲线一定在控制点的凸包内</li></ul><h3 id="Piecewise-Bezier-Curves：">Piecewise Bezier Curves：</h3><p>控制点过多的时候贝塞尔曲线就难以控制，所以可以把一条High-Order的贝塞尔曲线拆分为多条Low-Order的贝塞尔曲线（广泛运用）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027092359892.png" alt="image-20221027092359892" style="zoom:50%;" /><p>分段贝塞尔曲线的<strong>连续性</strong>：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027092553936.png" alt="image-20221027092553936" style="zoom:50%;" /><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mn>0</mn></msup></mrow><annotation encoding="application/x-tex">c^0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span>连续：第一段的终止点=第二段的起始点</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027092640433.png" alt="image-20221027092640433" style="zoom:50%;" /><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>c</mi><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">c^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span>连续：切线连续（一阶导数的连续）——共线、等长</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027092828762.png" alt="image-20221027092828762" style="zoom:50%;" /><h3 id="Other-Types-of-Splines">Other Types of Splines</h3><p><strong>Spline(样条线):</strong></p><p>由给定的控制点形成的，并且满足一定程度的连续性的一条连续的曲线</p><p>简单总结：一条可控的曲线</p><p><strong>B-splines(basis splines):</strong></p><ul><li>即为基函数样条线</li><li>相当于是贝塞尔曲线的扩展</li><li>满足贝塞尔曲线的所有重要属性，并且具有局部性（分段贝塞尔也具有局部性）</li></ul><h2 id="Surfaces">Surfaces</h2><h3 id="Bezier-Surface">Bezier Surface</h3><p>贝塞尔曲线扩展到贝塞尔曲面</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027094136397.png" alt="image-20221027094136397" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027094205707.png" alt="image-20221027094205707" style="zoom:50%;" /><p><strong>一个方向上通过控制点获得的曲线的点再去作为另一个方向的控制点</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027094445344.png" alt="image-20221027094445344" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221027094500951.png" alt="image-20221027094500951" style="zoom:50%;" /><ul><li><p>Evaluating Bezier Surface —— separate 1D de Casteljau Algorithm</p><ul><li><p>Evaluating Surace Position For Parameters (u,v) —— 相当于为两个方向提供t，需要二维控制</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028174742640.png" alt="image-20221028174742640" style="zoom:50%;" /><p>在u方向上用控制点得到四个蓝点，再用这四个蓝点再v方向上作为控制点</p></li></ul></li></ul><h2 id="Mesh-Operation-Geometry-Processing">Mesh Operation: Geometry Processing</h2><h3 id="Overview-2">Overview</h3><ul><li><p>Mesh subdivision(upsampling)</p><p>增加分辨率，引入更多的三角形让细节更丰富</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028180607085.png" alt="image-20221028180607085" style="zoom:50%;" /></li><li><p>Mesh simplification(downsampling)</p><p>降低分辨率，并保持原有的表现</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028180555159.png" alt="image-20221028180555159" style="zoom:50%;" /></li><li><p>Mesh regularization(same triangles)</p><p>让三角形大小、形状相似</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028180539193.png" alt="image-20221028180539193" style="zoom:50%;" /></li></ul><h3 id="Subdivision">Subdivision</h3><ul><li><p>Loop Subdivision</p><p>——<strong>三角形网格</strong>常见的细分方式</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028180923914.png" alt="image-20221028180923914" style="zoom:50%;" /><ul><li><p>①拆分出更多的三角形(增加顶点)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028181009456.png" alt="image-20221028181009456" style="zoom:50%;" /></li><li><p>②调整三角形位置(顶点位置)，让原本的表面更光滑</p><p>把顶点分为旧的顶点和新的顶点，分别对他们进行调整</p><p>（Loop是发明者的姓氏，算法里没有循环）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028181020130.png" alt="image-20221028181020130" style="zoom:50%;" /><ul><li><p>对于新的顶点（白点）：</p><p>根据旧的顶点位置对新的顶点进行加权平均</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028181436534.png" alt="image-20221028181436534" style="zoom:50%;" /></li><li><p>对于旧顶点：</p><p>一部分去“相信”周围旧顶点的位置的平均值，另一部分保留自己的位置</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028181800449.png" alt="image-20221028181800449" style="zoom:50%;" /><p>degree：白点连了六条边，那么白点的degree就是6</p><p>通过<strong>加权</strong>的方式来平均上述的两个“相信”程度</p><p>解释：当一个顶点的degree越大，比如说有20，说明这个顶点几乎可以完全由周围的顶点来决定，就会更加根据周围的点来确定新的位置；当一个顶点的degree越小，小到2，说明这个顶点的位置很重要，就会更加根据自己原本的位置来决定新的位置</p></li></ul></li></ul><p>Loop细分的效果：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028182729446.png" alt="image-20221028182729446" style="zoom:50%;" /></li><li><p>Catmull-Clark Subdivision(用于一般网格)</p><p>定义<strong>Non-quad face非四边形面</strong>和<strong>Extraordinary vertex奇异点</strong>（度不等于4的点）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028183137160.png" alt="image-20221028183137160" style="zoom:50%;" /><p>每一条边都取中点，每一个面也取中点，并把他们连接起来</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028184313305.png" alt="image-20221028184313305" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028184420407.png" alt="image-20221028184420407" style="zoom:50%;" /><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028184435016.png" alt="image-20221028184435016" style="zoom:50%;" /><p>位置更新：</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028184452793.png" alt="image-20221028184452793" style="zoom:50%;" /></li><li><p>总的来说，细分都是增加点的数量，然后再根据一定的规则去改变点的位置；</p></li><li><p>Loop细分只能用于三角形面，Catmall-Clark细分可以用于任意的多边形</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028184734684.png" alt="image-20221028184734684" style="zoom:50%;" /></li></ul><h3 id="Simplification">Simplification</h3><p><strong>在保持大体形状的同时减少网格体数量</strong></p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028185330982.png" alt="image-20221028185330982" style="zoom:50%;" /><p>Collapsing An Edge —— edge collapsing(边坍缩)</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028190027668.png" alt="image-20221028190027668" style="zoom:50%;" /><ul><li><p>Quadric Error Metrics(二次误差度量) —— 知道哪些边不重要可以塌缩到一起</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028190432201.png" alt="image-20221028190432201" style="zoom:50%;" /><p>左侧为求平均的方法，肉眼可见效果不佳</p><p>二次误差度量：找到一个点，使得这个点到与他相关的所有边的<strong>距离的平方和最小</strong>的这个最小值</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028191802218.png" alt="image-20221028191802218" style="zoom:50%;" /><p>知道哪些边不重要可以塌缩到一起：对所有边进行计算，取到二次度量误差<strong>最小</strong>的边</p><p>但是每进行一次塌缩，会有一些相邻的边的位置发生更改，所以需要使用一种即可以<strong>取最小值</strong>，又可以<strong>动态的以最小的代价对数据进行更新</strong>的数据结构——优先队列/堆</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028192114101.png" alt="image-20221028192114101" style="zoom:50%;" /></li></ul><h1>阴影映射 Shadow Mapping</h1><ul><li><p>一种图像空间的做法</p></li><li><p>使用shadow mapping在生成阴影这一步时不需要知道场景的几何信息</p></li><li><p>但是会有走样现象</p></li><li><p>核心思想：如果一个点不在阴影里，那么说明这个点可以同时被<strong>摄像机和光源</strong>“看见”</p></li></ul><h2 id="Process">Process</h2><p>第一步：从光源看向场景，记录看到的任何点的深度</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028193324208.png" alt="image-20221028193324208" style="zoom:50%;" /><p>第二步：从摄像机看向场景</p><p>获取从摄像机看到的点 投影回 光源看向场景内相同点的方向上记录的深度（记为深度1），再获取摄像机看到的点到光源的实际深度（记为深度2），两个深度进行比较</p><p>如果深度1==深度2，说明这个点不在阴影里</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028193811163.png" alt="image-20221028193811163" style="zoom:50%;" /><p>如果深度1&lt;深度2，说明这个点在阴影里</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028193827774.png" alt="image-20221028193827774" style="zoom:50%;" /><h2 id="Visualizing-Shadow-Mapping">Visualizing Shadow Mapping</h2><ul><li><p>有无shadows的对比</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028194209268.png" alt="image-20221028194209268" style="zoom:50%;" /></li><li><p>从光源看向场景</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028194232670.png" alt="image-20221028194232670" style="zoom:50%;" /></li><li><p>获得光源方向的深度值</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028194304932.png" alt="image-20221028194304932" style="zoom:50%;" /></li><li><p>两个深度进行比较</p><p>球体受光面有瑕疵的原因：</p><ol><li>数据精度（浮点误差）</li><li>shadow map的分辨率不足</li></ol><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028194357859.png" alt="image-20221028194357859" style="zoom:50%;" /></li></ul><h2 id="Problems-with-shadow-maps">Problems with shadow maps</h2><ul><li><p>硬阴影（只能用于点光源）</p></li><li><p>阴影质量依赖于shadow map的分辨率（基于图像的技术普遍存在的问题）</p></li><li><p>存在浮点深度值的相等比较、尺度、偏差、容忍度等问题</p></li><li><p>硬阴影和软阴影</p><p>硬阴影边缘很锐利，软阴影边缘会有过渡（半影）</p><img src="http://qiuhanblog-imgsubmit.oss-cn-beijing.aliyuncs.com/img/image-20221028195746578.png" alt="image-20221028195746578" style="zoom:50%;" /><p>点光源不会有软阴影，对于软阴影来说光源会有大小</p></li></ul>]]></content>
    
    
    <summary type="html">Games101课程的学习笔记</summary>
    
    
    
    <category term="学习笔记" scheme="https://himoqiuhan.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="图形学" scheme="https://himoqiuhan.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    <category term="Games" scheme="https://himoqiuhan.github.io/tags/Games/"/>
    
  </entry>
  
</feed>
